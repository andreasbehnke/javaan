[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.<init>(com.mxgraph.view.mxGraph):
[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.<init>(com.mxgraph.view.mxGraph)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.<init>(com.mxgraph.view.mxGraph,int):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.crossingStage(java.lang.Object):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.cycleStage(java.lang.Object):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.execute(java.lang.Object):
[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.execute(java.lang.Object)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.execute(java.lang.Object,java.util.List):

--

[M]java.util.Set com.mxgraph.layout.hierarchical.mxHierarchicalLayout.filterDescendants(java.lang.Object):

--

[M]java.util.List com.mxgraph.layout.hierarchical.mxHierarchicalLayout.findRoots(java.lang.Object,java.util.Set):

--

[M]java.lang.Object[] com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getEdges(java.lang.Object):

--

[M]double com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getInterHierarchySpacing():

--

[M]double com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getInterRankCellSpacing():

--

[M]double com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getIntraCellSpacing():

--

[M]com.mxgraph.layout.hierarchical.model.mxGraphHierarchyModel com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getModel():

--

[M]int com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getOrientation():

--

[M]double com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getParallelEdgeSpacing():

--

[M]int com.mxgraph.layout.hierarchical.mxHierarchicalLayout.getParentBorder():

--

[M]boolean com.mxgraph.layout.hierarchical.mxHierarchicalLayout.isDisableEdgeStyle():

--

[M]boolean com.mxgraph.layout.hierarchical.mxHierarchicalLayout.isFineTuning():

--

[M]boolean com.mxgraph.layout.hierarchical.mxHierarchicalLayout.isMoveParent():

--

[M]boolean com.mxgraph.layout.hierarchical.mxHierarchicalLayout.isResizeParent():

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.layeringStage():

--

[M]double com.mxgraph.layout.hierarchical.mxHierarchicalLayout.placementStage(double,java.lang.Object):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.run(java.lang.Object):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setDisableEdgeStyle(boolean):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setFineTuning(boolean):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setInterHierarchySpacing(double):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setInterRankCellSpacing(double):
[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setInterRankCellSpacing(double)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setIntraCellSpacing(double):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setLoggerLevel(java.util.logging.Level):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setMoveParent(boolean):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setOrientation(int):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setParallelEdgeSpacing(double):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setParentBorder(int):

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.setResizeParent(boolean):

--

[M]java.lang.String com.mxgraph.layout.hierarchical.mxHierarchicalLayout.toString():

--

[M]void com.mxgraph.layout.hierarchical.mxHierarchicalLayout.traverse(java.lang.Object,boolean,java.lang.Object,java.util.Set,java.util.Set,java.util.List,java.util.Set):

--

[M]void com.mxgraph.layout.mxGraphLayout.<init>(com.mxgraph.view.mxGraph):

--

[M]void com.mxgraph.layout.mxGraphLayout.arrangeGroups(java.lang.Object[],int):

--

[M]void com.mxgraph.layout.mxGraphLayout.execute(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.layout.mxGraphLayout.getConstraint(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object com.mxgraph.layout.mxGraphLayout.getConstraint(java.lang.Object,java.lang.Object,java.lang.Object,boolean):

--

[M]com.mxgraph.view.mxGraph com.mxgraph.layout.mxGraphLayout.getGraph():

--

[M]com.mxgraph.util.mxPoint com.mxgraph.layout.mxGraphLayout.getParentOffset(java.lang.Object):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.layout.mxGraphLayout.getVertexBounds(java.lang.Object):

--

[M]boolean com.mxgraph.layout.mxGraphLayout.isEdgeIgnored(java.lang.Object):

--

[M]boolean com.mxgraph.layout.mxGraphLayout.isUseBoundingBox():

--

[M]boolean com.mxgraph.layout.mxGraphLayout.isVertexIgnored(java.lang.Object):

--

[M]boolean com.mxgraph.layout.mxGraphLayout.isVertexMovable(java.lang.Object):

--

[M]void com.mxgraph.layout.mxGraphLayout.moveCell(java.lang.Object,double,double):

--

[M]void com.mxgraph.layout.mxGraphLayout.setEdgePoints(java.lang.Object,java.util.List):

--

[M]void com.mxgraph.layout.mxGraphLayout.setEdgeStyleEnabled(java.lang.Object,boolean):

--

[M]void com.mxgraph.layout.mxGraphLayout.setOrthogonalEdge(java.lang.Object,boolean):

--

[M]void com.mxgraph.layout.mxGraphLayout.setUseBoundingBox(boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.layout.mxGraphLayout.setVertexLocation(java.lang.Object,double,double):

--

[M]void com.mxgraph.layout.mxIGraphLayout.execute(java.lang.Object):

--

[M]void com.mxgraph.layout.mxIGraphLayout.moveCell(java.lang.Object,double,double):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.add(java.lang.Object,java.lang.Object,int):

--

[M]void com.mxgraph.model.mxIGraphModel.addListener(java.lang.String,com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]void com.mxgraph.model.mxIGraphModel.beginUpdate():
[M]void com.mxgraph.model.mxIGraphModel.beginUpdate()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object[] com.mxgraph.model.mxIGraphModel.cloneCells(java.lang.Object[],boolean):

--

[M]boolean com.mxgraph.model.mxIGraphModel.contains(java.lang.Object):

--

[M]void com.mxgraph.model.mxIGraphModel.endUpdate():
[M]void com.mxgraph.model.mxIGraphModel.endUpdate()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getChildAt(java.lang.Object,int):

--

[M]int com.mxgraph.model.mxIGraphModel.getChildCount(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getEdgeAt(java.lang.Object,int):

--

[M]int com.mxgraph.model.mxIGraphModel.getEdgeCount(java.lang.Object):

--

[M]com.mxgraph.model.mxGeometry com.mxgraph.model.mxIGraphModel.getGeometry(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getParent(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getRoot():

--

[M]java.lang.String com.mxgraph.model.mxIGraphModel.getStyle(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getTerminal(java.lang.Object,boolean):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.getValue(java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isAncestor(java.lang.Object,java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isCollapsed(java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isConnectable(java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isEdge(java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isVertex(java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.isVisible(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.remove(java.lang.Object):

--

[M]void com.mxgraph.model.mxIGraphModel.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]void com.mxgraph.model.mxIGraphModel.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener,java.lang.String):

--

[M]boolean com.mxgraph.model.mxIGraphModel.setCollapsed(java.lang.Object,boolean):

--

[M]com.mxgraph.model.mxGeometry com.mxgraph.model.mxIGraphModel.setGeometry(java.lang.Object,com.mxgraph.model.mxGeometry):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.setRoot(java.lang.Object):

--

[M]java.lang.String com.mxgraph.model.mxIGraphModel.setStyle(java.lang.Object,java.lang.String):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.setTerminal(java.lang.Object,java.lang.Object,boolean):

--

[M]java.lang.Object com.mxgraph.model.mxIGraphModel.setValue(java.lang.Object,java.lang.Object):

--

[M]boolean com.mxgraph.model.mxIGraphModel.setVisible(java.lang.Object,boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.<init>(com.mxgraph.swing.mxGraphComponent):

--

[M]java.awt.Point com.mxgraph.swing.handler.mxGraphHandler.convertPoint(java.awt.Point):

--

[M]java.awt.event.MouseEvent com.mxgraph.swing.handler.mxGraphHandler.createEvent(java.awt.dnd.DropTargetEvent):

--

[M]com.mxgraph.swing.handler.mxCellMarker com.mxgraph.swing.handler.mxGraphHandler.createMarker():

--

[M]com.mxgraph.swing.handler.mxMovePreview com.mxgraph.swing.handler.mxGraphHandler.createMovePreview():

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.dragEnter(java.awt.dnd.DropTargetDragEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.dragExit(java.awt.dnd.DropTargetEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.dragOver(java.awt.dnd.DropTargetDragEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.drop(java.awt.dnd.DropTargetDropEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.dropActionChanged(java.awt.dnd.DropTargetDragEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.fold(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.swing.handler.mxGraphHandler.getCells(java.lang.Object):

--

[M]java.awt.Cursor com.mxgraph.swing.handler.mxGraphHandler.getCursor(java.awt.event.MouseEvent):

--

[M]javax.swing.JComponent com.mxgraph.swing.handler.mxGraphHandler.getDropTarget(java.awt.dnd.DropTargetEvent):

--

[M]com.mxgraph.swing.mxGraphComponent com.mxgraph.swing.handler.mxGraphHandler.getGraphComponent():

--

[M]com.mxgraph.swing.handler.mxGraphTransferHandler com.mxgraph.swing.handler.mxGraphHandler.getGraphTransferHandler(java.awt.dnd.DropTargetEvent):

--

[M]com.mxgraph.swing.handler.mxCellMarker com.mxgraph.swing.handler.mxGraphHandler.getMarker():

--

[M]com.mxgraph.swing.handler.mxMovePreview com.mxgraph.swing.handler.mxGraphHandler.getMovePreview():

--

[M]java.awt.Point com.mxgraph.swing.handler.mxGraphHandler.getPreviewLocation(java.awt.event.MouseEvent,boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.installDragGestureHandler():

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.installDropTargetHandler():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isCenterPreview():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isCloneEnabled():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isEnabled():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isImagePreview():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isLivePreview():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isMarkerEnabled():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isMoveEnabled():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isRemoveCellsFromParent():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isSelectEnabled():

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.isVisible():

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.mouseDragged(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.mouseMoved(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.mousePressed(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.mouseReleased(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.moveCells(java.lang.Object[],double,double,java.lang.Object,java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.paint(java.awt.Graphics):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.reset():

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setCenterPreview(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setCloneEnabled(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setEnabled(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setImagePreview(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setLivePreview(boolean):
[M]void com.mxgraph.swing.handler.mxGraphHandler.setLivePreview(boolean)
 [M]void org.javaan.Graph2dDisplay$1.createHandlers()

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setMarker(com.mxgraph.swing.handler.mxCellMarker):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setMarkerEnabled(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setMoveEnabled(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setPreviewBounds(java.awt.Rectangle):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setRemoveCellsFromParent(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setSelectEnabled(boolean):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.setVisible(boolean):

--

[M]boolean com.mxgraph.swing.handler.mxGraphHandler.shouldRemoveCellFromParent(java.lang.Object,java.lang.Object[],java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.start(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.handler.mxGraphHandler.updateDragImage(java.lang.Object[]):

--

[M]void com.mxgraph.swing.mxGraphComponent.<init>(com.mxgraph.view.mxGraph):
[M]void com.mxgraph.swing.mxGraphComponent.<init>(com.mxgraph.view.mxGraph)
 [M]void org.javaan.Graph2dDisplay$1.<init>(org.javaan.Graph2dDisplay,com.mxgraph.view.mxGraph)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]boolean com.mxgraph.swing.mxGraphComponent.access$000(com.mxgraph.swing.mxGraphComponent):

--

[M]com.mxgraph.swing.util.mxICellOverlay com.mxgraph.swing.mxGraphComponent.addCellOverlay(java.lang.Object,com.mxgraph.swing.util.mxICellOverlay):

--

[M]void com.mxgraph.swing.mxGraphComponent.addListener(java.lang.String,com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.canExportCell(java.lang.Object):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.canImportCell(java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.checkTripleBuffer():

--

[M]void com.mxgraph.swing.mxGraphComponent.clearCellOverlays():

--

[M]void com.mxgraph.swing.mxGraphComponent.clearCellOverlays(java.lang.Object):

--

[M]com.mxgraph.swing.view.mxInteractiveCanvas com.mxgraph.swing.mxGraphComponent.createCanvas():

--

[M]com.mxgraph.swing.view.mxICellEditor com.mxgraph.swing.mxGraphComponent.createCellEditor():

--

[M]java.awt.Component[] com.mxgraph.swing.mxGraphComponent.createComponents(com.mxgraph.view.mxCellState):

--

[M]com.mxgraph.swing.handler.mxConnectionHandler com.mxgraph.swing.mxGraphComponent.createConnectionHandler():

--

[M]com.mxgraph.swing.mxGraphComponent$mxGraphControl com.mxgraph.swing.mxGraphComponent.createGraphControl():

--

[M]com.mxgraph.swing.handler.mxGraphHandler com.mxgraph.swing.mxGraphComponent.createGraphHandler():
[M]com.mxgraph.swing.handler.mxGraphHandler com.mxgraph.swing.mxGraphComponent.createGraphHandler()
 [M]void org.javaan.Graph2dDisplay$1.createHandlers()

--

[M]com.mxgraph.swing.handler.mxCellHandler com.mxgraph.swing.mxGraphComponent.createHandler(com.mxgraph.view.mxCellState):

--

[M]void com.mxgraph.swing.mxGraphComponent.createHandlers():

--

[M]com.mxgraph.swing.handler.mxPanningHandler com.mxgraph.swing.mxGraphComponent.createPanningHandler():

--

[M]com.mxgraph.swing.handler.mxSelectionCellsHandler com.mxgraph.swing.mxGraphComponent.createSelectionCellsHandler():

--

[M]javax.swing.TransferHandler com.mxgraph.swing.mxGraphComponent.createTransferHandler():

--

[M]void com.mxgraph.swing.mxGraphComponent.createTripleBuffer(int,int):

--

[M]void com.mxgraph.swing.mxGraphComponent.destroyTripleBuffer():

--

[M]void com.mxgraph.swing.mxGraphComponent.escape(java.awt.event.KeyEvent):

--

[M]javax.swing.ImageIcon com.mxgraph.swing.mxGraphComponent.getBackgroundImage():

--

[M]com.mxgraph.swing.view.mxInteractiveCanvas com.mxgraph.swing.mxGraphComponent.getCanvas():

--

[M]java.lang.Object com.mxgraph.swing.mxGraphComponent.getCellAt(int,int):

--

[M]java.lang.Object com.mxgraph.swing.mxGraphComponent.getCellAt(int,int,boolean):

--

[M]java.lang.Object com.mxgraph.swing.mxGraphComponent.getCellAt(int,int,boolean,java.lang.Object):

--

[M]com.mxgraph.swing.view.mxICellEditor com.mxgraph.swing.mxGraphComponent.getCellEditor():

--

[M]com.mxgraph.swing.util.mxICellOverlay[] com.mxgraph.swing.mxGraphComponent.getCellOverlays(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.getCells(java.awt.Rectangle):

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.getCells(java.awt.Rectangle,java.lang.Object):

--

[M]com.mxgraph.swing.handler.mxConnectionHandler com.mxgraph.swing.mxGraphComponent.getConnectionHandler():

--

[M]java.lang.String com.mxgraph.swing.mxGraphComponent.getEditingValue(java.lang.Object,java.util.EventObject):

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.getExportableCells(java.lang.Object[]):

--

[M]javax.swing.ImageIcon com.mxgraph.swing.mxGraphComponent.getFoldingIcon(com.mxgraph.view.mxCellState):

--

[M]java.awt.Rectangle com.mxgraph.swing.mxGraphComponent.getFoldingIconBounds(com.mxgraph.view.mxCellState,javax.swing.ImageIcon):

--

[M]com.mxgraph.view.mxGraph com.mxgraph.swing.mxGraphComponent.getGraph():

--

[M]com.mxgraph.swing.mxGraphComponent$mxGraphControl com.mxgraph.swing.mxGraphComponent.getGraphControl():

--

[M]com.mxgraph.swing.handler.mxGraphHandler com.mxgraph.swing.mxGraphComponent.getGraphHandler():

--

[M]java.awt.Color com.mxgraph.swing.mxGraphComponent.getGridColor():

--

[M]int com.mxgraph.swing.mxGraphComponent.getGridStyle():

--

[M]int com.mxgraph.swing.mxGraphComponent.getHorizontalPageBorder():

--

[M]int com.mxgraph.swing.mxGraphComponent.getHorizontalPageCount():

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.getImportableCells(java.lang.Object[]):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.swing.mxGraphComponent.getLayoutAreaSize():

--

[M]java.awt.Color com.mxgraph.swing.mxGraphComponent.getPageBackgroundColor():

--

[M]java.awt.Color com.mxgraph.swing.mxGraphComponent.getPageBorderColor():

--

[M]java.awt.Color com.mxgraph.swing.mxGraphComponent.getPageBreakColor():

--

[M]java.awt.print.PageFormat com.mxgraph.swing.mxGraphComponent.getPageFormat():

--

[M]double com.mxgraph.swing.mxGraphComponent.getPageScale():

--

[M]java.awt.Color com.mxgraph.swing.mxGraphComponent.getPageShadowColor():

--

[M]com.mxgraph.util.mxPoint com.mxgraph.swing.mxGraphComponent.getPageTranslate(double):

--

[M]com.mxgraph.swing.handler.mxPanningHandler com.mxgraph.swing.mxGraphComponent.getPanningHandler():

--

[M]com.mxgraph.util.mxPoint com.mxgraph.swing.mxGraphComponent.getPointForEvent(java.awt.event.MouseEvent):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.swing.mxGraphComponent.getPointForEvent(java.awt.event.MouseEvent,boolean):

--

[M]java.awt.Dimension com.mxgraph.swing.mxGraphComponent.getPreferredSizeForPage():

--

[M]float com.mxgraph.swing.mxGraphComponent.getPreviewAlpha():

--

[M]java.awt.Dimension com.mxgraph.swing.mxGraphComponent.getScaledPreferredSizeForGraph():

--

[M]com.mxgraph.swing.handler.mxSelectionCellsHandler com.mxgraph.swing.mxGraphComponent.getSelectionCellsHandler():

--

[M]int com.mxgraph.swing.mxGraphComponent.getTolerance():

--

[M]java.awt.image.BufferedImage com.mxgraph.swing.mxGraphComponent.getTripleBuffer():

--

[M]int com.mxgraph.swing.mxGraphComponent.getVerticalPageBorder():

--

[M]int com.mxgraph.swing.mxGraphComponent.getVerticalPageCount():

--

[M]double com.mxgraph.swing.mxGraphComponent.getZoomFactor():

--

[M]int com.mxgraph.swing.mxGraphComponent.getZoomPolicy():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.hitFoldingIcon(java.lang.Object,int,int):

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.importCells(java.lang.Object[],double,double,java.lang.Object,java.awt.Point):

--

[M]void com.mxgraph.swing.mxGraphComponent.insertComponent(com.mxgraph.view.mxCellState,java.awt.Component):

--

[M]void com.mxgraph.swing.mxGraphComponent.installDoubleClickHandler():

--

[M]void com.mxgraph.swing.mxGraphComponent.installFocusHandler():

--

[M]void com.mxgraph.swing.mxGraphComponent.installKeyHandler():

--

[M]void com.mxgraph.swing.mxGraphComponent.installResizeHandler():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isAntiAlias():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isAutoExtend():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isAutoScroll():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isCenterPage():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isCenterZoom():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isCloneEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isConnectable():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isConstrainedEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isDragEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isEditEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isEditing():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isEnterStopsCellEditing():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isEscapeEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isEventsEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isExportEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isFoldingEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isForceMarqueeEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isForceTripleBuffered():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isGridEnabledEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isGridVisible():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isImportEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isInvokesStopCellEditing():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isKeepSelectionVisibleOnZoom():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isPageBreaksVisible():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isPageVisible():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isPanning():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isPanningEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isPreferPageSize():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isSignificant(double,double):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isSwimlaneSelectionEnabled():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isTextAntiAlias():

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isToggleEvent(java.awt.event.MouseEvent):

--

[M]boolean com.mxgraph.swing.mxGraphComponent.isTripleBuffered():

--

[M]java.lang.Object com.mxgraph.swing.mxGraphComponent.labelChanged(java.lang.Object,java.lang.Object,java.util.EventObject):

--

[M]void com.mxgraph.swing.mxGraphComponent.maintainScrollBar(boolean,double,boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.paintBackground(java.awt.Graphics):

--

[M]void com.mxgraph.swing.mxGraphComponent.paintBackgroundImage(java.awt.Graphics):

--

[M]java.awt.Rectangle com.mxgraph.swing.mxGraphComponent.paintBackgroundPage(java.awt.Graphics):

--

[M]void com.mxgraph.swing.mxGraphComponent.paintGrid(java.awt.Graphics):

--

[M]int com.mxgraph.swing.mxGraphComponent.print(java.awt.Graphics,java.awt.print.PageFormat,int):

--

[M]void com.mxgraph.swing.mxGraphComponent.redraw(com.mxgraph.view.mxCellState):

--

[M]void com.mxgraph.swing.mxGraphComponent.refresh():

--

[M]void com.mxgraph.swing.mxGraphComponent.removeAllComponents(java.util.Hashtable):

--

[M]void com.mxgraph.swing.mxGraphComponent.removeAllOverlays(java.util.Hashtable):

--

[M]com.mxgraph.swing.util.mxICellOverlay com.mxgraph.swing.mxGraphComponent.removeCellOverlay(java.lang.Object,com.mxgraph.swing.util.mxICellOverlay):

--

[M]void com.mxgraph.swing.mxGraphComponent.removeCellOverlayComponent(com.mxgraph.swing.util.mxICellOverlay,java.lang.Object):

--

[M]com.mxgraph.swing.util.mxICellOverlay[] com.mxgraph.swing.mxGraphComponent.removeCellOverlays(java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.removeComponent(java.awt.Component,java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]void com.mxgraph.swing.mxGraphComponent.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener,java.lang.String):

--

[M]void com.mxgraph.swing.mxGraphComponent.repaintTripleBuffer(java.awt.Rectangle):

--

[M]void com.mxgraph.swing.mxGraphComponent.scrollCellToVisible(java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.scrollCellToVisible(java.lang.Object,boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.scrollToCenter(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.selectCellForEvent(java.lang.Object,java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.mxGraphComponent.selectCellsForEvent(java.lang.Object[],java.awt.event.MouseEvent):

--

[M]java.lang.Object[] com.mxgraph.swing.mxGraphComponent.selectRegion(java.awt.Rectangle,java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.mxGraphComponent.setAntiAlias(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setAutoExtend(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setAutoScroll(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setBackgroundImage(javax.swing.ImageIcon):

--

[M]void com.mxgraph.swing.mxGraphComponent.setCellEditor(com.mxgraph.swing.view.mxICellEditor):

--

[M]com.mxgraph.swing.util.mxICellOverlay com.mxgraph.swing.mxGraphComponent.setCellWarning(java.lang.Object,java.lang.String):

--

[M]com.mxgraph.swing.util.mxICellOverlay com.mxgraph.swing.mxGraphComponent.setCellWarning(java.lang.Object,java.lang.String,javax.swing.ImageIcon):

--

[M]com.mxgraph.swing.util.mxICellOverlay com.mxgraph.swing.mxGraphComponent.setCellWarning(java.lang.Object,java.lang.String,javax.swing.ImageIcon,boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setCenterPage(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setCenterZoom(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setConnectable(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setDragEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setEnterStopsCellEditing(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setEscapeEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setEventsEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setExportEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setFoldingEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setGraph(com.mxgraph.view.mxGraph):

--

[M]void com.mxgraph.swing.mxGraphComponent.setGridColor(java.awt.Color):

--

[M]void com.mxgraph.swing.mxGraphComponent.setGridStyle(int):

--

[M]void com.mxgraph.swing.mxGraphComponent.setGridVisible(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setHorizontalPageCount(int):

--

[M]void com.mxgraph.swing.mxGraphComponent.setImportEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setInvokesStopCellEditing(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setKeepSelectionVisibleOnZoom(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageBackgroundColor(java.awt.Color):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageBorderColor(java.awt.Color):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageBreakColor(java.awt.Color):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageBreaksVisible(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageFormat(java.awt.print.PageFormat):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageScale(double):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageShadowColor(java.awt.Color):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPageVisible(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPanning(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPreferPageSize(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setPreviewAlpha(float):

--

[M]void com.mxgraph.swing.mxGraphComponent.setSwimlaneSelectionEnabled(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setTextAntiAlias(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setTolerance(int):

--

[M]void com.mxgraph.swing.mxGraphComponent.setToolTips(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setTripleBuffered(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.setVerticalPageCount(int):

--

[M]void com.mxgraph.swing.mxGraphComponent.setZoomFactor(double):

--

[M]void com.mxgraph.swing.mxGraphComponent.setZoomPolicy(int):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.swing.mxGraphComponent.snapScaledPoint(com.mxgraph.util.mxPoint):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.swing.mxGraphComponent.snapScaledPoint(com.mxgraph.util.mxPoint,double,double):

--

[M]void com.mxgraph.swing.mxGraphComponent.startEditing():

--

[M]void com.mxgraph.swing.mxGraphComponent.startEditingAtCell(java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.startEditingAtCell(java.lang.Object,java.util.EventObject):

--

[M]void com.mxgraph.swing.mxGraphComponent.stopEditing(boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.updateCellOverlayComponent(com.mxgraph.view.mxCellState,com.mxgraph.swing.util.mxICellOverlay):

--

[M]java.util.Hashtable com.mxgraph.swing.mxGraphComponent.updateCellOverlays(java.lang.Object):

--

[M]void com.mxgraph.swing.mxGraphComponent.updateComponent(com.mxgraph.view.mxCellState,java.awt.Component):

--

[M]void com.mxgraph.swing.mxGraphComponent.updateComponents():

--

[M]java.util.Hashtable com.mxgraph.swing.mxGraphComponent.updateComponents(java.lang.Object):

--

[M]java.lang.String com.mxgraph.swing.mxGraphComponent.validateGraph():

--

[M]java.lang.String com.mxgraph.swing.mxGraphComponent.validateGraph(java.lang.Object,java.util.Hashtable):

--

[M]void com.mxgraph.swing.mxGraphComponent.zoom(boolean,boolean):

--

[M]void com.mxgraph.swing.mxGraphComponent.zoom(double):

--

[M]void com.mxgraph.swing.mxGraphComponent.zoomActual():

--

[M]void com.mxgraph.swing.mxGraphComponent.zoomAndCenter():

--

[M]void com.mxgraph.swing.mxGraphComponent.zoomIn():

--

[M]void com.mxgraph.swing.mxGraphComponent.zoomOut():

--

[M]void com.mxgraph.swing.mxGraphComponent.zoomTo(double,boolean):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.<init>():

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseClicked(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseDragged(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseEntered(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseExited(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseMoved(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mousePressed(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.swing.util.mxMouseAdapter.mouseReleased(java.awt.event.MouseEvent):

--

[M]void com.mxgraph.util.mxEventSource.<init>():

--

[M]void com.mxgraph.util.mxEventSource.<init>(java.lang.Object):

--

[M]void com.mxgraph.util.mxEventSource.addListener(java.lang.String,com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]void com.mxgraph.util.mxEventSource.fireEvent(com.mxgraph.util.mxEventObject):

--

[M]void com.mxgraph.util.mxEventSource.fireEvent(com.mxgraph.util.mxEventObject,java.lang.Object):

--

[M]java.lang.Object com.mxgraph.util.mxEventSource.getEventSource():

--

[M]boolean com.mxgraph.util.mxEventSource.isEventsEnabled():

--

[M]void com.mxgraph.util.mxEventSource.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener):

--

[M]void com.mxgraph.util.mxEventSource.removeListener(com.mxgraph.util.mxEventSource$mxIEventListener,java.lang.String):

--

[M]void com.mxgraph.util.mxEventSource.setEventSource(java.lang.Object):

--

[M]void com.mxgraph.util.mxEventSource.setEventsEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.<init>():
[M]void com.mxgraph.view.mxGraph.<init>()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void com.mxgraph.view.mxGraph.<init>(com.mxgraph.model.mxIGraphModel):

--

[M]void com.mxgraph.view.mxGraph.<init>(com.mxgraph.model.mxIGraphModel,com.mxgraph.view.mxStylesheet):

--

[M]void com.mxgraph.view.mxGraph.<init>(com.mxgraph.view.mxStylesheet):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.addAllEdges(java.lang.Object[]):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.addCell(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.addCell(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.addCell(java.lang.Object,java.lang.Object,java.lang.Integer,java.lang.Object,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.addCells(java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.addCells(java.lang.Object[],java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.addCells(java.lang.Object[],java.lang.Object,java.lang.Integer):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.addCells(java.lang.Object[],java.lang.Object,java.lang.Integer,java.lang.Object,java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.addEdge(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Integer):

--

[M]void com.mxgraph.view.mxGraph.addImageBundle(com.mxgraph.util.mxImageBundle):

--

[M]void com.mxgraph.view.mxGraph.addPropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void com.mxgraph.view.mxGraph.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void com.mxgraph.view.mxGraph.addSelectionCell(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.addSelectionCells(java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.alignCells(java.lang.String):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.alignCells(java.lang.String,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.alignCells(java.lang.String,java.lang.Object[],java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.cellConnected(java.lang.Object,java.lang.Object,boolean,com.mxgraph.view.mxConnectionConstraint):

--

[M]void com.mxgraph.view.mxGraph.cellDrawn(com.mxgraph.canvas.mxICanvas,com.mxgraph.view.mxCellState,java.lang.Object,java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.cellLabelChanged(java.lang.Object,java.lang.Object,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellSizeUpdated(java.lang.Object,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsAdded(java.lang.Object[],java.lang.Object,java.lang.Integer,java.lang.Object,java.lang.Object,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsAdded(java.lang.Object[],java.lang.Object,java.lang.Integer,java.lang.Object,java.lang.Object,boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsFolded(java.lang.Object[],boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsFolded(java.lang.Object[],boolean,boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsMoved(java.lang.Object[],double,double,boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsOrdered(java.lang.Object[],boolean):

--

[M]void com.mxgraph.view.mxGraph.cellsRemoved(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.cellsResized(java.lang.Object[],com.mxgraph.util.mxRectangle[]):

--

[M]void com.mxgraph.view.mxGraph.cellsToggled(java.lang.Object[],boolean):

--

[M]void com.mxgraph.view.mxGraph.clearSelection():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.cloneCells(java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.cloneCells(java.lang.Object[],boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.connectCell(java.lang.Object,java.lang.Object,boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.connectCell(java.lang.Object,java.lang.Object,boolean,com.mxgraph.view.mxConnectionConstraint):

--

[M]void com.mxgraph.view.mxGraph.constrainChild(java.lang.Object):

--

[M]java.lang.String com.mxgraph.view.mxGraph.convertValueToString(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.createEdge(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String):

--

[M]com.mxgraph.view.mxGraphView com.mxgraph.view.mxGraph.createGraphView():

--

[M]java.lang.Object com.mxgraph.view.mxGraph.createGroupCell(java.lang.Object[]):

--

[M]com.mxgraph.view.mxGraphSelectionModel com.mxgraph.view.mxGraph.createSelectionModel():

--

[M]com.mxgraph.view.mxStylesheet com.mxgraph.view.mxGraph.createStylesheet():

--

[M]java.lang.Object com.mxgraph.view.mxGraph.createVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double,java.lang.String):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.createVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double,java.lang.String,boolean):

--

[M]void com.mxgraph.view.mxGraph.disconnectGraph(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.drawCell(com.mxgraph.canvas.mxICanvas,java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.drawGraph(com.mxgraph.canvas.mxICanvas):

--

[M]void com.mxgraph.view.mxGraph.drawState(com.mxgraph.canvas.mxICanvas,com.mxgraph.view.mxCellState,boolean):

--

[M]void com.mxgraph.view.mxGraph.enterGroup():

--

[M]void com.mxgraph.view.mxGraph.enterGroup(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.exitGroup():

--

[M]void com.mxgraph.view.mxGraph.extendParent(java.lang.Object):

--

[M]java.util.List com.mxgraph.view.mxGraph.findTreeRoots(java.lang.Object):

--

[M]java.util.List com.mxgraph.view.mxGraph.findTreeRoots(java.lang.Object,boolean):

--

[M]java.util.List com.mxgraph.view.mxGraph.findTreeRoots(java.lang.Object,boolean,boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.flipEdge(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.foldCells(boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.foldCells(boolean,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.foldCells(boolean,boolean,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.foldCells(boolean,boolean,java.lang.Object[],boolean):

--

[M]com.mxgraph.view.mxConnectionConstraint[] com.mxgraph.view.mxGraph.getAllConnectionConstraints(com.mxgraph.view.mxCellState,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getAllEdges(java.lang.Object[]):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getAlternateEdgeStyle():

--

[M]int com.mxgraph.view.mxGraph.getBorder():

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundingBox(java.lang.Object):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundingBox(java.lang.Object,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundingBox(java.lang.Object,boolean,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundingBoxFromGeometry(java.lang.Object[]):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundsForCells(java.lang.Object[],boolean,boolean,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getBoundsForGroup(java.lang.Object,java.lang.Object[],double):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getCellBounds(java.lang.Object):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getCellBounds(java.lang.Object,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getCellBounds(java.lang.Object,boolean,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getCellBounds(java.lang.Object,boolean,boolean,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getCellContainmentArea(java.lang.Object):

--

[M]com.mxgraph.model.mxGeometry com.mxgraph.view.mxGraph.getCellGeometry(java.lang.Object):

--

[M]java.util.Map com.mxgraph.view.mxGraph.getCellStyle(java.lang.Object):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getCellValidationError(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getCellsBeyond(double,double,java.lang.Object,boolean,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getCellsForGroup(java.lang.Object[]):

--

[M]int com.mxgraph.view.mxGraph.getChangesRepaintThreshold():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getChildCells(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getChildCells(java.lang.Object,boolean,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getChildEdges(java.lang.Object):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.view.mxGraph.getChildOffsetForCell(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getChildVertices(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getCloneableCells(java.lang.Object[]):

--

[M]com.mxgraph.view.mxConnectionConstraint com.mxgraph.view.mxGraph.getConnectionConstraint(com.mxgraph.view.mxCellState,com.mxgraph.view.mxCellState,boolean):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.view.mxGraph.getConnectionPoint(com.mxgraph.view.mxCellState,com.mxgraph.view.mxConnectionConstraint):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getConnections(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getConnections(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getConnections(java.lang.Object,java.lang.Object,boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.getCurrentRoot():

--

[M]com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction com.mxgraph.view.mxGraph.getDefaultLoopStyle():

--

[M]double com.mxgraph.view.mxGraph.getDefaultOverlap():

--

[M]java.lang.Object com.mxgraph.view.mxGraph.getDefaultParent():
[M]java.lang.Object com.mxgraph.view.mxGraph.getDefaultParent()
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getDeletableCells(java.lang.Object[]):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.getDropTarget(java.lang.Object[],java.awt.Point,java.lang.Object):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getEdgeValidationError(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdges(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdges(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdges(java.lang.Object,java.lang.Object,boolean,boolean,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdges(java.lang.Object,java.lang.Object,boolean,boolean,boolean,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdgesBetween(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getEdgesBetween(java.lang.Object,java.lang.Object,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getFoldableCells(java.lang.Object[],boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getGraphBounds():

--

[M]int com.mxgraph.view.mxGraph.getGridSize():

--

[M]java.lang.String com.mxgraph.view.mxGraph.getImage(com.mxgraph.view.mxCellState):

--

[M]java.util.List com.mxgraph.view.mxGraph.getImageBundles():

--

[M]void com.mxgraph.view.mxGraph.getImageBundles(java.util.List):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getImageFromBundles(java.lang.String):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getIncomingEdges(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getIncomingEdges(java.lang.Object,java.lang.Object):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getLabel(java.lang.Object):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getLinkForCell(java.lang.Object):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getMaximumGraphBounds():

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getMinimumGraphSize():

--

[M]com.mxgraph.model.mxIGraphModel com.mxgraph.view.mxGraph.getModel():
[M]com.mxgraph.model.mxIGraphModel com.mxgraph.view.mxGraph.getModel()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getMovableCells(java.lang.Object[]):

--

[M]com.mxgraph.view.mxMultiplicity[] com.mxgraph.view.mxGraph.getMultiplicities():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getOpposites(java.lang.Object[],java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getOpposites(java.lang.Object[],java.lang.Object,boolean,boolean):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.view.mxGraph.getOrigin():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getOutgoingEdges(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getOutgoingEdges(java.lang.Object,java.lang.Object):

--

[M]double com.mxgraph.view.mxGraph.getOverlap(java.lang.Object):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getPaintBounds(java.lang.Object[]):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getPreferredSizeForCell(java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getRemovedCellsForChanges(java.util.List):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.getSelectionCell():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getSelectionCells():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.getSelectionCellsForChanges(java.util.List):

--

[M]int com.mxgraph.view.mxGraph.getSelectionCount():

--

[M]com.mxgraph.view.mxGraphSelectionModel com.mxgraph.view.mxGraph.getSelectionModel():

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.getStartSize(java.lang.Object):

--

[M]com.mxgraph.view.mxStylesheet com.mxgraph.view.mxGraph.getStylesheet():

--

[M]java.lang.String com.mxgraph.view.mxGraph.getTargetForCell(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.getTerminalForPort(java.lang.Object,boolean):

--

[M]java.lang.String com.mxgraph.view.mxGraph.getToolTipForCell(java.lang.Object):

--

[M]com.mxgraph.util.mxPoint com.mxgraph.view.mxGraph.getTranslateForRoot(java.lang.Object):

--

[M]com.mxgraph.view.mxGraphView com.mxgraph.view.mxGraph.getView():

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.graphModelChanged(com.mxgraph.model.mxIGraphModel,java.util.List):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.groupCells():

--

[M]java.lang.Object com.mxgraph.view.mxGraph.groupCells(java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.groupCells(java.lang.Object,double):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.groupCells(java.lang.Object,double,java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.home():

--

[M]java.lang.Object com.mxgraph.view.mxGraph.insertEdge(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.insertEdge(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String):
[M]java.lang.Object com.mxgraph.view.mxGraph.insertEdge(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.String)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object com.mxgraph.view.mxGraph.insertVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.insertVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double,java.lang.String):
[M]java.lang.Object com.mxgraph.view.mxGraph.insertVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double,java.lang.String)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object com.mxgraph.view.mxGraph.insertVertex(java.lang.Object,java.lang.String,java.lang.Object,double,double,double,double,java.lang.String,boolean):

--

[M]boolean com.mxgraph.view.mxGraph.isAllowDanglingEdges():

--

[M]boolean com.mxgraph.view.mxGraph.isAllowLoops():

--

[M]boolean com.mxgraph.view.mxGraph.isAllowNegativeCoordinates():

--

[M]boolean com.mxgraph.view.mxGraph.isAllowOverlapParent(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isAutoOrigin():

--

[M]boolean com.mxgraph.view.mxGraph.isAutoSizeCell(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isAutoSizeCells():

--

[M]boolean com.mxgraph.view.mxGraph.isCellBendable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellCloneable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellCollapsed(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellConnectable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellDeletable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellDisconnectable(java.lang.Object,java.lang.Object,boolean):

--

[M]boolean com.mxgraph.view.mxGraph.isCellEditable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellFoldable(java.lang.Object,boolean):

--

[M]boolean com.mxgraph.view.mxGraph.isCellLocked(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellMovable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellResizable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellSelectable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellSelected(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellVisible(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isCellsBendable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsCloneable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsDeletable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsDisconnectable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsEditable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsLocked():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsMovable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsResizable():

--

[M]boolean com.mxgraph.view.mxGraph.isCellsSelectable():

--

[M]boolean com.mxgraph.view.mxGraph.isCloneInvalidEdges():

--

[M]boolean com.mxgraph.view.mxGraph.isCollapseToPreferredSize():

--

[M]boolean com.mxgraph.view.mxGraph.isConnectableEdges():

--

[M]boolean com.mxgraph.view.mxGraph.isConstrainChild(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isConstrainChildren():

--

[M]boolean com.mxgraph.view.mxGraph.isDisconnectOnMove():

--

[M]boolean com.mxgraph.view.mxGraph.isDropEnabled():

--

[M]boolean com.mxgraph.view.mxGraph.isEdgeLabelsMovable():

--

[M]boolean com.mxgraph.view.mxGraph.isEdgeValid(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isEnabled():

--

[M]boolean com.mxgraph.view.mxGraph.isExtendParent(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isExtendParents():

--

[M]boolean com.mxgraph.view.mxGraph.isExtendParentsOnAdd():

--

[M]boolean com.mxgraph.view.mxGraph.isGridEnabled():

--

[M]boolean com.mxgraph.view.mxGraph.isHtmlLabel(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isHtmlLabels():

--

[M]boolean com.mxgraph.view.mxGraph.isKeepEdgesInBackground():

--

[M]boolean com.mxgraph.view.mxGraph.isKeepEdgesInForeground():

--

[M]boolean com.mxgraph.view.mxGraph.isLabelClipped(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isLabelMovable(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isLabelsClipped():

--

[M]boolean com.mxgraph.view.mxGraph.isLabelsVisible():

--

[M]boolean com.mxgraph.view.mxGraph.isLoop(com.mxgraph.view.mxCellState):

--

[M]boolean com.mxgraph.view.mxGraph.isMultigraph():

--

[M]boolean com.mxgraph.view.mxGraph.isOrthogonal(com.mxgraph.view.mxCellState):

--

[M]boolean com.mxgraph.view.mxGraph.isPort(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isPortsEnabled():

--

[M]boolean com.mxgraph.view.mxGraph.isResetEdgesOnConnect():

--

[M]boolean com.mxgraph.view.mxGraph.isResetEdgesOnMove():

--

[M]boolean com.mxgraph.view.mxGraph.isResetEdgesOnResize():

--

[M]boolean com.mxgraph.view.mxGraph.isResetViewOnRootChange():

--

[M]boolean com.mxgraph.view.mxGraph.isSelectionEmpty():

--

[M]boolean com.mxgraph.view.mxGraph.isSplitEnabled():

--

[M]boolean com.mxgraph.view.mxGraph.isSplitTarget(java.lang.Object,java.lang.Object[]):

--

[M]boolean com.mxgraph.view.mxGraph.isSwimlane(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isSwimlaneNesting():

--

[M]boolean com.mxgraph.view.mxGraph.isTerminalPointMovable(java.lang.Object,boolean):

--

[M]boolean com.mxgraph.view.mxGraph.isValidAncestor(java.lang.Object,java.lang.Object,boolean):

--

[M]boolean com.mxgraph.view.mxGraph.isValidConnection(java.lang.Object,java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isValidDropTarget(java.lang.Object,java.lang.Object[]):

--

[M]boolean com.mxgraph.view.mxGraph.isValidRoot(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isValidSource(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isValidTarget(java.lang.Object):

--

[M]boolean com.mxgraph.view.mxGraph.isVertexLabelsMovable():

--

[M]void com.mxgraph.view.mxGraph.main(java.lang.String[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.moveCells(java.lang.Object[],double,double):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.moveCells(java.lang.Object[],double,double,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.moveCells(java.lang.Object[],double,double,boolean,java.lang.Object,java.awt.Point):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.orderCells(boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.orderCells(boolean,java.lang.Object[]):

--

[M]java.util.Map com.mxgraph.view.mxGraph.postProcessCellStyle(java.util.Map):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.processChange(com.mxgraph.util.mxUndoableEdit$mxUndoableChange,boolean,boolean):

--

[M]com.mxgraph.util.mxRectangle com.mxgraph.view.mxGraph.processChanges(java.util.List,boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.refresh():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.removeCells():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.removeCells(java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.removeCells(java.lang.Object[],boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.removeCellsFromParent():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.removeCellsFromParent(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.removeImageBundle(com.mxgraph.util.mxImageBundle):

--

[M]void com.mxgraph.view.mxGraph.removePropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void com.mxgraph.view.mxGraph.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void com.mxgraph.view.mxGraph.removeSelectionCell(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.removeSelectionCells(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.removeStateForCell(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.repaint():

--

[M]void com.mxgraph.view.mxGraph.repaint(com.mxgraph.util.mxRectangle):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.resetEdge(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.resetEdges(java.lang.Object[]):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.resizeCell(java.lang.Object,com.mxgraph.util.mxRectangle):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.resizeCells(java.lang.Object[],com.mxgraph.util.mxRectangle[]):

--

[M]void com.mxgraph.view.mxGraph.selectAll():

--

[M]void com.mxgraph.view.mxGraph.selectAll(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.selectCell(boolean,boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.selectCells(boolean,boolean):

--

[M]void com.mxgraph.view.mxGraph.selectCells(boolean,boolean,java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.selectChildCell():

--

[M]void com.mxgraph.view.mxGraph.selectEdges():

--

[M]void com.mxgraph.view.mxGraph.selectEdges(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.selectNextCell():

--

[M]void com.mxgraph.view.mxGraph.selectParentCell():

--

[M]void com.mxgraph.view.mxGraph.selectPreviousCell():

--

[M]void com.mxgraph.view.mxGraph.selectVertices():

--

[M]void com.mxgraph.view.mxGraph.selectVertices(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.setAllowDanglingEdges(boolean):

--

[M]void com.mxgraph.view.mxGraph.setAllowLoops(boolean):

--

[M]void com.mxgraph.view.mxGraph.setAllowNegativeCoordinates(boolean):

--

[M]void com.mxgraph.view.mxGraph.setAlternateEdgeStyle(java.lang.String):

--

[M]void com.mxgraph.view.mxGraph.setAutoOrigin(boolean):

--

[M]void com.mxgraph.view.mxGraph.setAutoSizeCells(boolean):

--

[M]void com.mxgraph.view.mxGraph.setBorder(int):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyle(java.lang.String):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyle(java.lang.String,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyleFlags(java.lang.String,int,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyleFlags(java.lang.String,int,java.lang.Boolean,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyles(java.lang.String,java.lang.String):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.setCellStyles(java.lang.String,java.lang.String,java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.setCellsBendable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsCloneable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsDeletable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsDisconnectable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsEditable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsLocked(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsMovable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsResizable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCellsSelectable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setChangesRepaintThreshold(int):

--

[M]void com.mxgraph.view.mxGraph.setCloneInvalidEdges(boolean):

--

[M]void com.mxgraph.view.mxGraph.setCollapseToPreferredSize(boolean):

--

[M]void com.mxgraph.view.mxGraph.setConnectableEdges(boolean):

--

[M]void com.mxgraph.view.mxGraph.setConnectionConstraint(java.lang.Object,java.lang.Object,boolean,com.mxgraph.view.mxConnectionConstraint):

--

[M]void com.mxgraph.view.mxGraph.setConstrainChildren(boolean):

--

[M]void com.mxgraph.view.mxGraph.setDefaultLoopStyle(com.mxgraph.view.mxEdgeStyle$mxEdgeStyleFunction):

--

[M]void com.mxgraph.view.mxGraph.setDefaultOverlap(double):

--

[M]void com.mxgraph.view.mxGraph.setDefaultParent(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.setDisconnectOnMove(boolean):

--

[M]void com.mxgraph.view.mxGraph.setDropEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.setEdgeLabelsMovable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.setExtendParents(boolean):

--

[M]void com.mxgraph.view.mxGraph.setExtendParentsOnAdd(boolean):

--

[M]void com.mxgraph.view.mxGraph.setGridEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.setGridSize(int):

--

[M]void com.mxgraph.view.mxGraph.setHtmlLabels(boolean):

--

[M]void com.mxgraph.view.mxGraph.setKeepEdgesInBackground(boolean):

--

[M]void com.mxgraph.view.mxGraph.setKeepEdgesInForeground(boolean):

--

[M]void com.mxgraph.view.mxGraph.setLabelsClipped(boolean):

--

[M]void com.mxgraph.view.mxGraph.setLabelsVisible(boolean):

--

[M]void com.mxgraph.view.mxGraph.setMaximumGraphBounds(com.mxgraph.util.mxRectangle):

--

[M]void com.mxgraph.view.mxGraph.setMinimumGraphSize(com.mxgraph.util.mxRectangle):

--

[M]void com.mxgraph.view.mxGraph.setModel(com.mxgraph.model.mxIGraphModel):

--

[M]void com.mxgraph.view.mxGraph.setMultigraph(boolean):

--

[M]void com.mxgraph.view.mxGraph.setMultiplicities(com.mxgraph.view.mxMultiplicity[]):

--

[M]void com.mxgraph.view.mxGraph.setOrigin(com.mxgraph.util.mxPoint):

--

[M]void com.mxgraph.view.mxGraph.setPortsEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.setResetEdgesOnConnect(boolean):

--

[M]void com.mxgraph.view.mxGraph.setResetEdgesOnMove(boolean):

--

[M]void com.mxgraph.view.mxGraph.setResetEdgesOnResize(boolean):

--

[M]void com.mxgraph.view.mxGraph.setResetViewOnRootChange(boolean):

--

[M]void com.mxgraph.view.mxGraph.setSelectionCell(java.lang.Object):

--

[M]void com.mxgraph.view.mxGraph.setSelectionCells(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.setSelectionCells(java.util.Collection):

--

[M]void com.mxgraph.view.mxGraph.setSplitEnabled(boolean):

--

[M]void com.mxgraph.view.mxGraph.setStylesheet(com.mxgraph.view.mxStylesheet):

--

[M]void com.mxgraph.view.mxGraph.setSwimlaneNesting(boolean):

--

[M]void com.mxgraph.view.mxGraph.setVertexLabelsMovable(boolean):

--

[M]void com.mxgraph.view.mxGraph.setView(com.mxgraph.view.mxGraphView):

--

[M]double com.mxgraph.view.mxGraph.snap(double):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.splitEdge(java.lang.Object,java.lang.Object[]):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.splitEdge(java.lang.Object,java.lang.Object[],double,double):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.splitEdge(java.lang.Object,java.lang.Object[],java.lang.Object,double,double):

--

[M]void com.mxgraph.view.mxGraph.swapBounds(java.lang.Object,boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.toggleCellStyle(java.lang.String,boolean,java.lang.Object):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCellStyleFlags(java.lang.String,int):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCellStyleFlags(java.lang.String,int,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCellStyles(java.lang.String,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCellStyles(java.lang.String,boolean,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCells(boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCells(boolean,java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.toggleCells(boolean,java.lang.Object[],boolean):

--

[M]void com.mxgraph.view.mxGraph.translateCell(java.lang.Object,double,double):

--

[M]void com.mxgraph.view.mxGraph.traverse(java.lang.Object,boolean,com.mxgraph.view.mxGraph$mxICellVisitor):

--

[M]void com.mxgraph.view.mxGraph.traverse(java.lang.Object,boolean,com.mxgraph.view.mxGraph$mxICellVisitor,java.lang.Object,java.util.Set):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.ungroupCells():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.ungroupCells(java.lang.Object[]):

--

[M]void com.mxgraph.view.mxGraph.updateAlternateBounds(java.lang.Object,com.mxgraph.model.mxGeometry,boolean):

--

[M]java.lang.Object com.mxgraph.view.mxGraph.updateCellSize(java.lang.Object):
[M]java.lang.Object com.mxgraph.view.mxGraph.updateCellSize(java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()

--

[M]java.lang.Object com.mxgraph.view.mxGraph.updateCellSize(java.lang.Object,boolean):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.updateGroupBounds():

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.updateGroupBounds(java.lang.Object[]):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.updateGroupBounds(java.lang.Object[],int):

--

[M]java.lang.Object[] com.mxgraph.view.mxGraph.updateGroupBounds(java.lang.Object[],int,boolean):

--

[M]void com.mxgraph.view.mxGraph.updateOrigin():

--

[M]java.lang.String com.mxgraph.view.mxGraph.validateCell(java.lang.Object,java.util.Hashtable):

--

[M]java.lang.String com.mxgraph.view.mxGraph.validateEdge(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]sun.java2d.pipe.Region java.awt.Component.access$002(java.awt.Component,sun.java2d.pipe.Region):

--

[M]java.awt.Point java.awt.Component.access$100(java.awt.Component):

--

[M]java.awt.Insets java.awt.Component.access$400(java.awt.Component):

--

[M]boolean java.awt.Component.access$500(java.lang.Class):

--

[M]boolean java.awt.Component.action(java.awt.Event,java.lang.Object):

--

[M]void java.awt.Component.add(java.awt.PopupMenu):

--

[M]void java.awt.Component.addComponentListener(java.awt.event.ComponentListener):

--

[M]void java.awt.Component.addFocusListener(java.awt.event.FocusListener):

--

[M]void java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener):

--

[M]void java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener):

--

[M]void java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener):

--

[M]void java.awt.Component.addKeyListener(java.awt.event.KeyListener):

--

[M]void java.awt.Component.addMouseListener(java.awt.event.MouseListener):

--

[M]void java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener):

--

[M]void java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener):

--

[M]void java.awt.Component.addNotify():

--

[M]void java.awt.Component.addPropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.awt.Component.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void java.awt.Component.adjustListeningChildrenOnParent(long,int):

--

[M]void java.awt.Component.applyComponentOrientation(java.awt.ComponentOrientation):

--

[M]void java.awt.Component.applyCompoundShape(sun.java2d.pipe.Region):

--

[M]void java.awt.Component.applyCurrentShape():

--

[M]void java.awt.Component.applyCurrentShapeBelowMe():

--

[M]boolean java.awt.Component.areBoundsValid():

--

[M]boolean java.awt.Component.areFocusTraversalKeysSet(int):

--

[M]boolean java.awt.Component.areInputMethodsEnabled():

--

[M]void java.awt.Component.autoProcessMouseWheel(java.awt.event.MouseWheelEvent):

--

[M]java.awt.Rectangle java.awt.Component.bounds():

--

[M]sun.java2d.pipe.Region java.awt.Component.calculateCurrentShape():

--

[M]boolean java.awt.Component.canBeFocusOwner():

--

[M]boolean java.awt.Component.canBeFocusOwnerRecursively():

--

[M]boolean java.awt.Component.checkCoalescing():

--

[M]void java.awt.Component.checkGD(java.lang.String):

--

[M]int java.awt.Component.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver):

--

[M]int java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver):

--

[M]void java.awt.Component.checkTreeLock():

--

[M]boolean java.awt.Component.checkWindowClosingException():

--

[M]void java.awt.Component.clearCurrentFocusCycleRootOnHide():

--

[M]void java.awt.Component.clearMostRecentFocusOwnerOnHide():

--

[M]java.awt.AWTEvent java.awt.Component.coalesceEvents(java.awt.AWTEvent,java.awt.AWTEvent):

--

[M]java.lang.String java.awt.Component.constructComponentName():

--

[M]boolean java.awt.Component.contains(int,int):

--

[M]boolean java.awt.Component.contains(java.awt.Point):

--

[M]boolean java.awt.Component.containsFocus():

--

[M]int java.awt.Component.countHierarchyMembers():

--

[M]void java.awt.Component.createBufferStrategy(int):

--

[M]void java.awt.Component.createBufferStrategy(int,java.awt.BufferCapabilities):

--

[M]int java.awt.Component.createHierarchyEvents(int,java.awt.Component,java.awt.Container,long,boolean):

--

[M]java.awt.Image java.awt.Component.createImage(int,int):

--

[M]java.awt.Image java.awt.Component.createImage(java.awt.image.ImageProducer):

--

[M]java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int):

--

[M]java.awt.image.VolatileImage java.awt.Component.createVolatileImage(int,int,java.awt.ImageCapabilities):

--

[M]void java.awt.Component.deliverEvent(java.awt.Event):

--

[M]void java.awt.Component.disable():

--

[M]void java.awt.Component.disableEvents(long):

--

[M]void java.awt.Component.dispatchEvent(java.awt.AWTEvent):

--

[M]void java.awt.Component.dispatchEventImpl(java.awt.AWTEvent):

--

[M]boolean java.awt.Component.dispatchMouseWheelToAncestor(java.awt.event.MouseWheelEvent):

--

[M]void java.awt.Component.doLayout():

--

[M]void java.awt.Component.doSwingSerialization():

--

[M]void java.awt.Component.enable():

--

[M]void java.awt.Component.enable(boolean):

--

[M]void java.awt.Component.enableEvents(long):

--

[M]void java.awt.Component.enableInputMethods(boolean):

--

[M]boolean java.awt.Component.eventEnabled(java.awt.AWTEvent):

--

[M]boolean java.awt.Component.eventTypeEnabled(int):

--

[M]java.awt.Component java.awt.Component.findUnderMouseInWindow(java.awt.PointerInfo):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,boolean,boolean):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,byte,byte):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,char,char):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,double,double):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,float,float):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,int,int):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,long,long):

--

[M]void java.awt.Component.firePropertyChange(java.lang.String,short,short):

--

[M]java.security.AccessControlContext java.awt.Component.getAccessControlContext():

--

[M]javax.accessibility.AccessibleContext java.awt.Component.getAccessibleContext():

--

[M]int java.awt.Component.getAccessibleIndexInParent():

--

[M]javax.accessibility.AccessibleStateSet java.awt.Component.getAccessibleStateSet():

--

[M]float java.awt.Component.getAlignmentX():

--

[M]float java.awt.Component.getAlignmentY():

--

[M]sun.java2d.pipe.Region java.awt.Component.getAppliedShape():

--

[M]java.awt.Image java.awt.Component.getBackBuffer():

--

[M]java.awt.Color java.awt.Component.getBackground():

--

[M]int java.awt.Component.getBaseline(int,int):

--

[M]java.awt.Component$BaselineResizeBehavior java.awt.Component.getBaselineResizeBehavior():

--

[M]java.awt.Rectangle java.awt.Component.getBounds():

--

[M]java.awt.Rectangle java.awt.Component.getBounds(java.awt.Rectangle):

--

[M]int java.awt.Component.getBoundsOp():

--

[M]java.awt.image.BufferStrategy java.awt.Component.getBufferStrategy():

--

[M]java.awt.image.ColorModel java.awt.Component.getColorModel():

--

[M]java.awt.Component java.awt.Component.getComponentAt(int,int):

--

[M]java.awt.Component java.awt.Component.getComponentAt(java.awt.Point):

--

[M]java.awt.event.ComponentListener[] java.awt.Component.getComponentListeners():

--

[M]java.awt.ComponentOrientation java.awt.Component.getComponentOrientation():

--

[M]java.awt.Container java.awt.Component.getContainer():

--

[M]java.awt.Window java.awt.Component.getContainingWindow():

--

[M]java.awt.Cursor java.awt.Component.getCursor():

--

[M]java.awt.Cursor java.awt.Component.getCursor_NoClientCode():

--

[M]java.awt.dnd.DropTarget java.awt.Component.getDropTarget():

--

[M]java.awt.Container java.awt.Component.getFocusCycleRootAncestor():

--

[M]java.awt.event.FocusListener[] java.awt.Component.getFocusListeners():

--

[M]java.util.Set java.awt.Component.getFocusTraversalKeys(int):

--

[M]boolean java.awt.Component.getFocusTraversalKeysEnabled():

--

[M]java.util.Set java.awt.Component.getFocusTraversalKeys_NoIDCheck(int):

--

[M]java.awt.Font java.awt.Component.getFont():

--

[M]java.awt.FontMetrics java.awt.Component.getFontMetrics(java.awt.Font):

--

[M]java.awt.Font java.awt.Component.getFont_NoClientCode():

--

[M]java.awt.Color java.awt.Component.getForeground():

--

[M]java.awt.Graphics java.awt.Component.getGraphics():

--

[M]java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration():

--

[M]java.awt.GraphicsConfiguration java.awt.Component.getGraphicsConfiguration_NoClientCode():

--

[M]java.awt.Graphics java.awt.Component.getGraphics_NoClientCode():

--

[M]java.awt.peer.ComponentPeer java.awt.Component.getHWPeerAboveMe():

--

[M]int java.awt.Component.getHeight():
[M]int java.awt.Component.getHeight()
 [M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]java.awt.event.HierarchyBoundsListener[] java.awt.Component.getHierarchyBoundsListeners():

--

[M]java.awt.event.HierarchyListener[] java.awt.Component.getHierarchyListeners():

--

[M]boolean java.awt.Component.getIgnoreRepaint():

--

[M]java.awt.im.InputContext java.awt.Component.getInputContext():

--

[M]java.awt.event.InputMethodListener[] java.awt.Component.getInputMethodListeners():

--

[M]java.awt.im.InputMethodRequests java.awt.Component.getInputMethodRequests():

--

[M]java.awt.Insets java.awt.Component.getInsets_NoClientCode():

--

[M]java.awt.event.KeyListener[] java.awt.Component.getKeyListeners():

--

[M]java.util.EventListener[] java.awt.Component.getListeners(java.lang.Class):

--

[M]java.util.Locale java.awt.Component.getLocale():

--

[M]java.awt.Point java.awt.Component.getLocation():
[M]java.awt.Point java.awt.Component.getLocation()
 [M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]java.awt.Point java.awt.Component.getLocation(java.awt.Point):

--

[M]java.awt.Point java.awt.Component.getLocationOnScreen():

--

[M]java.awt.Point java.awt.Component.getLocationOnScreen_NoTreeLock():

--

[M]java.awt.Point java.awt.Component.getLocationOnWindow():

--

[M]java.awt.Dimension java.awt.Component.getMaximumSize():

--

[M]java.awt.Dimension java.awt.Component.getMinimumSize():

--

[M]java.awt.event.MouseListener[] java.awt.Component.getMouseListeners():

--

[M]java.awt.event.MouseMotionListener[] java.awt.Component.getMouseMotionListeners():

--

[M]java.awt.Point java.awt.Component.getMousePosition():

--

[M]java.awt.event.MouseWheelListener[] java.awt.Component.getMouseWheelListeners():

--

[M]java.lang.String java.awt.Component.getName():

--

[M]java.awt.Container java.awt.Component.getNativeContainer():

--

[M]java.awt.Component java.awt.Component.getNextFocusCandidate():

--

[M]sun.java2d.pipe.Region java.awt.Component.getNormalShape():

--

[M]java.lang.Object java.awt.Component.getObjectLock():

--

[M]sun.java2d.pipe.Region java.awt.Component.getOpaqueShape():

--

[M]java.awt.Container java.awt.Component.getParent():

--

[M]java.awt.Container java.awt.Component.getParent_NoClientCode():

--

[M]java.awt.peer.ComponentPeer java.awt.Component.getPeer():

--

[M]java.awt.Dimension java.awt.Component.getPreferredSize():

--

[M]java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners():

--

[M]java.beans.PropertyChangeListener[] java.awt.Component.getPropertyChangeListeners(java.lang.String):

--

[M]java.awt.Rectangle java.awt.Component.getRecursivelyVisibleBounds():

--

[M]int java.awt.Component.getSiblingIndexAbove():

--

[M]int java.awt.Component.getSiblingIndexBelow():

--

[M]java.awt.Dimension java.awt.Component.getSize():

--

[M]java.awt.Dimension java.awt.Component.getSize(java.awt.Dimension):

--

[M]java.awt.Toolkit java.awt.Component.getToolkit():

--

[M]java.awt.Toolkit java.awt.Component.getToolkitImpl():

--

[M]java.awt.Container java.awt.Component.getTraversalRoot():

--

[M]java.lang.Object java.awt.Component.getTreeLock():

--

[M]int java.awt.Component.getWidth():
[M]int java.awt.Component.getWidth()
 [M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]int java.awt.Component.getX():

--

[M]int java.awt.Component.getY():

--

[M]boolean java.awt.Component.gotFocus(java.awt.Event,java.lang.Object):

--

[M]boolean java.awt.Component.handleEvent(java.awt.Event):

--

[M]boolean java.awt.Component.hasFocus():

--

[M]void java.awt.Component.hide():

--

[M]boolean java.awt.Component.imageUpdate(java.awt.Image,int,int,int,int,int):

--

[M]void java.awt.Component.initIDs():

--

[M]void java.awt.Component.initializeFocusTraversalKeys():

--

[M]boolean java.awt.Component.inside(int,int):

--

[M]void java.awt.Component.invalidate():

--

[M]void java.awt.Component.invalidateIfValid():

--

[M]void java.awt.Component.invalidateParent():

--

[M]boolean java.awt.Component.isAutoFocusTransferOnDisposal():

--

[M]boolean java.awt.Component.isBackgroundSet():

--

[M]boolean java.awt.Component.isCoalesceEventsOverriden(java.lang.Class):

--

[M]boolean java.awt.Component.isCoalescingEnabled():

--

[M]boolean java.awt.Component.isCursorSet():

--

[M]boolean java.awt.Component.isDisplayable():

--

[M]boolean java.awt.Component.isDoubleBuffered():

--

[M]boolean java.awt.Component.isEnabled():

--

[M]boolean java.awt.Component.isEnabledImpl():

--

[M]boolean java.awt.Component.isFocusCycleRoot(java.awt.Container):

--

[M]boolean java.awt.Component.isFocusOwner():

--

[M]boolean java.awt.Component.isFocusTraversable():

--

[M]boolean java.awt.Component.isFocusTraversableOverridden():

--

[M]boolean java.awt.Component.isFocusable():

--

[M]boolean java.awt.Component.isFontSet():

--

[M]boolean java.awt.Component.isForegroundSet():

--

[M]boolean java.awt.Component.isInstanceOf(java.lang.Object,java.lang.String):

--

[M]boolean java.awt.Component.isLightweight():

--

[M]boolean java.awt.Component.isMaximumSizeSet():

--

[M]boolean java.awt.Component.isMinimumSizeSet():

--

[M]boolean java.awt.Component.isMixingNeeded():

--

[M]boolean java.awt.Component.isNonOpaqueForMixing():

--

[M]boolean java.awt.Component.isOpaque():

--

[M]boolean java.awt.Component.isPreferredSizeSet():

--

[M]boolean java.awt.Component.isRecursivelyVisible():

--

[M]boolean java.awt.Component.isRequestFocusAccepted(boolean,boolean,sun.awt.CausedFocusEvent$Cause):

--

[M]boolean java.awt.Component.isSameOrAncestorOf(java.awt.Component,boolean):

--

[M]boolean java.awt.Component.isShowing():

--

[M]boolean java.awt.Component.isValid():

--

[M]boolean java.awt.Component.isVisible():

--

[M]boolean java.awt.Component.isVisible_NoClientCode():

--

[M]boolean java.awt.Component.keyDown(java.awt.Event,int):

--

[M]boolean java.awt.Component.keyUp(java.awt.Event,int):

--

[M]void java.awt.Component.layout():

--

[M]void java.awt.Component.lightweightPaint(java.awt.Graphics):

--

[M]void java.awt.Component.lightweightPrint(java.awt.Graphics):

--

[M]void java.awt.Component.list():

--

[M]void java.awt.Component.list(java.io.PrintStream):

--

[M]void java.awt.Component.list(java.io.PrintStream,int):

--

[M]void java.awt.Component.list(java.io.PrintWriter):

--

[M]void java.awt.Component.list(java.io.PrintWriter,int):

--

[M]java.awt.Component java.awt.Component.locate(int,int):

--

[M]java.awt.Point java.awt.Component.location():

--

[M]java.awt.Point java.awt.Component.location_NoClientCode():

--

[M]boolean java.awt.Component.lostFocus(java.awt.Event,java.lang.Object):

--

[M]java.awt.Dimension java.awt.Component.minimumSize():

--

[M]void java.awt.Component.mixOnHiding(boolean):

--

[M]void java.awt.Component.mixOnReshaping():

--

[M]void java.awt.Component.mixOnShowing():

--

[M]void java.awt.Component.mixOnValidating():

--

[M]void java.awt.Component.mixOnZOrderChanging(int,int):

--

[M]boolean java.awt.Component.mouseDown(java.awt.Event,int,int):

--

[M]boolean java.awt.Component.mouseDrag(java.awt.Event,int,int):

--

[M]boolean java.awt.Component.mouseEnter(java.awt.Event,int,int):

--

[M]boolean java.awt.Component.mouseExit(java.awt.Event,int,int):

--

[M]boolean java.awt.Component.mouseMove(java.awt.Event,int,int):

--

[M]boolean java.awt.Component.mouseUp(java.awt.Event,int,int):

--

[M]void java.awt.Component.move(int,int):

--

[M]void java.awt.Component.nextFocus():

--

[M]void java.awt.Component.notifyNewBounds(boolean,boolean):

--

[M]int java.awt.Component.numListening(long):

--

[M]void java.awt.Component.paint(java.awt.Graphics):

--

[M]void java.awt.Component.paintAll(java.awt.Graphics):

--

[M]void java.awt.Component.paintHeavyweightComponents(java.awt.Graphics):

--

[M]java.lang.String java.awt.Component.paramString():

--

[M]java.awt.Point java.awt.Component.pointRelativeToComponent(java.awt.Point):

--

[M]boolean java.awt.Component.postEvent(java.awt.Event):

--

[M]boolean java.awt.Component.postsOldMouseEvents():

--

[M]java.awt.Dimension java.awt.Component.preferredSize():

--

[M]boolean java.awt.Component.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver):

--

[M]boolean java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver):

--

[M]void java.awt.Component.print(java.awt.Graphics):

--

[M]void java.awt.Component.printAll(java.awt.Graphics):

--

[M]void java.awt.Component.printHeavyweightComponents(java.awt.Graphics):

--

[M]void java.awt.Component.processComponentEvent(java.awt.event.ComponentEvent):

--

[M]void java.awt.Component.processEvent(java.awt.AWTEvent):

--

[M]void java.awt.Component.processFocusEvent(java.awt.event.FocusEvent):

--

[M]void java.awt.Component.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent):

--

[M]void java.awt.Component.processHierarchyEvent(java.awt.event.HierarchyEvent):

--

[M]void java.awt.Component.processInputMethodEvent(java.awt.event.InputMethodEvent):

--

[M]void java.awt.Component.processKeyEvent(java.awt.event.KeyEvent):

--

[M]void java.awt.Component.processMouseEvent(java.awt.event.MouseEvent):

--

[M]void java.awt.Component.processMouseMotionEvent(java.awt.event.MouseEvent):

--

[M]void java.awt.Component.processMouseWheelEvent(java.awt.event.MouseWheelEvent):

--

[M]void java.awt.Component.readObject(java.io.ObjectInputStream):

--

[M]void java.awt.Component.relocateComponent():

--

[M]void java.awt.Component.remove(java.awt.MenuComponent):

--

[M]void java.awt.Component.removeComponentListener(java.awt.event.ComponentListener):

--

[M]void java.awt.Component.removeFocusListener(java.awt.event.FocusListener):

--

[M]void java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener):

--

[M]void java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener):

--

[M]void java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener):

--

[M]void java.awt.Component.removeKeyListener(java.awt.event.KeyListener):

--

[M]void java.awt.Component.removeMouseListener(java.awt.event.MouseListener):

--

[M]void java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener):

--

[M]void java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener):

--

[M]void java.awt.Component.removeNotify():

--

[M]void java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.awt.Component.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void java.awt.Component.repaint():

--

[M]void java.awt.Component.repaint(int,int,int,int):

--

[M]void java.awt.Component.repaint(long):

--

[M]void java.awt.Component.repaint(long,int,int,int,int):

--

[M]void java.awt.Component.repaintParentIfNeeded(int,int,int,int):

--

[M]void java.awt.Component.requestFocus():

--

[M]boolean java.awt.Component.requestFocus(boolean):

--

[M]boolean java.awt.Component.requestFocus(boolean,sun.awt.CausedFocusEvent$Cause):

--

[M]boolean java.awt.Component.requestFocus(sun.awt.CausedFocusEvent$Cause):

--

[M]boolean java.awt.Component.requestFocusHelper(boolean,boolean):

--

[M]boolean java.awt.Component.requestFocusHelper(boolean,boolean,sun.awt.CausedFocusEvent$Cause):

--

[M]boolean java.awt.Component.requestFocusInWindow():

--

[M]boolean java.awt.Component.requestFocusInWindow(boolean):

--

[M]boolean java.awt.Component.requestFocusInWindow(boolean,sun.awt.CausedFocusEvent$Cause):

--

[M]boolean java.awt.Component.requestFocusInWindow(sun.awt.CausedFocusEvent$Cause):

--

[M]void java.awt.Component.reshape(int,int,int,int):

--

[M]void java.awt.Component.reshapeNativePeer(int,int,int,int,int):

--

[M]void java.awt.Component.resize(int,int):

--

[M]void java.awt.Component.resize(java.awt.Dimension):

--

[M]void java.awt.Component.revalidate():

--

[M]void java.awt.Component.revalidateSynchronously():

--

[M]void java.awt.Component.setAutoFocusTransferOnDisposal(boolean):

--

[M]void java.awt.Component.setBackground(java.awt.Color):

--

[M]void java.awt.Component.setBounds(int,int,int,int):

--

[M]void java.awt.Component.setBounds(java.awt.Rectangle):

--

[M]void java.awt.Component.setBoundsOp(int):

--

[M]void java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation):

--

[M]void java.awt.Component.setCursor(java.awt.Cursor):

--

[M]void java.awt.Component.setDropTarget(java.awt.dnd.DropTarget):

--

[M]void java.awt.Component.setEnabled(boolean):

--

[M]void java.awt.Component.setFocusTraversalKeys(int,java.util.Set):

--

[M]void java.awt.Component.setFocusTraversalKeysEnabled(boolean):

--

[M]void java.awt.Component.setFocusTraversalKeys_NoIDCheck(int,java.util.Set):

--

[M]void java.awt.Component.setFocusable(boolean):

--

[M]void java.awt.Component.setFont(java.awt.Font):

--

[M]void java.awt.Component.setForeground(java.awt.Color):

--

[M]void java.awt.Component.setGraphicsConfiguration(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Component.setIgnoreRepaint(boolean):

--

[M]void java.awt.Component.setLocale(java.util.Locale):

--

[M]void java.awt.Component.setLocation(int,int):

--

[M]void java.awt.Component.setLocation(java.awt.Point):

--

[M]void java.awt.Component.setMaximumSize(java.awt.Dimension):

--

[M]void java.awt.Component.setMinimumSize(java.awt.Dimension):

--

[M]void java.awt.Component.setName(java.lang.String):

--

[M]void java.awt.Component.setPreferredSize(java.awt.Dimension):

--

[M]void java.awt.Component.setRequestFocusController(sun.awt.RequestFocusController):

--

[M]void java.awt.Component.setSize(int,int):

--

[M]void java.awt.Component.setSize(java.awt.Dimension):

--

[M]void java.awt.Component.setVisible(boolean):

--

[M]void java.awt.Component.show():

--

[M]void java.awt.Component.show(boolean):

--

[M]java.awt.Dimension java.awt.Component.size():

--

[M]void java.awt.Component.subtractAndApplyShape(sun.java2d.pipe.Region):

--

[M]void java.awt.Component.subtractAndApplyShapeBelowMe():

--

[M]java.lang.String java.awt.Component.toString():

--

[M]void java.awt.Component.transferFocus():

--

[M]boolean java.awt.Component.transferFocus(boolean):

--

[M]void java.awt.Component.transferFocusBackward():

--

[M]boolean java.awt.Component.transferFocusBackward(boolean):

--

[M]void java.awt.Component.transferFocusUpCycle():

--

[M]void java.awt.Component.update(java.awt.Graphics):

--

[M]void java.awt.Component.updateCursorImmediately():

--

[M]boolean java.awt.Component.updateGraphicsData(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Component.updateZOrder():

--

[M]void java.awt.Component.validate():

--

[M]void java.awt.Component.writeObject(java.io.ObjectOutputStream):

--

[M]void java.awt.Container.<init>():

--

[M]java.awt.Component java.awt.Container.add(java.awt.Component):
[M]java.awt.Component java.awt.Container.add(java.awt.Component)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.awt.Component java.awt.Container.add(java.awt.Component,int):

--

[M]void java.awt.Container.add(java.awt.Component,java.lang.Object):

--

[M]void java.awt.Container.add(java.awt.Component,java.lang.Object,int):

--

[M]java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component):

--

[M]void java.awt.Container.addContainerListener(java.awt.event.ContainerListener):

--

[M]void java.awt.Container.addDelicately(java.awt.Component,java.awt.Container,int):

--

[M]void java.awt.Container.addImpl(java.awt.Component,java.lang.Object,int):

--

[M]void java.awt.Container.addNotify():

--

[M]void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void java.awt.Container.adjustDecendantsOnParent(int):

--

[M]void java.awt.Container.adjustDescendants(int):

--

[M]void java.awt.Container.adjustListeningChildren(long,int):

--

[M]void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation):

--

[M]boolean java.awt.Container.areFocusTraversalKeysSet(int):

--

[M]boolean java.awt.Container.canContainFocusOwner(java.awt.Component):

--

[M]void java.awt.Container.checkAddToSelf(java.awt.Component):

--

[M]void java.awt.Container.checkAdding(java.awt.Component,int):

--

[M]void java.awt.Container.checkGD(java.lang.String):

--

[M]void java.awt.Container.checkNotAWindow(java.awt.Component):

--

[M]void java.awt.Container.clearCurrentFocusCycleRootOnHide():

--

[M]void java.awt.Container.clearMostRecentFocusOwnerOnHide():

--

[M]boolean java.awt.Container.containsFocus():

--

[M]int java.awt.Container.countComponents():

--

[M]int java.awt.Container.countHierarchyMembers():

--

[M]void java.awt.Container.createChildHierarchyEvents(int,long,boolean):

--

[M]int java.awt.Container.createHierarchyEvents(int,java.awt.Component,java.awt.Container,long,boolean):

--

[M]void java.awt.Container.decreaseComponentCount(java.awt.Component):

--

[M]void java.awt.Container.deliverEvent(java.awt.Event):

--

[M]void java.awt.Container.dispatchEventImpl(java.awt.AWTEvent):

--

[M]void java.awt.Container.dispatchEventToSelf(java.awt.AWTEvent):

--

[M]void java.awt.Container.doLayout():

--

[M]boolean java.awt.Container.eventEnabled(java.awt.AWTEvent):

--

[M]java.awt.Component java.awt.Container.findComponentAt(int,int):

--

[M]java.awt.Component java.awt.Container.findComponentAt(int,int,boolean):

--

[M]java.awt.Component java.awt.Container.findComponentAt(java.awt.Point):

--

[M]java.awt.Component java.awt.Container.findComponentAtImpl(int,int,boolean):

--

[M]java.awt.Container java.awt.Container.findTraversalRoot():

--

[M]javax.accessibility.Accessible java.awt.Container.getAccessibleAt(java.awt.Point):

--

[M]javax.accessibility.Accessible java.awt.Container.getAccessibleChild(int):

--

[M]int java.awt.Container.getAccessibleChildrenCount():

--

[M]float java.awt.Container.getAlignmentX():

--

[M]float java.awt.Container.getAlignmentY():

--

[M]int java.awt.Container.getBottommostComponentIndex():

--

[M]java.awt.Component java.awt.Container.getChildAt(java.awt.Component,int,int,boolean):

--

[M]java.awt.Component java.awt.Container.getComponent(int):

--

[M]java.awt.Component java.awt.Container.getComponentAt(int,int):

--

[M]java.awt.Component java.awt.Container.getComponentAt(java.awt.Point):

--

[M]int java.awt.Container.getComponentCount():

--

[M]int java.awt.Container.getComponentZOrder(java.awt.Component):

--

[M]java.awt.Component[] java.awt.Container.getComponents():

--

[M]java.awt.Component[] java.awt.Container.getComponentsSync():

--

[M]java.awt.Component[] java.awt.Container.getComponents_NoClientCode():

--

[M]java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners():

--

[M]java.awt.Component java.awt.Container.getDropTargetEventTarget(int,int,boolean):

--

[M]java.util.Set java.awt.Container.getFocusTraversalKeys(int):

--

[M]java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy():

--

[M]java.awt.Container java.awt.Container.getHeavyweightContainer():

--

[M]java.awt.Insets java.awt.Container.getInsets():

--

[M]java.awt.LayoutManager java.awt.Container.getLayout():

--

[M]java.util.EventListener[] java.awt.Container.getListeners(java.lang.Class):

--

[M]int java.awt.Container.getListenersCount(int,boolean):

--

[M]java.awt.Dimension java.awt.Container.getMaximumSize():

--

[M]java.awt.Dimension java.awt.Container.getMinimumSize():

--

[M]java.awt.Component java.awt.Container.getMouseEventTarget(int,int,boolean):

--

[M]java.awt.Component java.awt.Container.getMouseEventTarget(int,int,boolean,java.awt.Container$EventTargetFilter,boolean):

--

[M]java.awt.Component java.awt.Container.getMouseEventTargetImpl(int,int,boolean,java.awt.Container$EventTargetFilter,boolean,boolean):

--

[M]java.awt.Point java.awt.Container.getMousePosition(boolean):

--

[M]sun.java2d.pipe.Region java.awt.Container.getOpaqueShape():

--

[M]java.awt.Dimension java.awt.Container.getPreferredSize():

--

[M]int java.awt.Container.getTopmostComponentIndex():

--

[M]java.awt.Container java.awt.Container.getTraversalRoot():

--

[M]boolean java.awt.Container.hasHeavyweightDescendants():

--

[M]boolean java.awt.Container.hasLightweightDescendants():

--

[M]void java.awt.Container.increaseComponentCount(java.awt.Component):

--

[M]void java.awt.Container.initIDs():

--

[M]void java.awt.Container.initializeFocusTraversalKeys():

--

[M]java.awt.Insets java.awt.Container.insets():

--

[M]void java.awt.Container.invalidate():

--

[M]void java.awt.Container.invalidateParent():

--

[M]void java.awt.Container.invalidateTree():

--

[M]boolean java.awt.Container.isAncestorOf(java.awt.Component):

--

[M]boolean java.awt.Container.isFocusCycleRoot():

--

[M]boolean java.awt.Container.isFocusCycleRoot(java.awt.Container):

--

[M]boolean java.awt.Container.isFocusTraversalPolicyProvider():

--

[M]boolean java.awt.Container.isFocusTraversalPolicySet():

--

[M]boolean java.awt.Container.isParentOf(java.awt.Component):

--

[M]boolean java.awt.Container.isRecursivelyVisibleUpToHeavyweightContainer():

--

[M]boolean java.awt.Container.isRemoveNotifyNeeded(java.awt.Component,java.awt.Container,java.awt.Container):

--

[M]boolean java.awt.Container.isSameOrAncestorOf(java.awt.Component,boolean):

--

[M]boolean java.awt.Container.isValidateRoot():

--

[M]void java.awt.Container.layout():

--

[M]void java.awt.Container.lightweightPaint(java.awt.Graphics):

--

[M]void java.awt.Container.lightweightPrint(java.awt.Graphics):

--

[M]void java.awt.Container.list(java.io.PrintStream,int):

--

[M]void java.awt.Container.list(java.io.PrintWriter,int):

--

[M]java.awt.Component java.awt.Container.locate(int,int):

--

[M]java.awt.Dimension java.awt.Container.minimumSize():

--

[M]void java.awt.Container.mixOnHiding(boolean):

--

[M]void java.awt.Container.mixOnReshaping():

--

[M]void java.awt.Container.mixOnShowing():

--

[M]void java.awt.Container.mixOnValidating():

--

[M]void java.awt.Container.mixOnZOrderChanging(int,int):

--

[M]int java.awt.Container.numListening(long):

--

[M]void java.awt.Container.paint(java.awt.Graphics):

--

[M]void java.awt.Container.paintComponents(java.awt.Graphics):

--

[M]void java.awt.Container.paintHeavyweightComponents(java.awt.Graphics):

--

[M]java.lang.String java.awt.Container.paramString():

--

[M]void java.awt.Container.postProcessKeyEvent(java.awt.event.KeyEvent):

--

[M]boolean java.awt.Container.postsOldMouseEvents():

--

[M]void java.awt.Container.preProcessKeyEvent(java.awt.event.KeyEvent):

--

[M]java.awt.Dimension java.awt.Container.preferredSize():

--

[M]void java.awt.Container.print(java.awt.Graphics):

--

[M]void java.awt.Container.printComponents(java.awt.Graphics):

--

[M]void java.awt.Container.printHeavyweightComponents(java.awt.Graphics):

--

[M]void java.awt.Container.processContainerEvent(java.awt.event.ContainerEvent):

--

[M]void java.awt.Container.processEvent(java.awt.AWTEvent):

--

[M]void java.awt.Container.proxyEnableEvents(long):

--

[M]void java.awt.Container.readObject(java.io.ObjectInputStream):

--

[M]void java.awt.Container.recursiveApplyCurrentShape():

--

[M]void java.awt.Container.recursiveApplyCurrentShape(int):

--

[M]void java.awt.Container.recursiveApplyCurrentShape(int,int):

--

[M]void java.awt.Container.recursiveHideHeavyweightChildren():

--

[M]void java.awt.Container.recursiveRelocateHeavyweightChildren(java.awt.Point):

--

[M]void java.awt.Container.recursiveShowHeavyweightChildren():

--

[M]void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region):

--

[M]void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int):

--

[M]void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int,int):

--

[M]void java.awt.Container.remove(int):

--

[M]void java.awt.Container.remove(java.awt.Component):

--

[M]void java.awt.Container.removeAll():

--

[M]void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener):

--

[M]boolean java.awt.Container.removeDelicately(java.awt.Component,java.awt.Container,int):

--

[M]void java.awt.Container.removeNotify():

--

[M]void java.awt.Container.reparentChild(java.awt.Component):

--

[M]void java.awt.Container.reparentTraverse(java.awt.peer.ContainerPeer,java.awt.Container):

--

[M]void java.awt.Container.setComponentZOrder(java.awt.Component,int):

--

[M]void java.awt.Container.setFocusCycleRoot(boolean):

--

[M]void java.awt.Container.setFocusTraversalKeys(int,java.util.Set):

--

[M]void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy):

--

[M]void java.awt.Container.setFocusTraversalPolicyProvider(boolean):

--

[M]void java.awt.Container.setFont(java.awt.Font):

--

[M]void java.awt.Container.setLayout(java.awt.LayoutManager):

--

[M]void java.awt.Container.startLWModal():

--

[M]void java.awt.Container.stopLWModal():

--

[M]void java.awt.Container.transferFocusDownCycle():

--

[M]void java.awt.Container.update(java.awt.Graphics):

--

[M]boolean java.awt.Container.updateGraphicsData(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Container.validate():

--

[M]void java.awt.Container.validateTree():

--

[M]void java.awt.Container.validateUnconditionally():

--

[M]void java.awt.Container.writeObject(java.io.ObjectOutputStream):

--

[M]void java.awt.EventQueue.<init>():

--

[M]boolean java.awt.EventQueue.access$000(java.awt.EventQueue):

--

[M]void java.awt.EventQueue.access$100(java.awt.EventQueue,boolean):

--

[M]void java.awt.EventQueue.access$200(java.awt.EventQueue,sun.awt.FwDispatcher):

--

[M]long java.awt.EventQueue.access$300(java.awt.EventQueue):

--

[M]sun.awt.FwDispatcher java.awt.EventQueue.access$400(java.awt.EventQueue):

--

[M]void java.awt.EventQueue.access$500(java.awt.EventQueue,java.awt.AWTEvent,java.lang.Object):

--

[M]sun.misc.JavaSecurityAccess java.awt.EventQueue.access$600():

--

[M]java.lang.ThreadGroup java.awt.EventQueue.access$700(java.awt.EventQueue):

--

[M]java.lang.String java.awt.EventQueue.access$800(java.awt.EventQueue):

--

[M]java.lang.ClassLoader java.awt.EventQueue.access$900(java.awt.EventQueue):

--

[M]void java.awt.EventQueue.cacheEQItem(sun.awt.EventQueueItem):

--

[M]boolean java.awt.EventQueue.coalesceEvent(java.awt.AWTEvent,int):

--

[M]boolean java.awt.EventQueue.coalesceMouseEvent(java.awt.event.MouseEvent):

--

[M]boolean java.awt.EventQueue.coalesceOtherEvent(java.awt.AWTEvent,int):

--

[M]boolean java.awt.EventQueue.coalescePaintEvent(java.awt.event.PaintEvent):

--

[M]boolean java.awt.EventQueue.coalescePeerEvent(sun.awt.PeerEvent):

--

[M]java.awt.SecondaryLoop java.awt.EventQueue.createSecondaryLoop():

--

[M]java.awt.SecondaryLoop java.awt.EventQueue.createSecondaryLoop(java.awt.Conditional,java.awt.EventFilter,long):

--

[M]void java.awt.EventQueue.detachDispatchThread(java.awt.EventDispatchThread):

--

[M]void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent,java.lang.Object):

--

[M]int java.awt.EventQueue.eventToCacheIndex(java.awt.AWTEvent):

--

[M]java.security.AccessControlContext java.awt.EventQueue.getAccessControlContextFrom(java.lang.Object):

--

[M]java.awt.AWTEvent java.awt.EventQueue.getCurrentEvent():

--

[M]java.awt.AWTEvent java.awt.EventQueue.getCurrentEventImpl():

--

[M]java.awt.EventDispatchThread java.awt.EventQueue.getDispatchThread():

--

[M]sun.util.logging.PlatformLogger java.awt.EventQueue.getEventLog():

--

[M]long java.awt.EventQueue.getMostRecentEventTime():

--

[M]long java.awt.EventQueue.getMostRecentEventTimeEx():

--

[M]long java.awt.EventQueue.getMostRecentEventTimeImpl():

--

[M]long java.awt.EventQueue.getMostRecentKeyEventTime():

--

[M]java.awt.AWTEvent java.awt.EventQueue.getNextEvent():

--

[M]java.awt.AWTEvent java.awt.EventQueue.getNextEvent(int):

--

[M]java.awt.AWTEvent java.awt.EventQueue.getNextEventPrivate():

--

[M]int java.awt.EventQueue.getPriority(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.initDispatchThread():

--

[M]void java.awt.EventQueue.invokeAndWait(java.lang.Object,java.lang.Runnable):

--

[M]void java.awt.EventQueue.invokeAndWait(java.lang.Runnable):

--

[M]void java.awt.EventQueue.invokeLater(java.lang.Runnable):
[M]void java.awt.EventQueue.invokeLater(java.lang.Runnable)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean java.awt.EventQueue.isDispatchThread():

--

[M]boolean java.awt.EventQueue.isDispatchThreadImpl():

--

[M]java.awt.event.PaintEvent java.awt.EventQueue.mergePaintEvents(java.awt.event.PaintEvent,java.awt.event.PaintEvent):

--

[M]boolean java.awt.EventQueue.noEvents():

--

[M]java.awt.AWTEvent java.awt.EventQueue.peekEvent():

--

[M]java.awt.AWTEvent java.awt.EventQueue.peekEvent(int):

--

[M]void java.awt.EventQueue.pop():

--

[M]void java.awt.EventQueue.postEvent(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.postEvent(java.awt.AWTEvent,int):

--

[M]void java.awt.EventQueue.postEventPrivate(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.push(java.awt.EventQueue):

--

[M]void java.awt.EventQueue.removeSourceEvents(java.lang.Object,boolean):

--

[M]void java.awt.EventQueue.setCurrentEventAndMostRecentTime(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.setCurrentEventAndMostRecentTimeImpl(java.awt.AWTEvent):

--

[M]void java.awt.EventQueue.setFwDispatcher(sun.awt.FwDispatcher):

--

[M]void java.awt.EventQueue.uncacheEQItem(sun.awt.EventQueueItem):

--

[M]void java.awt.EventQueue.wakeup(boolean):

--

[M]void java.awt.Frame.<init>():

--

[M]void java.awt.Frame.<init>(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Frame.<init>(java.lang.String):

--

[M]void java.awt.Frame.<init>(java.lang.String,java.awt.GraphicsConfiguration):

--

[M]int java.awt.Frame.access$000(java.awt.Frame):

--

[M]int java.awt.Frame.access$002(java.awt.Frame,int):

--

[M]void java.awt.Frame.addNotify():

--

[M]java.lang.String java.awt.Frame.constructComponentName():

--

[M]javax.accessibility.AccessibleContext java.awt.Frame.getAccessibleContext():

--

[M]int java.awt.Frame.getCursorType():

--

[M]int java.awt.Frame.getExtendedState():

--

[M]java.awt.Frame[] java.awt.Frame.getFrames():

--

[M]java.awt.Image java.awt.Frame.getIconImage():

--

[M]java.awt.Rectangle java.awt.Frame.getMaximizedBounds():

--

[M]java.awt.MenuBar java.awt.Frame.getMenuBar():

--

[M]int java.awt.Frame.getState():

--

[M]java.lang.String java.awt.Frame.getTitle():

--

[M]void java.awt.Frame.init(java.lang.String,java.awt.GraphicsConfiguration):

--

[M]void java.awt.Frame.initIDs():

--

[M]boolean java.awt.Frame.isFrameStateSupported(int):

--

[M]boolean java.awt.Frame.isResizable():

--

[M]boolean java.awt.Frame.isUndecorated():

--

[M]java.lang.String java.awt.Frame.paramString():

--

[M]void java.awt.Frame.postProcessKeyEvent(java.awt.event.KeyEvent):

--

[M]void java.awt.Frame.readObject(java.io.ObjectInputStream):

--

[M]void java.awt.Frame.remove(java.awt.MenuComponent):

--

[M]void java.awt.Frame.removeNotify():

--

[M]void java.awt.Frame.setBackground(java.awt.Color):

--

[M]void java.awt.Frame.setCursor(int):

--

[M]void java.awt.Frame.setExtendedState(int):

--

[M]void java.awt.Frame.setIconImage(java.awt.Image):

--

[M]void java.awt.Frame.setMaximizedBounds(java.awt.Rectangle):

--

[M]void java.awt.Frame.setMenuBar(java.awt.MenuBar):

--

[M]void java.awt.Frame.setOpacity(float):

--

[M]void java.awt.Frame.setResizable(boolean):

--

[M]void java.awt.Frame.setShape(java.awt.Shape):

--

[M]void java.awt.Frame.setState(int):

--

[M]void java.awt.Frame.setTitle(java.lang.String):

--

[M]void java.awt.Frame.setUndecorated(boolean):

--

[M]void java.awt.Frame.writeObject(java.io.ObjectOutputStream):

--

[M]java.awt.Font java.awt.MenuContainer.getFont():

--

[M]boolean java.awt.MenuContainer.postEvent(java.awt.Event):

--

[M]void java.awt.MenuContainer.remove(java.awt.MenuComponent):

--

[M]void java.awt.Window.<init>(java.awt.Frame):

--

[M]void java.awt.Window.<init>(java.awt.Window):

--

[M]void java.awt.Window.<init>(java.awt.Window,java.awt.GraphicsConfiguration):

--

[M]java.lang.ref.WeakReference java.awt.Window.access$000(java.awt.Window):

--

[M]void java.awt.Window.access$100(sun.awt.AppContext,java.lang.ref.WeakReference):

--

[M]float java.awt.Window.access$1002(java.awt.Window,float):

--

[M]float java.awt.Window.access$1102(java.awt.Window,float):

--

[M]java.awt.geom.Point2D java.awt.Window.access$1200(java.awt.Window,double,double,double,double):

--

[M]boolean java.awt.Window.access$1300(java.awt.Window):

--

[M]boolean java.awt.Window.access$202(java.awt.Window,boolean):

--

[M]java.lang.Object java.awt.Window.access$300(java.awt.Window):

--

[M]float java.awt.Window.access$400(java.awt.Window):

--

[M]void java.awt.Window.access$500(java.awt.Window):

--

[M]int java.awt.Window.access$600(java.awt.Window):

--

[M]int java.awt.Window.access$602(java.awt.Window,int):

--

[M]int java.awt.Window.access$700(java.awt.Window):

--

[M]int java.awt.Window.access$702(java.awt.Window,int):

--

[M]double java.awt.Window.access$802(java.awt.Window,double):

--

[M]double java.awt.Window.access$902(java.awt.Window,double):

--

[M]void java.awt.Window.addNotify():

--

[M]void java.awt.Window.addOwnedWindow(java.lang.ref.WeakReference):

--

[M]void java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener):

--

[M]void java.awt.Window.addToWindowList():

--

[M]void java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener):

--

[M]void java.awt.Window.addWindowListener(java.awt.event.WindowListener):
[M]void java.awt.Window.addWindowListener(java.awt.event.WindowListener)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener):

--

[M]void java.awt.Window.adjustDecendantsOnParent(int):

--

[M]void java.awt.Window.adjustListeningChildrenOnParent(long,int):

--

[M]void java.awt.Window.applyCompoundShape(sun.java2d.pipe.Region):

--

[M]void java.awt.Window.applyCurrentShape():

--

[M]void java.awt.Window.applyResourceBundle(java.lang.String):

--

[M]void java.awt.Window.applyResourceBundle(java.util.ResourceBundle):

--

[M]java.awt.geom.Point2D java.awt.Window.calculateSecurityWarningPosition(double,double,double,double):

--

[M]boolean java.awt.Window.canContainFocusOwner(java.awt.Component):

--

[M]void java.awt.Window.clearMostRecentFocusOwnerOnHide():

--

[M]void java.awt.Window.closeSplashScreen():

--

[M]void java.awt.Window.connectOwnedWindow(java.awt.Window):

--

[M]java.lang.String java.awt.Window.constructComponentName():

--

[M]void java.awt.Window.createBufferStrategy(int):

--

[M]void java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities):

--

[M]void java.awt.Window.deliverMouseWheelToAncestor(java.awt.event.MouseWheelEvent):

--

[M]void java.awt.Window.deserializeResources(java.io.ObjectInputStream):

--

[M]void java.awt.Window.dispatchEventImpl(java.awt.AWTEvent):

--

[M]boolean java.awt.Window.dispatchMouseWheelToAncestor(java.awt.event.MouseWheelEvent):

--

[M]void java.awt.Window.dispose():

--

[M]void java.awt.Window.disposeImpl():

--

[M]void java.awt.Window.doDispose():

--

[M]boolean java.awt.Window.eventEnabled(java.awt.AWTEvent):

--

[M]javax.accessibility.AccessibleContext java.awt.Window.getAccessibleContext():

--

[M]sun.awt.util.IdentityArrayList java.awt.Window.getAllUnblockedWindows():

--

[M]sun.awt.util.IdentityArrayList java.awt.Window.getAllWindows():

--

[M]java.awt.Color java.awt.Window.getBackground():

--

[M]java.awt.image.BufferStrategy java.awt.Window.getBufferStrategy():

--

[M]java.awt.Container java.awt.Window.getContainer():

--

[M]java.awt.Window java.awt.Window.getDocumentRoot():

--

[M]java.awt.Container java.awt.Window.getFocusCycleRootAncestor():

--

[M]java.awt.Component java.awt.Window.getFocusOwner():

--

[M]java.util.Set java.awt.Window.getFocusTraversalKeys(int):

--

[M]boolean java.awt.Window.getFocusableWindowState():

--

[M]java.util.List java.awt.Window.getIconImages():

--

[M]java.awt.im.InputContext java.awt.Window.getInputContext():

--

[M]java.util.EventListener[] java.awt.Window.getListeners(java.lang.Class):

--

[M]java.util.Locale java.awt.Window.getLocale():

--

[M]java.awt.Point java.awt.Window.getLocationOnWindow():

--

[M]java.awt.Dialog java.awt.Window.getModalBlocker():

--

[M]java.awt.Dialog$ModalExclusionType java.awt.Window.getModalExclusionType():

--

[M]java.awt.Component java.awt.Window.getMostRecentFocusOwner():

--

[M]float java.awt.Window.getOpacity():

--

[M]java.awt.Window[] java.awt.Window.getOwnedWindows():

--

[M]java.awt.Window[] java.awt.Window.getOwnedWindows_NoClientCode():

--

[M]java.awt.Window java.awt.Window.getOwner():

--

[M]java.awt.Window java.awt.Window.getOwner_NoClientCode():

--

[M]java.awt.Window[] java.awt.Window.getOwnerlessWindows():

--

[M]java.awt.Shape java.awt.Window.getShape():

--

[M]java.awt.Component java.awt.Window.getTemporaryLostComponent():

--

[M]java.awt.Toolkit java.awt.Window.getToolkit():

--

[M]java.awt.Window$Type java.awt.Window.getType():

--

[M]java.lang.String java.awt.Window.getWarningString():

--

[M]java.awt.event.WindowFocusListener[] java.awt.Window.getWindowFocusListeners():

--

[M]java.awt.event.WindowListener[] java.awt.Window.getWindowListeners():

--

[M]java.awt.event.WindowStateListener[] java.awt.Window.getWindowStateListeners():

--

[M]java.awt.Window[] java.awt.Window.getWindows():

--

[M]java.awt.Window[] java.awt.Window.getWindows(sun.awt.AppContext):

--

[M]void java.awt.Window.hide():

--

[M]void java.awt.Window.init(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Window.initDeserializedWindow():

--

[M]java.awt.GraphicsConfiguration java.awt.Window.initGC(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Window.initIDs():

--

[M]boolean java.awt.Window.isActive():

--

[M]boolean java.awt.Window.isAlwaysOnTop():

--

[M]boolean java.awt.Window.isAlwaysOnTopSupported():

--

[M]boolean java.awt.Window.isAutoRequestFocus():

--

[M]boolean java.awt.Window.isDisposing():

--

[M]boolean java.awt.Window.isFocusCycleRoot():

--

[M]boolean java.awt.Window.isFocusableWindow():

--

[M]boolean java.awt.Window.isFocused():

--

[M]boolean java.awt.Window.isLocationByPlatform():

--

[M]boolean java.awt.Window.isModalBlocked():

--

[M]boolean java.awt.Window.isModalExcluded(java.awt.Dialog$ModalExclusionType):

--

[M]boolean java.awt.Window.isOpaque():

--

[M]boolean java.awt.Window.isRecursivelyVisible():

--

[M]boolean java.awt.Window.isShowing():

--

[M]boolean java.awt.Window.isValidateRoot():

--

[M]double java.awt.Window.limit(double,double,double):

--

[M]void java.awt.Window.mixOnReshaping():

--

[M]void java.awt.Window.ownedInit(java.awt.Window):

--

[M]void java.awt.Window.pack():

--

[M]void java.awt.Window.paint(java.awt.Graphics):

--

[M]boolean java.awt.Window.postEvent(java.awt.Event):

--

[M]void java.awt.Window.postProcessKeyEvent(java.awt.event.KeyEvent):

--

[M]void java.awt.Window.postWindowEvent(int):

--

[M]void java.awt.Window.preProcessKeyEvent(java.awt.event.KeyEvent):

--

[M]void java.awt.Window.processEvent(java.awt.AWTEvent):

--

[M]void java.awt.Window.processWindowEvent(java.awt.event.WindowEvent):

--

[M]void java.awt.Window.processWindowFocusEvent(java.awt.event.WindowEvent):

--

[M]void java.awt.Window.processWindowStateEvent(java.awt.event.WindowEvent):

--

[M]void java.awt.Window.readObject(java.io.ObjectInputStream):

--

[M]void java.awt.Window.removeFromWindowList():

--

[M]void java.awt.Window.removeFromWindowList(sun.awt.AppContext,java.lang.ref.WeakReference):

--

[M]void java.awt.Window.removeNotify():

--

[M]void java.awt.Window.removeOwnedWindow(java.lang.ref.WeakReference):

--

[M]void java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener):

--

[M]void java.awt.Window.removeWindowListener(java.awt.event.WindowListener):

--

[M]void java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener):

--

[M]void java.awt.Window.reshape(int,int,int,int):

--

[M]void java.awt.Window.setAlwaysOnTop(boolean):

--

[M]void java.awt.Window.setAutoRequestFocus(boolean):

--

[M]void java.awt.Window.setBackground(java.awt.Color):

--

[M]void java.awt.Window.setBounds(int,int,int,int):

--

[M]void java.awt.Window.setBounds(java.awt.Rectangle):

--

[M]void java.awt.Window.setClientSize(int,int):

--

[M]void java.awt.Window.setCursor(java.awt.Cursor):

--

[M]void java.awt.Window.setFocusCycleRoot(boolean):

--

[M]void java.awt.Window.setFocusableWindowState(boolean):

--

[M]void java.awt.Window.setGraphicsConfiguration(java.awt.GraphicsConfiguration):

--

[M]void java.awt.Window.setIconImage(java.awt.Image):

--

[M]void java.awt.Window.setIconImages(java.util.List):

--

[M]void java.awt.Window.setLayersOpaque(java.awt.Component,boolean):

--

[M]void java.awt.Window.setLocation(int,int):
[M]void java.awt.Window.setLocation(int,int)
 [M]void org.javaan.Settings.setGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.awt.Window.setLocation(java.awt.Point):

--

[M]void java.awt.Window.setLocationByPlatform(boolean):

--

[M]void java.awt.Window.setLocationRelativeTo(java.awt.Component):

--

[M]void java.awt.Window.setMinimumSize(java.awt.Dimension):

--

[M]void java.awt.Window.setModalBlocked(java.awt.Dialog,boolean,boolean):

--

[M]void java.awt.Window.setModalExclusionType(java.awt.Dialog$ModalExclusionType):

--

[M]void java.awt.Window.setOpacity(float):

--

[M]void java.awt.Window.setOwnedWindowsAlwaysOnTop(boolean):

--

[M]void java.awt.Window.setShape(java.awt.Shape):

--

[M]void java.awt.Window.setSize(int,int):
[M]void java.awt.Window.setSize(int,int)
 [M]void org.javaan.Settings.setGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.awt.Window.setSize(java.awt.Dimension):

--

[M]java.awt.Component java.awt.Window.setTemporaryLostComponent(java.awt.Component):

--

[M]void java.awt.Window.setType(java.awt.Window$Type):

--

[M]void java.awt.Window.setVisible(boolean):
[M]void java.awt.Window.setVisible(boolean)
 [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.awt.Window.setWarningString():

--

[M]void java.awt.Window.show():

--

[M]void java.awt.Window.toBack():

--

[M]void java.awt.Window.toBack_NoClientCode():

--

[M]void java.awt.Window.toFront():

--

[M]void java.awt.Window.toFront_NoClientCode():

--

[M]void java.awt.Window.updateChildFocusableWindowState(java.awt.Window):

--

[M]void java.awt.Window.updateChildrenBlocking():

--

[M]void java.awt.Window.updateWindow():

--

[M]void java.awt.Window.updateZOrder():

--

[M]void java.awt.Window.writeObject(java.io.ObjectOutputStream):

--

[M]void java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent):

--

[M]void java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent):

--

[M]void java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent):

--

[M]void java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent):

--

[M]void java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent):

--

[M]void java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent):

--

[M]void java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent):

--

[M]void java.awt.event.WindowAdapter.<init>():
[M]void java.awt.event.WindowAdapter.<init>()
 [M]void org.javaan.Graph2dDisplay$2.<init>(org.javaan.Graph2dDisplay,org.javaan.Settings,javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.awt.event.WindowAdapter.windowActivated(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowClosed(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowClosing(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowDeactivated(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowDeiconified(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowGainedFocus(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowIconified(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowLostFocus(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowOpened(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowAdapter.windowStateChanged(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowFocusListener.windowGainedFocus(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowFocusListener.windowLostFocus(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent):

--

[M]void java.awt.event.WindowStateListener.windowStateChanged(java.awt.event.WindowEvent):

--

[M]boolean java.awt.image.ImageObserver.imageUpdate(java.awt.Image,int,int,int,int,int):

--

[M]int java.awt.print.Printable.print(java.awt.Graphics,java.awt.print.PageFormat,int):

--

[M]void java.io.Closeable.close():

--

[M]void java.io.FilterOutputStream.<init>(java.io.OutputStream):

--

[M]void java.io.FilterOutputStream.close():

--

[M]void java.io.FilterOutputStream.flush():

--

[M]void java.io.FilterOutputStream.write(byte[]):

--

[M]void java.io.FilterOutputStream.write(byte[],int,int):

--

[M]void java.io.FilterOutputStream.write(int):

--

[M]void java.io.Flushable.flush():

--

[M]void java.io.OutputStream.<init>():

--

[M]void java.io.OutputStream.close():

--

[M]void java.io.OutputStream.flush():

--

[M]void java.io.OutputStream.write(byte[]):

--

[M]void java.io.OutputStream.write(byte[],int,int):

--

[M]void java.io.OutputStream.write(int):

--

[M]void java.io.PrintStream.<init>(java.io.File):

--

[M]void java.io.PrintStream.<init>(java.io.File,java.lang.String):

--

[M]void java.io.PrintStream.<init>(java.io.OutputStream):

--

[M]void java.io.PrintStream.<init>(java.io.OutputStream,boolean):

--

[M]void java.io.PrintStream.<init>(java.io.OutputStream,boolean,java.lang.String):

--

[M]void java.io.PrintStream.<init>(java.lang.String):

--

[M]void java.io.PrintStream.<init>(java.lang.String,java.lang.String):

--

[M]java.lang.Appendable java.io.PrintStream.append(char):

--

[M]java.lang.Appendable java.io.PrintStream.append(java.lang.CharSequence):

--

[M]java.lang.Appendable java.io.PrintStream.append(java.lang.CharSequence,int,int):

--

[M]boolean java.io.PrintStream.checkError():

--

[M]void java.io.PrintStream.clearError():

--

[M]void java.io.PrintStream.close():

--

[M]void java.io.PrintStream.ensureOpen():

--

[M]void java.io.PrintStream.flush():

--

[M]java.io.PrintStream java.io.PrintStream.format(java.lang.String,java.lang.Object[]):

--

[M]java.io.PrintStream java.io.PrintStream.format(java.util.Locale,java.lang.String,java.lang.Object[]):

--

[M]void java.io.PrintStream.newLine():

--

[M]void java.io.PrintStream.print(boolean):

--

[M]void java.io.PrintStream.print(char):

--

[M]void java.io.PrintStream.print(char[]):

--

[M]void java.io.PrintStream.print(double):

--

[M]void java.io.PrintStream.print(float):

--

[M]void java.io.PrintStream.print(int):

--

[M]void java.io.PrintStream.print(java.lang.Object):

--

[M]void java.io.PrintStream.print(java.lang.String):
[M]void java.io.PrintStream.print(java.lang.String)
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void java.io.PrintStream.print(long):

--

[M]java.io.PrintStream java.io.PrintStream.printf(java.lang.String,java.lang.Object[]):

--

[M]java.io.PrintStream java.io.PrintStream.printf(java.util.Locale,java.lang.String,java.lang.Object[]):

--

[M]void java.io.PrintStream.println():
[M]void java.io.PrintStream.println()
 [M]void org.javaan.JavaanCli.printParagraph(java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void java.io.PrintStream.println(boolean):

--

[M]void java.io.PrintStream.println(char):

--

[M]void java.io.PrintStream.println(char[]):

--

[M]void java.io.PrintStream.println(double):

--

[M]void java.io.PrintStream.println(float):

--

[M]void java.io.PrintStream.println(int):

--

[M]void java.io.PrintStream.println(java.lang.Object):
[M]void java.io.PrintStream.println(java.lang.Object)
 [M]void org.javaan.JavaanCli.printSeparator()
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void java.io.PrintStream.println(java.lang.String):
[M]void java.io.PrintStream.println(java.lang.String)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.JavaanCli.printParagraph(java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void java.io.PrintStream.println(long):

--

[M]java.lang.Object java.io.PrintStream.requireNonNull(java.lang.Object,java.lang.String):

--

[M]void java.io.PrintStream.setError():

--

[M]java.nio.charset.Charset java.io.PrintStream.toCharset(java.lang.String):

--

[M]void java.io.PrintStream.write(byte[],int,int):

--

[M]void java.io.PrintStream.write(char[]):

--

[M]void java.io.PrintStream.write(int):

--

[M]void java.io.PrintStream.write(java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(boolean):

--

[M]java.lang.Appendable java.lang.AbstractStringBuilder.append(char):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(char[]):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(char[],int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(double):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(float):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.AbstractStringBuilder):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.CharSequence):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.CharSequence,int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.Object):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.StringBuffer):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(long):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.appendCodePoint(int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.appendNull():

--

[M]int java.lang.AbstractStringBuilder.capacity():

--

[M]char java.lang.AbstractStringBuilder.charAt(int):

--

[M]int java.lang.AbstractStringBuilder.codePointAt(int):

--

[M]int java.lang.AbstractStringBuilder.codePointBefore(int):

--

[M]int java.lang.AbstractStringBuilder.codePointCount(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.delete(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.deleteCharAt(int):

--

[M]void java.lang.AbstractStringBuilder.ensureCapacity(int):

--

[M]void java.lang.AbstractStringBuilder.ensureCapacityInternal(int):

--

[M]void java.lang.AbstractStringBuilder.getChars(int,int,char[],int):

--

[M]char[] java.lang.AbstractStringBuilder.getValue():

--

[M]int java.lang.AbstractStringBuilder.hugeCapacity(int):

--

[M]int java.lang.AbstractStringBuilder.indexOf(java.lang.String):

--

[M]int java.lang.AbstractStringBuilder.indexOf(java.lang.String,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,boolean):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char[]):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,char[],int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,double):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,float):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.CharSequence):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.CharSequence,int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.Object):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.insert(int,long):

--

[M]int java.lang.AbstractStringBuilder.lastIndexOf(java.lang.String):

--

[M]int java.lang.AbstractStringBuilder.lastIndexOf(java.lang.String,int):

--

[M]int java.lang.AbstractStringBuilder.length():

--

[M]int java.lang.AbstractStringBuilder.newCapacity(int):

--

[M]int java.lang.AbstractStringBuilder.offsetByCodePoints(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.replace(int,int,java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.reverse():

--

[M]void java.lang.AbstractStringBuilder.reverseAllValidSurrogatePairs():

--

[M]void java.lang.AbstractStringBuilder.setCharAt(int,char):

--

[M]void java.lang.AbstractStringBuilder.setLength(int):

--

[M]java.lang.CharSequence java.lang.AbstractStringBuilder.subSequence(int,int):

--

[M]java.lang.String java.lang.AbstractStringBuilder.substring(int):

--

[M]java.lang.String java.lang.AbstractStringBuilder.substring(int,int):

--

[M]java.lang.String java.lang.AbstractStringBuilder.toString():

--

[M]void java.lang.AbstractStringBuilder.trimToSize():

--

[M]java.lang.Appendable java.lang.Appendable.append(char):

--

[M]java.lang.Appendable java.lang.Appendable.append(java.lang.CharSequence):

--

[M]java.lang.Appendable java.lang.Appendable.append(java.lang.CharSequence,int,int):

--

[M]void java.lang.AutoCloseable.close():

--

[M]char java.lang.CharSequence.charAt(int):

--

[M]java.util.stream.IntStream java.lang.CharSequence.chars():

--

[M]java.util.stream.IntStream java.lang.CharSequence.codePoints():

--

[M]java.util.Spliterator$OfInt java.lang.CharSequence.lambda$chars$0():

--

[M]java.util.Spliterator$OfInt java.lang.CharSequence.lambda$codePoints$1():

--

[M]int java.lang.CharSequence.length():

--

[M]java.lang.CharSequence java.lang.CharSequence.subSequence(int,int):

--

[M]java.lang.String java.lang.CharSequence.toString():

--

[M]int java.lang.Comparable.compareTo(java.lang.Object):
[M]int java.lang.Comparable.compareTo(java.lang.Object)
 [M]int org.javaan.commands.SortUtil$1.compare(java.util.List,java.util.List)
  [M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object)

--

[M]java.lang.Object java.lang.Enum.clone():

--

[M]int java.lang.Enum.compareTo(java.lang.Enum):

--

[M]int java.lang.Enum.compareTo(java.lang.Object):

--

[M]boolean java.lang.Enum.equals(java.lang.Object):

--

[M]void java.lang.Enum.finalize():

--

[M]java.lang.Class java.lang.Enum.getDeclaringClass():

--

[M]int java.lang.Enum.hashCode():

--

[M]java.lang.String java.lang.Enum.name():

--

[M]int java.lang.Enum.ordinal():
[M]int java.lang.Enum.ordinal()
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces$1.<clinit>()
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses$1.<clinit>()

--

[M]void java.lang.Enum.readObject(java.io.ObjectInputStream):

--

[M]void java.lang.Enum.readObjectNoData():

--

[M]java.lang.String java.lang.Enum.toString():

--

[M]java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String):
[M]java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)
 [M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext$AdditionalTypeInformation.valueOf(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.ReturnCodes.valueOf(java.lang.String)

--

[M]void java.lang.Exception.<init>():

--

[M]void java.lang.Exception.<init>(java.lang.String):

--

[M]void java.lang.Exception.<init>(java.lang.String,java.lang.Throwable):

--

[M]void java.lang.Exception.<init>(java.lang.Throwable):

--

[M]void java.lang.Integer.<init>(int):

--

[M]void java.lang.Integer.<init>(java.lang.String):

--

[M]int java.lang.Integer.bitCount(int):

--

[M]byte java.lang.Integer.byteValue():

--

[M]int java.lang.Integer.compare(int,int):

--

[M]int java.lang.Integer.compareTo(java.lang.Integer):

--

[M]int java.lang.Integer.compareTo(java.lang.Object):

--

[M]int java.lang.Integer.compareUnsigned(int,int):

--

[M]java.lang.Integer java.lang.Integer.decode(java.lang.String):

--

[M]int java.lang.Integer.divideUnsigned(int,int):

--

[M]double java.lang.Integer.doubleValue():

--

[M]boolean java.lang.Integer.equals(java.lang.Object):

--

[M]float java.lang.Integer.floatValue():

--

[M]int java.lang.Integer.formatUnsignedInt(int,int,char[],int,int):

--

[M]void java.lang.Integer.getChars(int,int,char[]):

--

[M]java.lang.Integer java.lang.Integer.getInteger(java.lang.String):

--

[M]java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int):

--

[M]java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer):

--

[M]int java.lang.Integer.hashCode():

--

[M]int java.lang.Integer.hashCode(int):

--

[M]int java.lang.Integer.highestOneBit(int):

--

[M]int java.lang.Integer.intValue():

--

[M]long java.lang.Integer.longValue():

--

[M]int java.lang.Integer.lowestOneBit(int):

--

[M]int java.lang.Integer.max(int,int):

--

[M]int java.lang.Integer.min(int,int):

--

[M]int java.lang.Integer.numberOfLeadingZeros(int):

--

[M]int java.lang.Integer.numberOfTrailingZeros(int):

--

[M]int java.lang.Integer.parseInt(java.lang.String):

--

[M]int java.lang.Integer.parseInt(java.lang.String,int):

--

[M]int java.lang.Integer.parseUnsignedInt(java.lang.String):

--

[M]int java.lang.Integer.parseUnsignedInt(java.lang.String,int):

--

[M]int java.lang.Integer.remainderUnsigned(int,int):

--

[M]int java.lang.Integer.reverse(int):

--

[M]int java.lang.Integer.reverseBytes(int):

--

[M]int java.lang.Integer.rotateLeft(int,int):

--

[M]int java.lang.Integer.rotateRight(int,int):

--

[M]short java.lang.Integer.shortValue():

--

[M]int java.lang.Integer.signum(int):

--

[M]int java.lang.Integer.stringSize(int):

--

[M]int java.lang.Integer.sum(int,int):

--

[M]java.lang.String java.lang.Integer.toBinaryString(int):

--

[M]java.lang.String java.lang.Integer.toHexString(int):

--

[M]java.lang.String java.lang.Integer.toOctalString(int):

--

[M]java.lang.String java.lang.Integer.toString():

--

[M]java.lang.String java.lang.Integer.toString(int):

--

[M]java.lang.String java.lang.Integer.toString(int,int):

--

[M]long java.lang.Integer.toUnsignedLong(int):

--

[M]java.lang.String java.lang.Integer.toUnsignedString(int):

--

[M]java.lang.String java.lang.Integer.toUnsignedString(int,int):

--

[M]java.lang.String java.lang.Integer.toUnsignedString0(int,int):

--

[M]java.lang.Integer java.lang.Integer.valueOf(int):
[M]java.lang.Integer java.lang.Integer.valueOf(int)
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.lang.Integer java.lang.Integer.valueOf(java.lang.String):

--

[M]java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int):

--

[M]void java.lang.Iterable.forEach(java.util.function.Consumer):

--

[M]java.util.Iterator java.lang.Iterable.iterator():

--

[M]java.util.Spliterator java.lang.Iterable.spliterator():

--

[M]double java.lang.Math.IEEEremainder(double,double):

--

[M]double java.lang.Math.abs(double):

--

[M]float java.lang.Math.abs(float):

--

[M]int java.lang.Math.abs(int):

--

[M]long java.lang.Math.abs(long):

--

[M]double java.lang.Math.acos(double):

--

[M]int java.lang.Math.addExact(int,int):

--

[M]long java.lang.Math.addExact(long,long):

--

[M]double java.lang.Math.asin(double):

--

[M]double java.lang.Math.atan(double):

--

[M]double java.lang.Math.atan2(double,double):

--

[M]double java.lang.Math.cbrt(double):

--

[M]double java.lang.Math.ceil(double):

--

[M]double java.lang.Math.copySign(double,double):

--

[M]float java.lang.Math.copySign(float,float):

--

[M]double java.lang.Math.cos(double):

--

[M]double java.lang.Math.cosh(double):

--

[M]int java.lang.Math.decrementExact(int):

--

[M]long java.lang.Math.decrementExact(long):

--

[M]double java.lang.Math.exp(double):

--

[M]double java.lang.Math.expm1(double):

--

[M]double java.lang.Math.floor(double):

--

[M]int java.lang.Math.floorDiv(int,int):

--

[M]long java.lang.Math.floorDiv(long,long):

--

[M]int java.lang.Math.floorMod(int,int):

--

[M]long java.lang.Math.floorMod(long,long):

--

[M]int java.lang.Math.getExponent(double):

--

[M]int java.lang.Math.getExponent(float):

--

[M]double java.lang.Math.hypot(double,double):

--

[M]int java.lang.Math.incrementExact(int):

--

[M]long java.lang.Math.incrementExact(long):

--

[M]double java.lang.Math.log(double):

--

[M]double java.lang.Math.log10(double):

--

[M]double java.lang.Math.log1p(double):
[M]double java.lang.Math.log1p(double)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]double java.lang.Math.max(double,double):

--

[M]float java.lang.Math.max(float,float):

--

[M]int java.lang.Math.max(int,int):

--

[M]long java.lang.Math.max(long,long):

--

[M]double java.lang.Math.min(double,double):

--

[M]float java.lang.Math.min(float,float):

--

[M]int java.lang.Math.min(int,int):

--

[M]long java.lang.Math.min(long,long):

--

[M]int java.lang.Math.multiplyExact(int,int):

--

[M]long java.lang.Math.multiplyExact(long,long):

--

[M]int java.lang.Math.negateExact(int):

--

[M]long java.lang.Math.negateExact(long):

--

[M]double java.lang.Math.nextAfter(double,double):

--

[M]float java.lang.Math.nextAfter(float,double):

--

[M]double java.lang.Math.nextDown(double):

--

[M]float java.lang.Math.nextDown(float):

--

[M]double java.lang.Math.nextUp(double):

--

[M]float java.lang.Math.nextUp(float):

--

[M]double java.lang.Math.pow(double,double):

--

[M]double java.lang.Math.powerOfTwoD(int):

--

[M]float java.lang.Math.powerOfTwoF(int):

--

[M]double java.lang.Math.random():

--

[M]double java.lang.Math.rint(double):

--

[M]long java.lang.Math.round(double):
[M]long java.lang.Math.round(double)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]int java.lang.Math.round(float):

--

[M]double java.lang.Math.scalb(double,int):

--

[M]float java.lang.Math.scalb(float,int):

--

[M]double java.lang.Math.signum(double):

--

[M]float java.lang.Math.signum(float):

--

[M]double java.lang.Math.sin(double):

--

[M]double java.lang.Math.sinh(double):

--

[M]double java.lang.Math.sqrt(double):

--

[M]int java.lang.Math.subtractExact(int,int):

--

[M]long java.lang.Math.subtractExact(long,long):

--

[M]double java.lang.Math.tan(double):

--

[M]double java.lang.Math.tanh(double):

--

[M]double java.lang.Math.toDegrees(double):

--

[M]int java.lang.Math.toIntExact(long):

--

[M]double java.lang.Math.toRadians(double):

--

[M]double java.lang.Math.ulp(double):

--

[M]float java.lang.Math.ulp(float):

--

[M]void java.lang.Number.<init>():

--

[M]byte java.lang.Number.byteValue():

--

[M]double java.lang.Number.doubleValue():

--

[M]float java.lang.Number.floatValue():

--

[M]int java.lang.Number.intValue():

--

[M]long java.lang.Number.longValue():

--

[M]short java.lang.Number.shortValue():

--

[M]void java.lang.Object.<init>():
[M]void java.lang.Object.<init>()
 [M]void org.javaan.CommandContext.<init>(org.apache.commons.cli.CommandLine,java.lang.String[],org.javaan.Settings)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.CommandMap.<init>()
 [M]void org.javaan.jgraphx.DependencyGraphCellStyle.<init>(org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
  [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()
  [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()
 [M]void org.javaan.commands.FilterUtil.<init>()
 [M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.NameMatcher.<init>(java.lang.String)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.Settings.<init>()
 [M]void org.javaan.Settings.<init>(java.lang.String)
 [M]void org.javaan.JavaanCli.<init>(java.lang.String[],org.javaan.CommandMap)
 [M]void org.javaan.jgraphx.MxGraphBuilder.<init>(org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]void org.javaan.commands.BaseDependencyGraphCommand$1.<init>(org.javaan.commands.BaseDependencyGraphCommand,org.javaan.model.GraphView,org.javaan.CommandContext)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.SortUtil$1.<init>()
  [M]void org.javaan.commands.SortUtil.sort(java.util.List)
   [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
    [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]void org.javaan.commands.BaseCommand.<init>()
  [M]void org.javaan.commands.ListDuplicates.<init>()
  [M]void org.javaan.commands.BaseSetOptionsCommand.<init>()
   [M]void org.javaan.commands.ResetOptions.<init>()
   [M]void org.javaan.commands.SetOptions.<init>()
  [M]void org.javaan.commands.BaseTypeLoadingCommand.<init>()
   [M]void org.javaan.commands.ListPackages.<init>()
   [M]void org.javaan.commands.ListMissingTypes.<init>()
   [M]void org.javaan.commands.ListClasses.<init>()
   [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.<init>()
   [M]void org.javaan.commands.ListInterfaces.<init>()
   [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.<init>()
   [M]void org.javaan.commands.BaseCallGraphCommand.<init>()
    [M]void org.javaan.commands.ShowCallerGraph.<init>()
    [M]void org.javaan.commands.ShowCalleeGraph.<init>()
   [M]void org.javaan.commands.BaseDependencyGraphCommand.<init>()
    [M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>()
     [M]void org.javaan.commands.ShowUsingGraph.<init>()
     [M]void org.javaan.commands.ShowUsedGraph.<init>()
    [M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>()
     [M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
     [M]void org.javaan.commands.ShowPackageUsedGraph.<init>()
 [M]void org.javaan.commands.SortUtil.<init>()

--

[M]java.lang.Object java.lang.Object.clone():
[M]java.lang.Object java.lang.Object.clone()
 [M]org.javaan.CommandContext$AdditionalTypeInformation[] org.javaan.CommandContext$AdditionalTypeInformation.values()
  [M]void org.javaan.commands.ListInterfaces$1.<clinit>()
  [M]void org.javaan.commands.ListClasses$1.<clinit>()
 [M]org.javaan.ReturnCodes[] org.javaan.ReturnCodes.values()

--

[M]boolean java.lang.Object.equals(java.lang.Object):

--

[M]void java.lang.Object.finalize():

--

[M]java.lang.Class java.lang.Object.getClass():

--

[M]int java.lang.Object.hashCode():

--

[M]void java.lang.Object.notify():

--

[M]void java.lang.Object.notifyAll():

--

[M]void java.lang.Object.registerNatives():

--

[M]java.lang.String java.lang.Object.toString():

--

[M]void java.lang.Object.wait():

--

[M]void java.lang.Object.wait(long):

--

[M]void java.lang.Object.wait(long,int):

--

[M]void java.lang.Runnable.run():

--

[M]void java.lang.String.<init>():

--

[M]void java.lang.String.<init>(byte[]):

--

[M]void java.lang.String.<init>(byte[],int):

--

[M]void java.lang.String.<init>(byte[],int,int):

--

[M]void java.lang.String.<init>(byte[],int,int,int):

--

[M]void java.lang.String.<init>(byte[],int,int,java.lang.String):

--

[M]void java.lang.String.<init>(byte[],int,int,java.nio.charset.Charset):

--

[M]void java.lang.String.<init>(byte[],java.lang.String):

--

[M]void java.lang.String.<init>(byte[],java.nio.charset.Charset):

--

[M]void java.lang.String.<init>(char[]):

--

[M]void java.lang.String.<init>(char[],int,int):

--

[M]void java.lang.String.<init>(int[],int,int):

--

[M]void java.lang.String.<init>(java.lang.String):

--

[M]void java.lang.String.<init>(java.lang.StringBuffer):

--

[M]void java.lang.String.<init>(java.lang.StringBuilder):

--

[M]char java.lang.String.charAt(int):

--

[M]void java.lang.String.checkBounds(byte[],int,int):

--

[M]int java.lang.String.codePointAt(int):

--

[M]int java.lang.String.codePointBefore(int):

--

[M]int java.lang.String.codePointCount(int,int):

--

[M]int java.lang.String.compareTo(java.lang.Object):

--

[M]int java.lang.String.compareTo(java.lang.String):

--

[M]int java.lang.String.compareToIgnoreCase(java.lang.String):

--

[M]java.lang.String java.lang.String.concat(java.lang.String):

--

[M]boolean java.lang.String.contains(java.lang.CharSequence):
[M]boolean java.lang.String.contains(java.lang.CharSequence)
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)
 [M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method)
 [M]boolean org.javaan.commands.NameMatcher.accept(org.javaan.model.NamedObject)
  [M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object)

--

[M]boolean java.lang.String.contentEquals(java.lang.CharSequence):

--

[M]boolean java.lang.String.contentEquals(java.lang.StringBuffer):

--

[M]java.lang.String java.lang.String.copyValueOf(char[]):

--

[M]java.lang.String java.lang.String.copyValueOf(char[],int,int):

--

[M]boolean java.lang.String.endsWith(java.lang.String):

--

[M]boolean java.lang.String.equals(java.lang.Object):
[M]boolean java.lang.String.equals(java.lang.Object)
 [M]boolean org.javaan.commands.BaseSetOptionsCommand.optionExsists(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
   [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]boolean java.lang.String.equalsIgnoreCase(java.lang.String):
[M]boolean java.lang.String.equalsIgnoreCase(java.lang.String)
 [M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[]):
[M]java.lang.String java.lang.String.format(java.lang.String,java.lang.Object[])
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()
 [M]java.lang.String org.javaan.commands.BaseCommand.getHelpCommandLine()
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[]):

--

[M]byte[] java.lang.String.getBytes():

--

[M]void java.lang.String.getBytes(int,int,byte[],int):

--

[M]byte[] java.lang.String.getBytes(java.lang.String):

--

[M]byte[] java.lang.String.getBytes(java.nio.charset.Charset):

--

[M]void java.lang.String.getChars(char[],int):

--

[M]void java.lang.String.getChars(int,int,char[],int):

--

[M]int java.lang.String.hashCode():

--

[M]int java.lang.String.indexOf(char[],int,int,char[],int,int,int):

--

[M]int java.lang.String.indexOf(char[],int,int,java.lang.String,int):

--

[M]int java.lang.String.indexOf(int):

--

[M]int java.lang.String.indexOf(int,int):

--

[M]int java.lang.String.indexOf(java.lang.String):

--

[M]int java.lang.String.indexOf(java.lang.String,int):

--

[M]int java.lang.String.indexOfSupplementary(int,int):

--

[M]java.lang.String java.lang.String.intern():

--

[M]boolean java.lang.String.isEmpty():

--

[M]java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence[]):

--

[M]java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable):

--

[M]int java.lang.String.lastIndexOf(char[],int,int,char[],int,int,int):

--

[M]int java.lang.String.lastIndexOf(char[],int,int,java.lang.String,int):

--

[M]int java.lang.String.lastIndexOf(int):

--

[M]int java.lang.String.lastIndexOf(int,int):

--

[M]int java.lang.String.lastIndexOf(java.lang.String):

--

[M]int java.lang.String.lastIndexOf(java.lang.String,int):

--

[M]int java.lang.String.lastIndexOfSupplementary(int,int):

--

[M]int java.lang.String.length():
[M]int java.lang.String.length()
 [M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()

--

[M]boolean java.lang.String.matches(java.lang.String):

--

[M]boolean java.lang.String.nonSyncContentEquals(java.lang.AbstractStringBuilder):

--

[M]int java.lang.String.offsetByCodePoints(int,int):

--

[M]boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int):

--

[M]boolean java.lang.String.regionMatches(int,java.lang.String,int,int):

--

[M]java.lang.String java.lang.String.replace(char,char):

--

[M]java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence):

--

[M]java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String):

--

[M]java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String):

--

[M]java.lang.String[] java.lang.String.split(java.lang.String):

--

[M]java.lang.String[] java.lang.String.split(java.lang.String,int):

--

[M]boolean java.lang.String.startsWith(java.lang.String):
[M]boolean java.lang.String.startsWith(java.lang.String)
 [M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean java.lang.String.startsWith(java.lang.String,int):

--

[M]java.lang.CharSequence java.lang.String.subSequence(int,int):

--

[M]java.lang.String java.lang.String.substring(int):
[M]java.lang.String java.lang.String.substring(int)
 [M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String java.lang.String.substring(int,int):

--

[M]char[] java.lang.String.toCharArray():

--

[M]java.lang.String java.lang.String.toLowerCase():
[M]java.lang.String java.lang.String.toLowerCase()
 [M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)
 [M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method)
 [M]void org.javaan.commands.NameMatcher.<init>(java.lang.String)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]boolean org.javaan.commands.NameMatcher.accept(org.javaan.model.NamedObject)
  [M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object)

--

[M]java.lang.String java.lang.String.toLowerCase(java.util.Locale):

--

[M]java.lang.String java.lang.String.toString():

--

[M]java.lang.String java.lang.String.toUpperCase():

--

[M]java.lang.String java.lang.String.toUpperCase(java.util.Locale):

--

[M]java.lang.String java.lang.String.trim():

--

[M]java.lang.String java.lang.String.valueOf(boolean):

--

[M]java.lang.String java.lang.String.valueOf(char):

--

[M]java.lang.String java.lang.String.valueOf(char[]):

--

[M]java.lang.String java.lang.String.valueOf(char[],int,int):

--

[M]java.lang.String java.lang.String.valueOf(double):

--

[M]java.lang.String java.lang.String.valueOf(float):

--

[M]java.lang.String java.lang.String.valueOf(int):

--

[M]java.lang.String java.lang.String.valueOf(java.lang.Object):

--

[M]java.lang.String java.lang.String.valueOf(long):

--

[M]void java.lang.StringBuilder.<init>():
[M]void java.lang.StringBuilder.<init>()
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.JavaanCli.printSeparator()
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]void java.lang.StringBuilder.<init>(int):
[M]void java.lang.StringBuilder.<init>(int)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.lang.String org.javaan.JavaanCli.createIndent()

--

[M]void java.lang.StringBuilder.<init>(java.lang.CharSequence):

--

[M]void java.lang.StringBuilder.<init>(java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(boolean):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char):
[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printSeparator()
 [M]java.lang.String org.javaan.JavaanCli.createIndent()

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char[]):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(char[],int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(double):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(float):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(int):

--

[M]java.lang.Appendable java.lang.StringBuilder.append(java.lang.CharSequence):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.CharSequence,int,int):
[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.CharSequence,int,int)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.Object):
[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.Object)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.String):
[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.String)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printSeparator()
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(java.lang.StringBuffer):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(long):
[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.append(long)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.appendCodePoint(int):

--

[M]int java.lang.StringBuilder.capacity():

--

[M]char java.lang.StringBuilder.charAt(int):

--

[M]int java.lang.StringBuilder.codePointAt(int):

--

[M]int java.lang.StringBuilder.codePointBefore(int):

--

[M]int java.lang.StringBuilder.codePointCount(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.delete(int,int):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.deleteCharAt(int):

--

[M]void java.lang.StringBuilder.ensureCapacity(int):

--

[M]void java.lang.StringBuilder.getChars(int,int,char[],int):

--

[M]int java.lang.StringBuilder.indexOf(java.lang.String):

--

[M]int java.lang.StringBuilder.indexOf(java.lang.String,int):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,boolean):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,char):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[]):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,char[],int,int):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,double):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,float):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,int):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.CharSequence,int,int):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.Object):

--

[M]java.lang.StringBuilder java.lang.StringBuilder.insert(int,java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.insert(int,long):

--

[M]int java.lang.StringBuilder.lastIndexOf(java.lang.String):

--

[M]int java.lang.StringBuilder.lastIndexOf(java.lang.String,int):

--

[M]int java.lang.StringBuilder.length():

--

[M]int java.lang.StringBuilder.offsetByCodePoints(int,int):

--

[M]void java.lang.StringBuilder.readObject(java.io.ObjectInputStream):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.replace(int,int,java.lang.String):

--

[M]java.lang.AbstractStringBuilder java.lang.StringBuilder.reverse():

--

[M]void java.lang.StringBuilder.setCharAt(int,char):

--

[M]void java.lang.StringBuilder.setLength(int):

--

[M]java.lang.CharSequence java.lang.StringBuilder.subSequence(int,int):

--

[M]java.lang.String java.lang.StringBuilder.substring(int):

--

[M]java.lang.String java.lang.StringBuilder.substring(int,int):

--

[M]java.lang.String java.lang.StringBuilder.toString():
[M]java.lang.String java.lang.StringBuilder.toString()
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
 [M]java.lang.String org.javaan.JavaanCli.createIndent()
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]void java.lang.StringBuilder.trimToSize():

--

[M]void java.lang.StringBuilder.writeObject(java.io.ObjectOutputStream):

--

[M]void java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int):

--

[M]void java.lang.System.checkIO():

--

[M]void java.lang.System.checkKey(java.lang.String):

--

[M]java.lang.String java.lang.System.clearProperty(java.lang.String):

--

[M]java.io.Console java.lang.System.console():

--

[M]long java.lang.System.currentTimeMillis():

--

[M]void java.lang.System.exit(int):
[M]void java.lang.System.exit(int)
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void java.lang.System.gc():

--

[M]java.util.Properties java.lang.System.getProperties():

--

[M]java.lang.String java.lang.System.getProperty(java.lang.String):

--

[M]java.lang.String java.lang.System.getProperty(java.lang.String,java.lang.String):

--

[M]java.lang.SecurityManager java.lang.System.getSecurityManager():

--

[M]java.util.Map java.lang.System.getenv():

--

[M]java.lang.String java.lang.System.getenv(java.lang.String):

--

[M]int java.lang.System.identityHashCode(java.lang.Object):

--

[M]java.nio.channels.Channel java.lang.System.inheritedChannel():

--

[M]java.util.Properties java.lang.System.initProperties(java.util.Properties):

--

[M]void java.lang.System.initializeSystemClass():

--

[M]java.lang.String java.lang.System.lineSeparator():
[M]java.lang.String java.lang.System.lineSeparator()
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.JavaanCli.printSeparator()
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.ListClasses.printClasses(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void java.lang.System.load(java.lang.String):

--

[M]void java.lang.System.loadLibrary(java.lang.String):

--

[M]java.lang.String java.lang.System.mapLibraryName(java.lang.String):

--

[M]long java.lang.System.nanoTime():

--

[M]java.io.PrintStream java.lang.System.newPrintStream(java.io.FileOutputStream,java.lang.String):

--

[M]void java.lang.System.registerNatives():

--

[M]void java.lang.System.runFinalization():

--

[M]void java.lang.System.runFinalizersOnExit(boolean):

--

[M]void java.lang.System.setErr(java.io.PrintStream):

--

[M]void java.lang.System.setErr0(java.io.PrintStream):

--

[M]void java.lang.System.setIn(java.io.InputStream):

--

[M]void java.lang.System.setIn0(java.io.InputStream):

--

[M]void java.lang.System.setJavaLangAccess():

--

[M]void java.lang.System.setOut(java.io.PrintStream):

--

[M]void java.lang.System.setOut0(java.io.PrintStream):

--

[M]void java.lang.System.setProperties(java.util.Properties):

--

[M]java.lang.String java.lang.System.setProperty(java.lang.String,java.lang.String):

--

[M]void java.lang.System.setSecurityManager(java.lang.SecurityManager):

--

[M]void java.lang.System.setSecurityManager0(java.lang.SecurityManager):

--

[M]void java.lang.Throwable.<init>():

--

[M]void java.lang.Throwable.<init>(java.lang.String):

--

[M]void java.lang.Throwable.<init>(java.lang.String,java.lang.Throwable):

--

[M]void java.lang.Throwable.<init>(java.lang.Throwable):

--

[M]void java.lang.Throwable.addSuppressed(java.lang.Throwable):

--

[M]java.lang.Throwable java.lang.Throwable.fillInStackTrace():

--

[M]java.lang.Throwable java.lang.Throwable.fillInStackTrace(int):

--

[M]java.lang.Throwable java.lang.Throwable.getCause():

--

[M]java.lang.String java.lang.Throwable.getLocalizedMessage():

--

[M]java.lang.String java.lang.Throwable.getMessage():
[M]java.lang.String java.lang.Throwable.getMessage()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.StackTraceElement[] java.lang.Throwable.getOurStackTrace():

--

[M]java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace():

--

[M]int java.lang.Throwable.getStackTraceDepth():

--

[M]java.lang.StackTraceElement java.lang.Throwable.getStackTraceElement(int):

--

[M]java.lang.Throwable[] java.lang.Throwable.getSuppressed():

--

[M]java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable):

--

[M]void java.lang.Throwable.printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set):

--

[M]void java.lang.Throwable.printStackTrace():

--

[M]void java.lang.Throwable.printStackTrace(java.io.PrintStream):

--

[M]void java.lang.Throwable.printStackTrace(java.io.PrintWriter):

--

[M]void java.lang.Throwable.printStackTrace(java.lang.Throwable$PrintStreamOrWriter):

--

[M]void java.lang.Throwable.readObject(java.io.ObjectInputStream):

--

[M]void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]):

--

[M]java.lang.String java.lang.Throwable.toString():

--

[M]void java.lang.Throwable.writeObject(java.io.ObjectOutputStream):

--

[M]boolean java.util.AbstractCollection.add(java.lang.Object):

--

[M]boolean java.util.AbstractCollection.addAll(java.util.Collection):

--

[M]void java.util.AbstractCollection.clear():

--

[M]boolean java.util.AbstractCollection.contains(java.lang.Object):

--

[M]boolean java.util.AbstractCollection.containsAll(java.util.Collection):

--

[M]java.lang.Object[] java.util.AbstractCollection.finishToArray(java.lang.Object[],java.util.Iterator):

--

[M]int java.util.AbstractCollection.hugeCapacity(int):

--

[M]boolean java.util.AbstractCollection.isEmpty():

--

[M]java.util.Iterator java.util.AbstractCollection.iterator():

--

[M]boolean java.util.AbstractCollection.remove(java.lang.Object):

--

[M]boolean java.util.AbstractCollection.removeAll(java.util.Collection):

--

[M]boolean java.util.AbstractCollection.retainAll(java.util.Collection):

--

[M]int java.util.AbstractCollection.size():

--

[M]java.lang.Object[] java.util.AbstractCollection.toArray():

--

[M]java.lang.Object[] java.util.AbstractCollection.toArray(java.lang.Object[]):

--

[M]java.lang.String java.util.AbstractCollection.toString():

--

[M]void java.util.AbstractList.add(int,java.lang.Object):

--

[M]boolean java.util.AbstractList.add(java.lang.Object):

--

[M]boolean java.util.AbstractList.addAll(int,java.util.Collection):

--

[M]void java.util.AbstractList.clear():

--

[M]boolean java.util.AbstractList.equals(java.lang.Object):

--

[M]java.lang.Object java.util.AbstractList.get(int):

--

[M]int java.util.AbstractList.hashCode():

--

[M]int java.util.AbstractList.indexOf(java.lang.Object):

--

[M]java.util.Iterator java.util.AbstractList.iterator():

--

[M]int java.util.AbstractList.lastIndexOf(java.lang.Object):

--

[M]java.util.ListIterator java.util.AbstractList.listIterator():

--

[M]java.util.ListIterator java.util.AbstractList.listIterator(int):

--

[M]java.lang.String java.util.AbstractList.outOfBoundsMsg(int):

--

[M]void java.util.AbstractList.rangeCheckForAdd(int):

--

[M]java.lang.Object java.util.AbstractList.remove(int):

--

[M]void java.util.AbstractList.removeRange(int,int):

--

[M]java.lang.Object java.util.AbstractList.set(int,java.lang.Object):

--

[M]java.util.List java.util.AbstractList.subList(int,int):

--

[M]boolean java.util.AbstractMap.access$000(java.lang.Object,java.lang.Object):

--

[M]void java.util.AbstractMap.clear():

--

[M]java.lang.Object java.util.AbstractMap.clone():

--

[M]boolean java.util.AbstractMap.containsKey(java.lang.Object):

--

[M]boolean java.util.AbstractMap.containsValue(java.lang.Object):

--

[M]java.util.Set java.util.AbstractMap.entrySet():

--

[M]boolean java.util.AbstractMap.eq(java.lang.Object,java.lang.Object):

--

[M]boolean java.util.AbstractMap.equals(java.lang.Object):

--

[M]java.lang.Object java.util.AbstractMap.get(java.lang.Object):

--

[M]int java.util.AbstractMap.hashCode():

--

[M]boolean java.util.AbstractMap.isEmpty():

--

[M]java.util.Set java.util.AbstractMap.keySet():

--

[M]java.lang.Object java.util.AbstractMap.put(java.lang.Object,java.lang.Object):

--

[M]void java.util.AbstractMap.putAll(java.util.Map):

--

[M]java.lang.Object java.util.AbstractMap.remove(java.lang.Object):

--

[M]int java.util.AbstractMap.size():

--

[M]java.lang.String java.util.AbstractMap.toString():

--

[M]java.util.Collection java.util.AbstractMap.values():

--

[M]boolean java.util.AbstractSet.equals(java.lang.Object):

--

[M]int java.util.AbstractSet.hashCode():

--

[M]boolean java.util.AbstractSet.removeAll(java.util.Collection):

--

[M]void java.util.ArrayList.<init>():
[M]void java.util.ArrayList.<init>()
 [M]void org.javaan.CommandMap.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]java.util.List org.javaan.commands.SortUtil.sort(java.util.Collection)
  [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
   [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void java.util.ArrayList.<init>(int):

--

[M]void java.util.ArrayList.<init>(java.util.Collection):
[M]void java.util.ArrayList.<init>(java.util.Collection)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]int java.util.ArrayList.access$100(java.util.ArrayList):

--

[M]void java.util.ArrayList.add(int,java.lang.Object):

--

[M]boolean java.util.ArrayList.add(java.lang.Object):

--

[M]boolean java.util.ArrayList.addAll(int,java.util.Collection):

--

[M]boolean java.util.ArrayList.addAll(java.util.Collection):

--

[M]boolean java.util.ArrayList.batchRemove(java.util.Collection,boolean):

--

[M]void java.util.ArrayList.clear():

--

[M]java.lang.Object java.util.ArrayList.clone():

--

[M]boolean java.util.ArrayList.contains(java.lang.Object):

--

[M]java.lang.Object java.util.ArrayList.elementData(int):

--

[M]void java.util.ArrayList.ensureCapacity(int):

--

[M]void java.util.ArrayList.ensureCapacityInternal(int):

--

[M]void java.util.ArrayList.ensureExplicitCapacity(int):

--

[M]void java.util.ArrayList.fastRemove(int):

--

[M]void java.util.ArrayList.forEach(java.util.function.Consumer):

--

[M]java.lang.Object java.util.ArrayList.get(int):

--

[M]void java.util.ArrayList.grow(int):

--

[M]int java.util.ArrayList.hugeCapacity(int):

--

[M]int java.util.ArrayList.indexOf(java.lang.Object):

--

[M]boolean java.util.ArrayList.isEmpty():

--

[M]java.util.Iterator java.util.ArrayList.iterator():

--

[M]int java.util.ArrayList.lastIndexOf(java.lang.Object):

--

[M]java.util.ListIterator java.util.ArrayList.listIterator():

--

[M]java.util.ListIterator java.util.ArrayList.listIterator(int):

--

[M]java.lang.String java.util.ArrayList.outOfBoundsMsg(int):

--

[M]void java.util.ArrayList.rangeCheck(int):

--

[M]void java.util.ArrayList.rangeCheckForAdd(int):

--

[M]void java.util.ArrayList.readObject(java.io.ObjectInputStream):

--

[M]java.lang.Object java.util.ArrayList.remove(int):

--

[M]boolean java.util.ArrayList.remove(java.lang.Object):

--

[M]boolean java.util.ArrayList.removeAll(java.util.Collection):

--

[M]boolean java.util.ArrayList.removeIf(java.util.function.Predicate):

--

[M]void java.util.ArrayList.removeRange(int,int):

--

[M]void java.util.ArrayList.replaceAll(java.util.function.UnaryOperator):

--

[M]boolean java.util.ArrayList.retainAll(java.util.Collection):

--

[M]java.lang.Object java.util.ArrayList.set(int,java.lang.Object):

--

[M]int java.util.ArrayList.size():

--

[M]void java.util.ArrayList.sort(java.util.Comparator):

--

[M]java.util.Spliterator java.util.ArrayList.spliterator():

--

[M]java.util.List java.util.ArrayList.subList(int,int):

--

[M]void java.util.ArrayList.subListRangeCheck(int,int,int):

--

[M]java.lang.Object[] java.util.ArrayList.toArray():

--

[M]java.lang.Object[] java.util.ArrayList.toArray(java.lang.Object[]):

--

[M]void java.util.ArrayList.trimToSize():

--

[M]void java.util.ArrayList.writeObject(java.io.ObjectOutputStream):

--

[M]java.util.List java.util.Arrays.asList(java.lang.Object[]):

--

[M]int java.util.Arrays.binarySearch(byte[],byte):

--

[M]int java.util.Arrays.binarySearch(byte[],int,int,byte):

--

[M]int java.util.Arrays.binarySearch(char[],char):

--

[M]int java.util.Arrays.binarySearch(char[],int,int,char):

--

[M]int java.util.Arrays.binarySearch(double[],double):

--

[M]int java.util.Arrays.binarySearch(double[],int,int,double):

--

[M]int java.util.Arrays.binarySearch(float[],float):

--

[M]int java.util.Arrays.binarySearch(float[],int,int,float):

--

[M]int java.util.Arrays.binarySearch(int[],int):

--

[M]int java.util.Arrays.binarySearch(int[],int,int,int):

--

[M]int java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object):

--

[M]int java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator):

--

[M]int java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object):

--

[M]int java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator):

--

[M]int java.util.Arrays.binarySearch(long[],int,int,long):

--

[M]int java.util.Arrays.binarySearch(long[],long):

--

[M]int java.util.Arrays.binarySearch(short[],int,int,short):

--

[M]int java.util.Arrays.binarySearch(short[],short):

--

[M]int java.util.Arrays.binarySearch0(byte[],int,int,byte):

--

[M]int java.util.Arrays.binarySearch0(char[],int,int,char):

--

[M]int java.util.Arrays.binarySearch0(double[],int,int,double):

--

[M]int java.util.Arrays.binarySearch0(float[],int,int,float):

--

[M]int java.util.Arrays.binarySearch0(int[],int,int,int):

--

[M]int java.util.Arrays.binarySearch0(java.lang.Object[],int,int,java.lang.Object):

--

[M]int java.util.Arrays.binarySearch0(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator):

--

[M]int java.util.Arrays.binarySearch0(long[],int,int,long):

--

[M]int java.util.Arrays.binarySearch0(short[],int,int,short):

--

[M]boolean[] java.util.Arrays.copyOf(boolean[],int):

--

[M]byte[] java.util.Arrays.copyOf(byte[],int):

--

[M]char[] java.util.Arrays.copyOf(char[],int):

--

[M]double[] java.util.Arrays.copyOf(double[],int):

--

[M]float[] java.util.Arrays.copyOf(float[],int):

--

[M]int[] java.util.Arrays.copyOf(int[],int):

--

[M]java.lang.Object[] java.util.Arrays.copyOf(java.lang.Object[],int):

--

[M]java.lang.Object[] java.util.Arrays.copyOf(java.lang.Object[],int,java.lang.Class):

--

[M]long[] java.util.Arrays.copyOf(long[],int):

--

[M]short[] java.util.Arrays.copyOf(short[],int):

--

[M]boolean[] java.util.Arrays.copyOfRange(boolean[],int,int):

--

[M]byte[] java.util.Arrays.copyOfRange(byte[],int,int):

--

[M]char[] java.util.Arrays.copyOfRange(char[],int,int):

--

[M]double[] java.util.Arrays.copyOfRange(double[],int,int):

--

[M]float[] java.util.Arrays.copyOfRange(float[],int,int):

--

[M]int[] java.util.Arrays.copyOfRange(int[],int,int):

--

[M]java.lang.Object[] java.util.Arrays.copyOfRange(java.lang.Object[],int,int):
[M]java.lang.Object[] java.util.Arrays.copyOfRange(java.lang.Object[],int,int)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.Object[] java.util.Arrays.copyOfRange(java.lang.Object[],int,int,java.lang.Class):

--

[M]long[] java.util.Arrays.copyOfRange(long[],int,int):

--

[M]short[] java.util.Arrays.copyOfRange(short[],int,int):

--

[M]boolean java.util.Arrays.deepEquals(java.lang.Object[],java.lang.Object[]):

--

[M]boolean java.util.Arrays.deepEquals0(java.lang.Object,java.lang.Object):

--

[M]int java.util.Arrays.deepHashCode(java.lang.Object[]):

--

[M]java.lang.String java.util.Arrays.deepToString(java.lang.Object[]):

--

[M]void java.util.Arrays.deepToString(java.lang.Object[],java.lang.StringBuilder,java.util.Set):

--

[M]boolean java.util.Arrays.equals(boolean[],boolean[]):

--

[M]boolean java.util.Arrays.equals(byte[],byte[]):

--

[M]boolean java.util.Arrays.equals(char[],char[]):

--

[M]boolean java.util.Arrays.equals(double[],double[]):

--

[M]boolean java.util.Arrays.equals(float[],float[]):

--

[M]boolean java.util.Arrays.equals(int[],int[]):

--

[M]boolean java.util.Arrays.equals(java.lang.Object[],java.lang.Object[]):

--

[M]boolean java.util.Arrays.equals(long[],long[]):

--

[M]boolean java.util.Arrays.equals(short[],short[]):

--

[M]void java.util.Arrays.fill(boolean[],boolean):

--

[M]void java.util.Arrays.fill(boolean[],int,int,boolean):

--

[M]void java.util.Arrays.fill(byte[],byte):

--

[M]void java.util.Arrays.fill(byte[],int,int,byte):

--

[M]void java.util.Arrays.fill(char[],char):

--

[M]void java.util.Arrays.fill(char[],int,int,char):

--

[M]void java.util.Arrays.fill(double[],double):

--

[M]void java.util.Arrays.fill(double[],int,int,double):

--

[M]void java.util.Arrays.fill(float[],float):

--

[M]void java.util.Arrays.fill(float[],int,int,float):

--

[M]void java.util.Arrays.fill(int[],int):

--

[M]void java.util.Arrays.fill(int[],int,int,int):

--

[M]void java.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object):

--

[M]void java.util.Arrays.fill(java.lang.Object[],java.lang.Object):

--

[M]void java.util.Arrays.fill(long[],int,int,long):

--

[M]void java.util.Arrays.fill(long[],long):

--

[M]void java.util.Arrays.fill(short[],int,int,short):

--

[M]void java.util.Arrays.fill(short[],short):

--

[M]int java.util.Arrays.hashCode(boolean[]):

--

[M]int java.util.Arrays.hashCode(byte[]):

--

[M]int java.util.Arrays.hashCode(char[]):

--

[M]int java.util.Arrays.hashCode(double[]):

--

[M]int java.util.Arrays.hashCode(float[]):

--

[M]int java.util.Arrays.hashCode(int[]):

--

[M]int java.util.Arrays.hashCode(java.lang.Object[]):

--

[M]int java.util.Arrays.hashCode(long[]):

--

[M]int java.util.Arrays.hashCode(short[]):

--

[M]void java.util.Arrays.lambda$parallelSetAll$0(java.lang.Object[],java.util.function.IntFunction,int):

--

[M]void java.util.Arrays.lambda$parallelSetAll$1(int[],java.util.function.IntUnaryOperator,int):

--

[M]void java.util.Arrays.lambda$parallelSetAll$2(long[],java.util.function.IntToLongFunction,int):

--

[M]void java.util.Arrays.lambda$parallelSetAll$3(double[],java.util.function.IntToDoubleFunction,int):

--

[M]void java.util.Arrays.legacyMergeSort(java.lang.Object[]):

--

[M]void java.util.Arrays.legacyMergeSort(java.lang.Object[],int,int):

--

[M]void java.util.Arrays.legacyMergeSort(java.lang.Object[],int,int,java.util.Comparator):

--

[M]void java.util.Arrays.legacyMergeSort(java.lang.Object[],java.util.Comparator):

--

[M]void java.util.Arrays.mergeSort(java.lang.Object[],java.lang.Object[],int,int,int):

--

[M]void java.util.Arrays.mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator):

--

[M]void java.util.Arrays.parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(double[],java.util.function.DoubleBinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(int[],java.util.function.IntBinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(java.lang.Object[],int,int,java.util.function.BinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator):

--

[M]void java.util.Arrays.parallelPrefix(long[],java.util.function.LongBinaryOperator):

--

[M]void java.util.Arrays.parallelSetAll(double[],java.util.function.IntToDoubleFunction):

--

[M]void java.util.Arrays.parallelSetAll(int[],java.util.function.IntUnaryOperator):

--

[M]void java.util.Arrays.parallelSetAll(java.lang.Object[],java.util.function.IntFunction):

--

[M]void java.util.Arrays.parallelSetAll(long[],java.util.function.IntToLongFunction):

--

[M]void java.util.Arrays.parallelSort(byte[]):

--

[M]void java.util.Arrays.parallelSort(byte[],int,int):

--

[M]void java.util.Arrays.parallelSort(char[]):

--

[M]void java.util.Arrays.parallelSort(char[],int,int):

--

[M]void java.util.Arrays.parallelSort(double[]):

--

[M]void java.util.Arrays.parallelSort(double[],int,int):

--

[M]void java.util.Arrays.parallelSort(float[]):

--

[M]void java.util.Arrays.parallelSort(float[],int,int):

--

[M]void java.util.Arrays.parallelSort(int[]):

--

[M]void java.util.Arrays.parallelSort(int[],int,int):

--

[M]void java.util.Arrays.parallelSort(java.lang.Comparable[]):

--

[M]void java.util.Arrays.parallelSort(java.lang.Comparable[],int,int):

--

[M]void java.util.Arrays.parallelSort(java.lang.Object[],int,int,java.util.Comparator):

--

[M]void java.util.Arrays.parallelSort(java.lang.Object[],java.util.Comparator):

--

[M]void java.util.Arrays.parallelSort(long[]):

--

[M]void java.util.Arrays.parallelSort(long[],int,int):

--

[M]void java.util.Arrays.parallelSort(short[]):

--

[M]void java.util.Arrays.parallelSort(short[],int,int):

--

[M]void java.util.Arrays.rangeCheck(int,int,int):

--

[M]void java.util.Arrays.setAll(double[],java.util.function.IntToDoubleFunction):

--

[M]void java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator):

--

[M]void java.util.Arrays.setAll(java.lang.Object[],java.util.function.IntFunction):

--

[M]void java.util.Arrays.setAll(long[],java.util.function.IntToLongFunction):

--

[M]void java.util.Arrays.sort(byte[]):

--

[M]void java.util.Arrays.sort(byte[],int,int):

--

[M]void java.util.Arrays.sort(char[]):

--

[M]void java.util.Arrays.sort(char[],int,int):

--

[M]void java.util.Arrays.sort(double[]):

--

[M]void java.util.Arrays.sort(double[],int,int):

--

[M]void java.util.Arrays.sort(float[]):

--

[M]void java.util.Arrays.sort(float[],int,int):

--

[M]void java.util.Arrays.sort(int[]):

--

[M]void java.util.Arrays.sort(int[],int,int):

--

[M]void java.util.Arrays.sort(java.lang.Object[]):

--

[M]void java.util.Arrays.sort(java.lang.Object[],int,int):

--

[M]void java.util.Arrays.sort(java.lang.Object[],int,int,java.util.Comparator):

--

[M]void java.util.Arrays.sort(java.lang.Object[],java.util.Comparator):

--

[M]void java.util.Arrays.sort(long[]):

--

[M]void java.util.Arrays.sort(long[],int,int):

--

[M]void java.util.Arrays.sort(short[]):

--

[M]void java.util.Arrays.sort(short[],int,int):

--

[M]java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[]):

--

[M]java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[],int,int):

--

[M]java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[]):

--

[M]java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[],int,int):

--

[M]java.util.Spliterator java.util.Arrays.spliterator(java.lang.Object[]):

--

[M]java.util.Spliterator java.util.Arrays.spliterator(java.lang.Object[],int,int):

--

[M]java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[]):

--

[M]java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[],int,int):

--

[M]java.util.stream.DoubleStream java.util.Arrays.stream(double[]):

--

[M]java.util.stream.DoubleStream java.util.Arrays.stream(double[],int,int):

--

[M]java.util.stream.IntStream java.util.Arrays.stream(int[]):

--

[M]java.util.stream.IntStream java.util.Arrays.stream(int[],int,int):

--

[M]java.util.stream.Stream java.util.Arrays.stream(java.lang.Object[]):

--

[M]java.util.stream.Stream java.util.Arrays.stream(java.lang.Object[],int,int):

--

[M]java.util.stream.LongStream java.util.Arrays.stream(long[]):

--

[M]java.util.stream.LongStream java.util.Arrays.stream(long[],int,int):

--

[M]void java.util.Arrays.swap(java.lang.Object[],int,int):

--

[M]java.lang.String java.util.Arrays.toString(boolean[]):

--

[M]java.lang.String java.util.Arrays.toString(byte[]):

--

[M]java.lang.String java.util.Arrays.toString(char[]):

--

[M]java.lang.String java.util.Arrays.toString(double[]):

--

[M]java.lang.String java.util.Arrays.toString(float[]):

--

[M]java.lang.String java.util.Arrays.toString(int[]):

--

[M]java.lang.String java.util.Arrays.toString(java.lang.Object[]):

--

[M]java.lang.String java.util.Arrays.toString(long[]):

--

[M]java.lang.String java.util.Arrays.toString(short[]):

--

[M]boolean java.util.Collection.add(java.lang.Object):

--

[M]boolean java.util.Collection.addAll(java.util.Collection):

--

[M]void java.util.Collection.clear():

--

[M]boolean java.util.Collection.contains(java.lang.Object):

--

[M]boolean java.util.Collection.containsAll(java.util.Collection):

--

[M]boolean java.util.Collection.equals(java.lang.Object):

--

[M]int java.util.Collection.hashCode():

--

[M]boolean java.util.Collection.isEmpty():

--

[M]java.util.Iterator java.util.Collection.iterator():
[M]java.util.Iterator java.util.Collection.iterator()
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]java.util.stream.Stream java.util.Collection.parallelStream():

--

[M]boolean java.util.Collection.remove(java.lang.Object):

--

[M]boolean java.util.Collection.removeAll(java.util.Collection):

--

[M]boolean java.util.Collection.removeIf(java.util.function.Predicate):

--

[M]boolean java.util.Collection.retainAll(java.util.Collection):

--

[M]int java.util.Collection.size():

--

[M]java.util.Spliterator java.util.Collection.spliterator():

--

[M]java.util.stream.Stream java.util.Collection.stream():

--

[M]java.lang.Object[] java.util.Collection.toArray():

--

[M]java.lang.Object[] java.util.Collection.toArray(java.lang.Object[]):

--

[M]boolean java.util.Collections.addAll(java.util.Collection,java.lang.Object[]):

--

[M]java.util.Queue java.util.Collections.asLifoQueue(java.util.Deque):

--

[M]int java.util.Collections.binarySearch(java.util.List,java.lang.Object):

--

[M]int java.util.Collections.binarySearch(java.util.List,java.lang.Object,java.util.Comparator):

--

[M]java.util.Collection java.util.Collections.checkedCollection(java.util.Collection,java.lang.Class):

--

[M]java.util.List java.util.Collections.checkedList(java.util.List,java.lang.Class):

--

[M]java.util.Map java.util.Collections.checkedMap(java.util.Map,java.lang.Class,java.lang.Class):

--

[M]java.util.NavigableMap java.util.Collections.checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class):

--

[M]java.util.NavigableSet java.util.Collections.checkedNavigableSet(java.util.NavigableSet,java.lang.Class):

--

[M]java.util.Queue java.util.Collections.checkedQueue(java.util.Queue,java.lang.Class):

--

[M]java.util.Set java.util.Collections.checkedSet(java.util.Set,java.lang.Class):

--

[M]java.util.SortedMap java.util.Collections.checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class):

--

[M]java.util.SortedSet java.util.Collections.checkedSortedSet(java.util.SortedSet,java.lang.Class):

--

[M]void java.util.Collections.copy(java.util.List,java.util.List):

--

[M]boolean java.util.Collections.disjoint(java.util.Collection,java.util.Collection):

--

[M]java.util.Enumeration java.util.Collections.emptyEnumeration():

--

[M]java.util.Iterator java.util.Collections.emptyIterator():

--

[M]java.util.List java.util.Collections.emptyList():

--

[M]java.util.ListIterator java.util.Collections.emptyListIterator():

--

[M]java.util.Map java.util.Collections.emptyMap():

--

[M]java.util.NavigableMap java.util.Collections.emptyNavigableMap():

--

[M]java.util.NavigableSet java.util.Collections.emptyNavigableSet():

--

[M]java.util.Set java.util.Collections.emptySet():

--

[M]java.util.SortedMap java.util.Collections.emptySortedMap():

--

[M]java.util.SortedSet java.util.Collections.emptySortedSet():

--

[M]java.util.Enumeration java.util.Collections.enumeration(java.util.Collection):

--

[M]boolean java.util.Collections.eq(java.lang.Object,java.lang.Object):

--

[M]void java.util.Collections.fill(java.util.List,java.lang.Object):

--

[M]int java.util.Collections.frequency(java.util.Collection,java.lang.Object):

--

[M]java.lang.Object java.util.Collections.get(java.util.ListIterator,int):

--

[M]int java.util.Collections.indexOfSubList(java.util.List,java.util.List):

--

[M]int java.util.Collections.indexedBinarySearch(java.util.List,java.lang.Object):

--

[M]int java.util.Collections.indexedBinarySearch(java.util.List,java.lang.Object,java.util.Comparator):

--

[M]int java.util.Collections.iteratorBinarySearch(java.util.List,java.lang.Object):

--

[M]int java.util.Collections.iteratorBinarySearch(java.util.List,java.lang.Object,java.util.Comparator):

--

[M]int java.util.Collections.lastIndexOfSubList(java.util.List,java.util.List):

--

[M]java.util.ArrayList java.util.Collections.list(java.util.Enumeration):

--

[M]java.lang.Object java.util.Collections.max(java.util.Collection):

--

[M]java.lang.Object java.util.Collections.max(java.util.Collection,java.util.Comparator):

--

[M]java.lang.Object java.util.Collections.min(java.util.Collection):

--

[M]java.lang.Object java.util.Collections.min(java.util.Collection,java.util.Comparator):

--

[M]java.util.List java.util.Collections.nCopies(int,java.lang.Object):

--

[M]java.util.Set java.util.Collections.newSetFromMap(java.util.Map):

--

[M]boolean java.util.Collections.replaceAll(java.util.List,java.lang.Object,java.lang.Object):

--

[M]void java.util.Collections.reverse(java.util.List):

--

[M]java.util.Comparator java.util.Collections.reverseOrder():

--

[M]java.util.Comparator java.util.Collections.reverseOrder(java.util.Comparator):

--

[M]void java.util.Collections.rotate(java.util.List,int):

--

[M]void java.util.Collections.rotate1(java.util.List,int):

--

[M]void java.util.Collections.rotate2(java.util.List,int):

--

[M]void java.util.Collections.shuffle(java.util.List):

--

[M]void java.util.Collections.shuffle(java.util.List,java.util.Random):

--

[M]java.util.Set java.util.Collections.singleton(java.lang.Object):

--

[M]java.util.Iterator java.util.Collections.singletonIterator(java.lang.Object):

--

[M]java.util.List java.util.Collections.singletonList(java.lang.Object):

--

[M]java.util.Map java.util.Collections.singletonMap(java.lang.Object,java.lang.Object):

--

[M]java.util.Spliterator java.util.Collections.singletonSpliterator(java.lang.Object):

--

[M]void java.util.Collections.sort(java.util.List):
[M]void java.util.Collections.sort(java.util.List)
 [M]java.util.List org.javaan.commands.SortUtil.sort(java.util.Collection)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
   [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
   [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]void java.util.Collections.sort(java.util.List,java.util.Comparator):
[M]void java.util.Collections.sort(java.util.List,java.util.Comparator)
 [M]void org.javaan.commands.SortUtil.sort(java.util.List)
  [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
   [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]void java.util.Collections.swap(java.lang.Object[],int,int):

--

[M]void java.util.Collections.swap(java.util.List,int,int):

--

[M]java.util.Collection java.util.Collections.synchronizedCollection(java.util.Collection):

--

[M]java.util.Collection java.util.Collections.synchronizedCollection(java.util.Collection,java.lang.Object):

--

[M]java.util.List java.util.Collections.synchronizedList(java.util.List):

--

[M]java.util.List java.util.Collections.synchronizedList(java.util.List,java.lang.Object):

--

[M]java.util.Map java.util.Collections.synchronizedMap(java.util.Map):

--

[M]java.util.NavigableMap java.util.Collections.synchronizedNavigableMap(java.util.NavigableMap):

--

[M]java.util.NavigableSet java.util.Collections.synchronizedNavigableSet(java.util.NavigableSet):

--

[M]java.util.Set java.util.Collections.synchronizedSet(java.util.Set):

--

[M]java.util.Set java.util.Collections.synchronizedSet(java.util.Set,java.lang.Object):

--

[M]java.util.SortedMap java.util.Collections.synchronizedSortedMap(java.util.SortedMap):

--

[M]java.util.SortedSet java.util.Collections.synchronizedSortedSet(java.util.SortedSet):

--

[M]java.util.Collection java.util.Collections.unmodifiableCollection(java.util.Collection):

--

[M]java.util.List java.util.Collections.unmodifiableList(java.util.List):

--

[M]java.util.Map java.util.Collections.unmodifiableMap(java.util.Map):

--

[M]java.util.NavigableMap java.util.Collections.unmodifiableNavigableMap(java.util.NavigableMap):

--

[M]java.util.NavigableSet java.util.Collections.unmodifiableNavigableSet(java.util.NavigableSet):

--

[M]java.util.Set java.util.Collections.unmodifiableSet(java.util.Set):

--

[M]java.util.SortedMap java.util.Collections.unmodifiableSortedMap(java.util.SortedMap):

--

[M]java.util.SortedSet java.util.Collections.unmodifiableSortedSet(java.util.SortedSet):

--

[M]java.lang.Object[] java.util.Collections.zeroLengthArray(java.lang.Class):

--

[M]java.lang.Object java.util.Comparator.$deserializeLambda$(java.lang.invoke.SerializedLambda):

--

[M]int java.util.Comparator.compare(java.lang.Object,java.lang.Object):

--

[M]java.util.Comparator java.util.Comparator.comparing(java.util.function.Function):

--

[M]java.util.Comparator java.util.Comparator.comparing(java.util.function.Function,java.util.Comparator):

--

[M]java.util.Comparator java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction):

--

[M]java.util.Comparator java.util.Comparator.comparingInt(java.util.function.ToIntFunction):

--

[M]java.util.Comparator java.util.Comparator.comparingLong(java.util.function.ToLongFunction):

--

[M]boolean java.util.Comparator.equals(java.lang.Object):

--

[M]int java.util.Comparator.lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object):

--

[M]int java.util.Comparator.lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object):

--

[M]int java.util.Comparator.lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object):

--

[M]int java.util.Comparator.lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object):

--

[M]int java.util.Comparator.lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object):

--

[M]int java.util.Comparator.lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object):

--

[M]java.util.Comparator java.util.Comparator.naturalOrder():

--

[M]java.util.Comparator java.util.Comparator.nullsFirst(java.util.Comparator):

--

[M]java.util.Comparator java.util.Comparator.nullsLast(java.util.Comparator):

--

[M]java.util.Comparator java.util.Comparator.reverseOrder():

--

[M]java.util.Comparator java.util.Comparator.reversed():

--

[M]java.util.Comparator java.util.Comparator.thenComparing(java.util.Comparator):

--

[M]java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function):

--

[M]java.util.Comparator java.util.Comparator.thenComparing(java.util.function.Function,java.util.Comparator):

--

[M]java.util.Comparator java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction):

--

[M]java.util.Comparator java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction):

--

[M]java.util.Comparator java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction):

--

[M]void java.util.HashMap.<init>():
[M]void java.util.HashMap.<init>()
 [M]void org.javaan.jgraphx.MxGraphBuilder.<init>(org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.util.HashMap.<init>(int):

--

[M]void java.util.HashMap.<init>(int,float):

--

[M]void java.util.HashMap.<init>(java.util.Map):

--

[M]void java.util.HashMap.afterNodeAccess(java.util.HashMap$Node):

--

[M]void java.util.HashMap.afterNodeInsertion(boolean):

--

[M]void java.util.HashMap.afterNodeRemoval(java.util.HashMap$Node):

--

[M]int java.util.HashMap.capacity():

--

[M]void java.util.HashMap.clear():

--

[M]java.lang.Object java.util.HashMap.clone():

--

[M]java.lang.Class java.util.HashMap.comparableClassFor(java.lang.Object):

--

[M]int java.util.HashMap.compareComparables(java.lang.Class,java.lang.Object,java.lang.Object):

--

[M]java.lang.Object java.util.HashMap.compute(java.lang.Object,java.util.function.BiFunction):

--

[M]java.lang.Object java.util.HashMap.computeIfAbsent(java.lang.Object,java.util.function.Function):

--

[M]java.lang.Object java.util.HashMap.computeIfPresent(java.lang.Object,java.util.function.BiFunction):

--

[M]boolean java.util.HashMap.containsKey(java.lang.Object):

--

[M]boolean java.util.HashMap.containsValue(java.lang.Object):

--

[M]java.util.Set java.util.HashMap.entrySet():

--

[M]void java.util.HashMap.forEach(java.util.function.BiConsumer):

--

[M]java.lang.Object java.util.HashMap.get(java.lang.Object):

--

[M]java.util.HashMap$Node java.util.HashMap.getNode(int,java.lang.Object):

--

[M]java.lang.Object java.util.HashMap.getOrDefault(java.lang.Object,java.lang.Object):

--

[M]int java.util.HashMap.hash(java.lang.Object):

--

[M]void java.util.HashMap.internalWriteEntries(java.io.ObjectOutputStream):

--

[M]boolean java.util.HashMap.isEmpty():

--

[M]java.util.Set java.util.HashMap.keySet():

--

[M]float java.util.HashMap.loadFactor():

--

[M]java.lang.Object java.util.HashMap.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction):

--

[M]java.util.HashMap$Node java.util.HashMap.newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node):

--

[M]java.util.HashMap$TreeNode java.util.HashMap.newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node):

--

[M]java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object):

--

[M]void java.util.HashMap.putAll(java.util.Map):

--

[M]java.lang.Object java.util.HashMap.putIfAbsent(java.lang.Object,java.lang.Object):

--

[M]void java.util.HashMap.putMapEntries(java.util.Map,boolean):

--

[M]java.lang.Object java.util.HashMap.putVal(int,java.lang.Object,java.lang.Object,boolean,boolean):

--

[M]void java.util.HashMap.readObject(java.io.ObjectInputStream):

--

[M]void java.util.HashMap.reinitialize():

--

[M]java.lang.Object java.util.HashMap.remove(java.lang.Object):

--

[M]boolean java.util.HashMap.remove(java.lang.Object,java.lang.Object):

--

[M]java.util.HashMap$Node java.util.HashMap.removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean):

--

[M]java.lang.Object java.util.HashMap.replace(java.lang.Object,java.lang.Object):

--

[M]boolean java.util.HashMap.replace(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]void java.util.HashMap.replaceAll(java.util.function.BiFunction):

--

[M]java.util.HashMap$Node java.util.HashMap.replacementNode(java.util.HashMap$Node,java.util.HashMap$Node):

--

[M]java.util.HashMap$TreeNode java.util.HashMap.replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node):

--

[M]java.util.HashMap$Node[] java.util.HashMap.resize():

--

[M]int java.util.HashMap.size():

--

[M]int java.util.HashMap.tableSizeFor(int):

--

[M]void java.util.HashMap.treeifyBin(java.util.HashMap$Node[],int):

--

[M]java.util.Collection java.util.HashMap.values():

--

[M]void java.util.HashMap.writeObject(java.io.ObjectOutputStream):

--

[M]void java.util.HashSet.<init>():

--

[M]void java.util.HashSet.<init>(int):

--

[M]void java.util.HashSet.<init>(int,float):

--

[M]void java.util.HashSet.<init>(java.util.Collection):
[M]void java.util.HashSet.<init>(java.util.Collection)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]boolean java.util.HashSet.add(java.lang.Object):

--

[M]void java.util.HashSet.clear():

--

[M]java.lang.Object java.util.HashSet.clone():

--

[M]boolean java.util.HashSet.contains(java.lang.Object):

--

[M]boolean java.util.HashSet.isEmpty():

--

[M]java.util.Iterator java.util.HashSet.iterator():

--

[M]void java.util.HashSet.readObject(java.io.ObjectInputStream):

--

[M]boolean java.util.HashSet.remove(java.lang.Object):

--

[M]int java.util.HashSet.size():

--

[M]java.util.Spliterator java.util.HashSet.spliterator():

--

[M]void java.util.HashSet.writeObject(java.io.ObjectOutputStream):

--

[M]void java.util.Iterator.forEachRemaining(java.util.function.Consumer):

--

[M]boolean java.util.Iterator.hasNext():
[M]boolean java.util.Iterator.hasNext()
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()
   [M]void org.javaan.JavaanCli.printUsage(boolean)
 [M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]java.lang.Object java.util.Iterator.next():
[M]java.lang.Object java.util.Iterator.next()
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()
   [M]void org.javaan.JavaanCli.printUsage(boolean)
 [M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]void java.util.Iterator.remove():

--

[M]void java.util.List.add(int,java.lang.Object):

--

[M]boolean java.util.List.add(java.lang.Object):
[M]boolean java.util.List.add(java.lang.Object)
 [M]void org.javaan.CommandMap.addCommand(org.javaan.Command)
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]boolean java.util.List.addAll(int,java.util.Collection):

--

[M]boolean java.util.List.addAll(java.util.Collection):
[M]boolean java.util.List.addAll(java.util.Collection)
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]java.util.List org.javaan.commands.SortUtil.sort(java.util.Collection)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
   [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
   [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]void java.util.List.clear():

--

[M]boolean java.util.List.contains(java.lang.Object):

--

[M]boolean java.util.List.containsAll(java.util.Collection):

--

[M]boolean java.util.List.equals(java.lang.Object):

--

[M]java.lang.Object java.util.List.get(int):
[M]java.lang.Object java.util.List.get(int)
 [M]int org.javaan.commands.SortUtil$1.compare(java.util.List,java.util.List)
  [M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object)

--

[M]int java.util.List.hashCode():

--

[M]int java.util.List.indexOf(java.lang.Object):

--

[M]boolean java.util.List.isEmpty():

--

[M]java.util.Iterator java.util.List.iterator():
[M]java.util.Iterator java.util.List.iterator()
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()
   [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]int java.util.List.lastIndexOf(java.lang.Object):

--

[M]java.util.ListIterator java.util.List.listIterator():

--

[M]java.util.ListIterator java.util.List.listIterator(int):

--

[M]java.lang.Object java.util.List.remove(int):

--

[M]boolean java.util.List.remove(java.lang.Object):

--

[M]boolean java.util.List.removeAll(java.util.Collection):

--

[M]void java.util.List.replaceAll(java.util.function.UnaryOperator):

--

[M]boolean java.util.List.retainAll(java.util.Collection):

--

[M]java.lang.Object java.util.List.set(int,java.lang.Object):

--

[M]int java.util.List.size():
[M]int java.util.List.size()
 [M]int org.javaan.commands.SortUtil$1.compare(java.util.List,java.util.List)
  [M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object)
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void java.util.List.sort(java.util.Comparator):

--

[M]java.util.Spliterator java.util.List.spliterator():

--

[M]java.util.List java.util.List.subList(int,int):

--

[M]java.lang.Object[] java.util.List.toArray():

--

[M]java.lang.Object[] java.util.List.toArray(java.lang.Object[]):

--

[M]void java.util.Map.clear():

--

[M]java.lang.Object java.util.Map.compute(java.lang.Object,java.util.function.BiFunction):

--

[M]java.lang.Object java.util.Map.computeIfAbsent(java.lang.Object,java.util.function.Function):

--

[M]java.lang.Object java.util.Map.computeIfPresent(java.lang.Object,java.util.function.BiFunction):

--

[M]boolean java.util.Map.containsKey(java.lang.Object):

--

[M]boolean java.util.Map.containsValue(java.lang.Object):

--

[M]java.util.Set java.util.Map.entrySet():

--

[M]boolean java.util.Map.equals(java.lang.Object):

--

[M]void java.util.Map.forEach(java.util.function.BiConsumer):

--

[M]java.lang.Object java.util.Map.get(java.lang.Object):
[M]java.lang.Object java.util.Map.get(java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object java.util.Map.getOrDefault(java.lang.Object,java.lang.Object):

--

[M]int java.util.Map.hashCode():

--

[M]boolean java.util.Map.isEmpty():

--

[M]java.util.Set java.util.Map.keySet():

--

[M]java.lang.Object java.util.Map.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction):

--

[M]java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object):
[M]java.lang.Object java.util.Map.put(java.lang.Object,java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void java.util.Map.putAll(java.util.Map):

--

[M]java.lang.Object java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object java.util.Map.remove(java.lang.Object):

--

[M]boolean java.util.Map.remove(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object java.util.Map.replace(java.lang.Object,java.lang.Object):

--

[M]boolean java.util.Map.replace(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]void java.util.Map.replaceAll(java.util.function.BiFunction):

--

[M]int java.util.Map.size():

--

[M]java.util.Collection java.util.Map.values():

--

[M]boolean java.util.Set.add(java.lang.Object):

--

[M]boolean java.util.Set.addAll(java.util.Collection):
[M]boolean java.util.Set.addAll(java.util.Collection)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void java.util.Set.clear():

--

[M]boolean java.util.Set.contains(java.lang.Object):

--

[M]boolean java.util.Set.containsAll(java.util.Collection):

--

[M]boolean java.util.Set.equals(java.lang.Object):

--

[M]int java.util.Set.hashCode():

--

[M]boolean java.util.Set.isEmpty():

--

[M]java.util.Iterator java.util.Set.iterator():
[M]java.util.Iterator java.util.Set.iterator()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()

--

[M]boolean java.util.Set.remove(java.lang.Object):

--

[M]boolean java.util.Set.removeAll(java.util.Collection):

--

[M]boolean java.util.Set.retainAll(java.util.Collection):

--

[M]int java.util.Set.size():

--

[M]java.util.Spliterator java.util.Set.spliterator():

--

[M]java.lang.Object[] java.util.Set.toArray():

--

[M]java.lang.Object[] java.util.Set.toArray(java.lang.Object[]):

--

[M]void java.util.logging.Handler.checkPermission():

--

[M]void java.util.logging.Handler.close():

--

[M]void java.util.logging.Handler.flush():

--

[M]java.lang.String java.util.logging.Handler.getEncoding():

--

[M]java.util.logging.ErrorManager java.util.logging.Handler.getErrorManager():

--

[M]java.util.logging.Filter java.util.logging.Handler.getFilter():

--

[M]java.util.logging.Formatter java.util.logging.Handler.getFormatter():

--

[M]java.util.logging.Level java.util.logging.Handler.getLevel():

--

[M]boolean java.util.logging.Handler.isLoggable(java.util.logging.LogRecord):

--

[M]void java.util.logging.Handler.publish(java.util.logging.LogRecord):

--

[M]void java.util.logging.Handler.reportError(java.lang.String,java.lang.Exception,int):

--

[M]void java.util.logging.Handler.setEncoding(java.lang.String):

--

[M]void java.util.logging.Handler.setErrorManager(java.util.logging.ErrorManager):

--

[M]void java.util.logging.Handler.setFilter(java.util.logging.Filter):

--

[M]void java.util.logging.Handler.setFormatter(java.util.logging.Formatter):

--

[M]void java.util.logging.Handler.setLevel(java.util.logging.Level):
[M]void java.util.logging.Handler.setLevel(java.util.logging.Level)
 [M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.logging.LogManager java.util.logging.LogManager.access$100():

--

[M]java.util.logging.Level java.util.logging.LogManager.access$1000():

--

[M]void java.util.logging.LogManager.access$1100(java.util.logging.Logger,java.util.logging.Level):

--

[M]void java.util.logging.LogManager.access$1200(java.util.logging.Logger,java.util.logging.Logger):

--

[M]java.lang.String[] java.util.logging.LogManager.access$1300(java.util.logging.LogManager,java.lang.String):

--

[M]java.lang.ref.ReferenceQueue java.util.logging.LogManager.access$1400(java.util.logging.LogManager):

--

[M]void java.util.logging.LogManager.access$1500(java.util.logging.LogManager):

--

[M]boolean java.util.logging.LogManager.access$202(java.util.logging.LogManager,boolean):

--

[M]boolean java.util.logging.LogManager.access$302(java.util.logging.LogManager,boolean):

--

[M]java.util.logging.Logger java.util.logging.LogManager.access$500(java.util.logging.LogManager):

--

[M]java.util.logging.Logger java.util.logging.LogManager.access$502(java.util.logging.LogManager,java.util.logging.Logger):

--

[M]boolean java.util.logging.LogManager.access$600(java.util.logging.LogManager):

--

[M]boolean java.util.logging.LogManager.access$700(java.util.logging.LogManager):

--

[M]void java.util.logging.LogManager.access$800(java.util.logging.LogManager):

--

[M]boolean java.util.logging.LogManager.addLogger(java.util.logging.Logger):

--

[M]void java.util.logging.LogManager.addPropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.util.logging.LogManager.checkAccess():

--

[M]void java.util.logging.LogManager.checkPermission():

--

[M]java.lang.Void java.util.logging.LogManager.checkSubclassPermissions():

--

[M]java.util.List java.util.logging.LogManager.contexts():

--

[M]java.util.logging.Logger java.util.logging.LogManager.demandLogger(java.lang.String,java.lang.String,java.lang.Class):

--

[M]java.util.logging.Logger java.util.logging.LogManager.demandSystemLogger(java.lang.String,java.lang.String):

--

[M]void java.util.logging.LogManager.doSetLevel(java.util.logging.Logger,java.util.logging.Level):

--

[M]void java.util.logging.LogManager.doSetParent(java.util.logging.Logger,java.util.logging.Logger):

--

[M]void java.util.logging.LogManager.drainLoggerRefQueueBounded():

--

[M]void java.util.logging.LogManager.ensureLogManagerInitialized():

--

[M]boolean java.util.logging.LogManager.getBooleanProperty(java.lang.String,boolean):

--

[M]java.util.logging.Filter java.util.logging.LogManager.getFilterProperty(java.lang.String,java.util.logging.Filter):

--

[M]java.util.logging.Formatter java.util.logging.LogManager.getFormatterProperty(java.lang.String,java.util.logging.Formatter):

--

[M]int java.util.logging.LogManager.getIntProperty(java.lang.String,int):

--

[M]java.util.logging.Level java.util.logging.LogManager.getLevelProperty(java.lang.String,java.util.logging.Level):

--

[M]java.util.logging.LogManager java.util.logging.LogManager.getLogManager():
[M]java.util.logging.LogManager java.util.logging.LogManager.getLogManager()
 [M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.logging.Logger java.util.logging.LogManager.getLogger(java.lang.String):
[M]java.util.logging.Logger java.util.logging.LogManager.getLogger(java.lang.String)
 [M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.Enumeration java.util.logging.LogManager.getLoggerNames():

--

[M]java.util.logging.LoggingMXBean java.util.logging.LogManager.getLoggingMXBean():

--

[M]java.lang.String java.util.logging.LogManager.getProperty(java.lang.String):

--

[M]java.lang.String java.util.logging.LogManager.getStringProperty(java.lang.String,java.lang.String):

--

[M]java.util.logging.LogManager$LoggerContext java.util.logging.LogManager.getSystemContext():

--

[M]java.util.logging.LogManager$LoggerContext java.util.logging.LogManager.getUserContext():

--

[M]void java.util.logging.LogManager.initializeGlobalHandlers():

--

[M]void java.util.logging.LogManager.loadLoggerHandlers(java.util.logging.Logger,java.lang.String,java.lang.String):

--

[M]java.lang.String[] java.util.logging.LogManager.parseClassNames(java.lang.String):

--

[M]void java.util.logging.LogManager.readConfiguration():

--

[M]void java.util.logging.LogManager.readConfiguration(java.io.InputStream):

--

[M]void java.util.logging.LogManager.readPrimordialConfiguration():

--

[M]void java.util.logging.LogManager.removePropertyChangeListener(java.beans.PropertyChangeListener):

--

[M]void java.util.logging.LogManager.reset():

--

[M]void java.util.logging.LogManager.resetLogger(java.util.logging.Logger):

--

[M]void java.util.logging.LogManager.setLevelsOnExistingLoggers():

--

[M]java.util.logging.Logger$LoggerBundle java.util.logging.Logger.access$000():

--

[M]java.util.logging.Logger$LoggerBundle java.util.logging.Logger.access$100():

--

[M]java.util.logging.Handler[] java.util.logging.Logger.accessCheckedHandlers():

--

[M]void java.util.logging.Logger.addHandler(java.util.logging.Handler):

--

[M]void java.util.logging.Logger.checkPermission():

--

[M]void java.util.logging.Logger.config(java.lang.String):

--

[M]void java.util.logging.Logger.config(java.util.function.Supplier):

--

[M]java.util.logging.Logger java.util.logging.Logger.demandLogger(java.lang.String,java.lang.String,java.lang.Class):

--

[M]void java.util.logging.Logger.doLog(java.util.logging.LogRecord):

--

[M]void java.util.logging.Logger.doLog(java.util.logging.LogRecord,java.lang.String):

--

[M]void java.util.logging.Logger.doLog(java.util.logging.LogRecord,java.util.ResourceBundle):

--

[M]void java.util.logging.Logger.doSetParent(java.util.logging.Logger):

--

[M]void java.util.logging.Logger.entering(java.lang.String,java.lang.String):

--

[M]void java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object):

--

[M]void java.util.logging.Logger.entering(java.lang.String,java.lang.String,java.lang.Object[]):

--

[M]void java.util.logging.Logger.exiting(java.lang.String,java.lang.String):

--

[M]void java.util.logging.Logger.exiting(java.lang.String,java.lang.String,java.lang.Object):

--

[M]java.util.ResourceBundle java.util.logging.Logger.findResourceBundle(java.lang.String,boolean):

--

[M]java.util.ResourceBundle java.util.logging.Logger.findSystemResourceBundle(java.util.Locale):

--

[M]void java.util.logging.Logger.fine(java.lang.String):

--

[M]void java.util.logging.Logger.fine(java.util.function.Supplier):

--

[M]void java.util.logging.Logger.finer(java.lang.String):

--

[M]void java.util.logging.Logger.finer(java.util.function.Supplier):

--

[M]void java.util.logging.Logger.finest(java.lang.String):

--

[M]void java.util.logging.Logger.finest(java.util.function.Supplier):

--

[M]java.util.logging.Logger java.util.logging.Logger.getAnonymousLogger():

--

[M]java.util.logging.Logger java.util.logging.Logger.getAnonymousLogger(java.lang.String):

--

[M]java.lang.ClassLoader java.util.logging.Logger.getCallersClassLoader():

--

[M]java.util.logging.Logger$LoggerBundle java.util.logging.Logger.getEffectiveLoggerBundle():

--

[M]java.util.logging.Filter java.util.logging.Logger.getFilter():

--

[M]java.util.logging.Logger java.util.logging.Logger.getGlobal():

--

[M]java.util.logging.Handler[] java.util.logging.Logger.getHandlers():
[M]java.util.logging.Handler[] java.util.logging.Logger.getHandlers()
 [M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.logging.Level java.util.logging.Logger.getLevel():

--

[M]java.util.logging.Logger java.util.logging.Logger.getLogger(java.lang.String):

--

[M]java.util.logging.Logger java.util.logging.Logger.getLogger(java.lang.String,java.lang.String):

--

[M]java.lang.String java.util.logging.Logger.getName():

--

[M]java.util.logging.Logger java.util.logging.Logger.getParent():

--

[M]java.util.logging.Logger java.util.logging.Logger.getPlatformLogger(java.lang.String):

--

[M]java.util.ResourceBundle java.util.logging.Logger.getResourceBundle():

--

[M]java.lang.String java.util.logging.Logger.getResourceBundleName():

--

[M]boolean java.util.logging.Logger.getUseParentHandlers():

--

[M]void java.util.logging.Logger.info(java.lang.String):

--

[M]void java.util.logging.Logger.info(java.util.function.Supplier):

--

[M]boolean java.util.logging.Logger.isLevelInitialized():

--

[M]boolean java.util.logging.Logger.isLoggable(java.util.logging.Level):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.lang.String):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object[]):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier):

--

[M]void java.util.logging.Logger.log(java.util.logging.Level,java.util.function.Supplier):

--

[M]void java.util.logging.Logger.log(java.util.logging.LogRecord):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier):

--

[M]void java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[]):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object[]):

--

[M]void java.util.logging.Logger.logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable):

--

[M]void java.util.logging.Logger.removeChildLogger(java.util.logging.LogManager$LoggerWeakRef):

--

[M]void java.util.logging.Logger.removeHandler(java.util.logging.Handler):

--

[M]void java.util.logging.Logger.setCallersClassLoaderRef(java.lang.Class):

--

[M]void java.util.logging.Logger.setFilter(java.util.logging.Filter):

--

[M]void java.util.logging.Logger.setLevel(java.util.logging.Level):
[M]void java.util.logging.Logger.setLevel(java.util.logging.Level)
 [M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void java.util.logging.Logger.setLogManager(java.util.logging.LogManager):

--

[M]void java.util.logging.Logger.setParent(java.util.logging.Logger):

--

[M]void java.util.logging.Logger.setResourceBundle(java.util.ResourceBundle):

--

[M]void java.util.logging.Logger.setUseParentHandlers(boolean):

--

[M]void java.util.logging.Logger.setupResourceInfo(java.lang.String,java.lang.Class):

--

[M]void java.util.logging.Logger.severe(java.lang.String):

--

[M]void java.util.logging.Logger.severe(java.util.function.Supplier):

--

[M]void java.util.logging.Logger.throwing(java.lang.String,java.lang.String,java.lang.Throwable):

--

[M]void java.util.logging.Logger.updateEffectiveLevel():

--

[M]void java.util.logging.Logger.warning(java.lang.String):

--

[M]void java.util.logging.Logger.warning(java.util.function.Supplier):

--

[M]java.lang.String java.util.prefs.Preferences.absolutePath():

--

[M]java.util.prefs.PreferencesFactory java.util.prefs.Preferences.access$000():

--

[M]void java.util.prefs.Preferences.addNodeChangeListener(java.util.prefs.NodeChangeListener):

--

[M]void java.util.prefs.Preferences.addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener):

--

[M]java.lang.String[] java.util.prefs.Preferences.childrenNames():

--

[M]void java.util.prefs.Preferences.clear():

--

[M]void java.util.prefs.Preferences.exportNode(java.io.OutputStream):

--

[M]void java.util.prefs.Preferences.exportSubtree(java.io.OutputStream):

--

[M]java.util.prefs.PreferencesFactory java.util.prefs.Preferences.factory():

--

[M]java.util.prefs.PreferencesFactory java.util.prefs.Preferences.factory1():

--

[M]void java.util.prefs.Preferences.flush():

--

[M]java.lang.String java.util.prefs.Preferences.get(java.lang.String,java.lang.String):

--

[M]boolean java.util.prefs.Preferences.getBoolean(java.lang.String,boolean):
[M]boolean java.util.prefs.Preferences.getBoolean(java.lang.String,boolean)
 [M]boolean org.javaan.Settings.isDisplay2dGraph()
  [M]boolean org.javaan.CommandContext.isDisplay2dGraph()
   [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.Settings.isOptionEnabled(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)
   [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)
 [M]boolean org.javaan.Settings.isResolveMethodImplementations()
  [M]boolean org.javaan.CommandContext.isResolveMethodImplementations()
   [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
   [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.Settings.isResolveDependenciesInClassHierarchy()
  [M]boolean org.javaan.CommandContext.isResolveDependenciesInClassHierarchy()

--

[M]byte[] java.util.prefs.Preferences.getByteArray(java.lang.String,byte[]):

--

[M]double java.util.prefs.Preferences.getDouble(java.lang.String,double):

--

[M]float java.util.prefs.Preferences.getFloat(java.lang.String,float):

--

[M]int java.util.prefs.Preferences.getInt(java.lang.String,int):
[M]int java.util.prefs.Preferences.getInt(java.lang.String,int)
 [M]void org.javaan.Settings.setGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]long java.util.prefs.Preferences.getLong(java.lang.String,long):

--

[M]void java.util.prefs.Preferences.importPreferences(java.io.InputStream):

--

[M]boolean java.util.prefs.Preferences.isUserNode():

--

[M]java.lang.String[] java.util.prefs.Preferences.keys():

--

[M]java.lang.String java.util.prefs.Preferences.name():

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.node(java.lang.String):
[M]java.util.prefs.Preferences java.util.prefs.Preferences.node(java.lang.String)
 [M]void org.javaan.Settings.<init>(java.lang.String)

--

[M]boolean java.util.prefs.Preferences.nodeExists(java.lang.String):

--

[M]java.lang.String java.util.prefs.Preferences.nodeName(java.lang.Class):

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.parent():

--

[M]void java.util.prefs.Preferences.put(java.lang.String,java.lang.String):

--

[M]void java.util.prefs.Preferences.putBoolean(java.lang.String,boolean):
[M]void java.util.prefs.Preferences.putBoolean(java.lang.String,boolean)
 [M]void org.javaan.Settings.enableOption(java.lang.String)
  [M]void org.javaan.commands.SetOptions.processOption(org.javaan.Settings,java.lang.String)
 [M]void org.javaan.Settings.disableOption(java.lang.String)
  [M]void org.javaan.commands.ResetOptions.processOption(org.javaan.Settings,java.lang.String)

--

[M]void java.util.prefs.Preferences.putByteArray(java.lang.String,byte[]):

--

[M]void java.util.prefs.Preferences.putDouble(java.lang.String,double):

--

[M]void java.util.prefs.Preferences.putFloat(java.lang.String,float):

--

[M]void java.util.prefs.Preferences.putInt(java.lang.String,int):
[M]void java.util.prefs.Preferences.putInt(java.lang.String,int)
 [M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame)
  [M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]void java.util.prefs.Preferences.putLong(java.lang.String,long):

--

[M]void java.util.prefs.Preferences.remove(java.lang.String):

--

[M]void java.util.prefs.Preferences.removeNode():

--

[M]void java.util.prefs.Preferences.removeNodeChangeListener(java.util.prefs.NodeChangeListener):

--

[M]void java.util.prefs.Preferences.removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener):

--

[M]void java.util.prefs.Preferences.sync():

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.systemNodeForPackage(java.lang.Class):

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.systemRoot():

--

[M]java.lang.String java.util.prefs.Preferences.toString():

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.userNodeForPackage(java.lang.Class):
[M]java.util.prefs.Preferences java.util.prefs.Preferences.userNodeForPackage(java.lang.Class)
 [M]void org.javaan.Settings.<init>()
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.prefs.Preferences java.util.prefs.Preferences.userRoot():
[M]java.util.prefs.Preferences java.util.prefs.Preferences.userRoot()
 [M]void org.javaan.Settings.<init>(java.lang.String)

--

[M]javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext():

--

[M]void javax.swing.JComponent.<init>():

--

[M]void javax.swing.JComponent._paintImmediately(int,int,int,int):

--

[M]java.lang.Object javax.swing.JComponent.access$100():

--

[M]javax.accessibility.AccessibleContext javax.swing.JComponent.access$200(javax.swing.JComponent):

--

[M]javax.accessibility.AccessibleContext javax.swing.JComponent.access$300(javax.swing.JComponent):

--

[M]javax.accessibility.AccessibleContext javax.swing.JComponent.access$400(javax.swing.JComponent):

--

[M]javax.accessibility.AccessibleContext javax.swing.JComponent.access$500(javax.swing.JComponent):

--

[M]java.util.Hashtable javax.swing.JComponent.access$600():

--

[M]void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener):

--

[M]void javax.swing.JComponent.addNotify():

--

[M]void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener):

--

[M]void javax.swing.JComponent.adjustPaintFlags():

--

[M]boolean javax.swing.JComponent.alwaysOnTop():

--

[M]boolean javax.swing.JComponent.checkIfChildObscuredBySibling():

--

[M]void javax.swing.JComponent.clientPropertyChanged(java.lang.Object,java.lang.Object,java.lang.Object):

--

[M]void javax.swing.JComponent.compWriteObjectNotify():

--

[M]void javax.swing.JComponent.componentInputMapChanged(javax.swing.ComponentInputMap):

--

[M]void javax.swing.JComponent.computeVisibleRect(java.awt.Component,java.awt.Rectangle):

--

[M]void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle):

--

[M]boolean javax.swing.JComponent.contains(int,int):

--

[M]javax.swing.JToolTip javax.swing.JComponent.createToolTip():

--

[M]void javax.swing.JComponent.deregisterNextFocusableComponent():

--

[M]void javax.swing.JComponent.disable():

--

[M]void javax.swing.JComponent.dndDone():

--

[M]javax.swing.TransferHandler$DropLocation javax.swing.JComponent.dropLocationForPoint(java.awt.Point):

--

[M]void javax.swing.JComponent.enable():

--

[M]java.awt.Rectangle javax.swing.JComponent.fetchRectangle():

--

[M]void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean):

--

[M]void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char):

--

[M]void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int):

--

[M]void javax.swing.JComponent.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke):

--

[M]javax.swing.ActionMap javax.swing.JComponent.getActionMap():

--

[M]javax.swing.ActionMap javax.swing.JComponent.getActionMap(boolean):

--

[M]float javax.swing.JComponent.getAlignmentX():

--

[M]float javax.swing.JComponent.getAlignmentY():

--

[M]javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners():

--

[M]javax.swing.AncestorNotifier javax.swing.JComponent.getAncestorNotifier():

--

[M]boolean javax.swing.JComponent.getAutoscrolls():

--

[M]int javax.swing.JComponent.getBaseline(int,int):

--

[M]java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior():

--

[M]javax.swing.border.Border javax.swing.JComponent.getBorder():

--

[M]java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle):

--

[M]javax.swing.ArrayTable javax.swing.JComponent.getClientProperties():

--

[M]java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object):

--

[M]java.awt.Graphics javax.swing.JComponent.getComponentGraphics(java.awt.Graphics):

--

[M]javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu():

--

[M]int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke):

--

[M]boolean javax.swing.JComponent.getCreatedDoubleBuffer():

--

[M]int javax.swing.JComponent.getDebugGraphicsOptions():

--

[M]java.util.Locale javax.swing.JComponent.getDefaultLocale():

--

[M]boolean javax.swing.JComponent.getFlag(int):

--

[M]java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font):

--

[M]java.awt.Graphics javax.swing.JComponent.getGraphics():

--

[M]void javax.swing.JComponent.getGraphicsInvoked(java.awt.Component):

--

[M]int javax.swing.JComponent.getHeight():

--

[M]boolean javax.swing.JComponent.getInheritsPopupMenu():

--

[M]javax.swing.InputMap javax.swing.JComponent.getInputMap():

--

[M]javax.swing.InputMap javax.swing.JComponent.getInputMap(int):

--

[M]javax.swing.InputMap javax.swing.JComponent.getInputMap(int,boolean):

--

[M]javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier():

--

[M]java.awt.Insets javax.swing.JComponent.getInsets():

--

[M]java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets):

--

[M]java.util.EventListener[] javax.swing.JComponent.getListeners(java.lang.Class):

--

[M]java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point):

--

[M]java.util.Set javax.swing.JComponent.getManagingFocusBackwardTraversalKeys():

--

[M]java.util.Set javax.swing.JComponent.getManagingFocusForwardTraversalKeys():

--

[M]java.awt.Dimension javax.swing.JComponent.getMaximumSize():

--

[M]java.awt.Dimension javax.swing.JComponent.getMinimumSize():

--

[M]java.awt.Component javax.swing.JComponent.getNextFocusableComponent():

--

[M]int javax.swing.JComponent.getObscuredState(int,int,int,int,int):

--

[M]java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent):

--

[M]java.awt.Dimension javax.swing.JComponent.getPreferredSize():

--

[M]javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes():

--

[M]javax.swing.JRootPane javax.swing.JComponent.getRootPane():

--

[M]java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension):

--

[M]java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent):

--

[M]java.lang.String javax.swing.JComponent.getToolTipText():

--

[M]java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent):

--

[M]java.awt.Container javax.swing.JComponent.getTopLevelAncestor():

--

[M]javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler():

--

[M]java.lang.String javax.swing.JComponent.getUIClassID():

--

[M]boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget():

--

[M]java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners():

--

[M]java.awt.Rectangle javax.swing.JComponent.getVisibleRect():

--

[M]int javax.swing.JComponent.getWidth():

--

[M]byte javax.swing.JComponent.getWriteObjCounter(javax.swing.JComponent):

--

[M]int javax.swing.JComponent.getX():

--

[M]int javax.swing.JComponent.getY():

--

[M]void javax.swing.JComponent.grabFocus():

--

[M]void javax.swing.JComponent.hide():

--

[M]boolean javax.swing.JComponent.isComponentObtainingGraphicsFrom(java.awt.Component):

--

[M]boolean javax.swing.JComponent.isDoubleBuffered():

--

[M]boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component):

--

[M]boolean javax.swing.JComponent.isManagingFocus():

--

[M]boolean javax.swing.JComponent.isOpaque():

--

[M]boolean javax.swing.JComponent.isOptimizedDrawingEnabled():

--

[M]boolean javax.swing.JComponent.isPainting():

--

[M]boolean javax.swing.JComponent.isPaintingForPrint():

--

[M]boolean javax.swing.JComponent.isPaintingOrigin():

--

[M]boolean javax.swing.JComponent.isPaintingTile():

--

[M]boolean javax.swing.JComponent.isRequestFocusEnabled():

--

[M]boolean javax.swing.JComponent.isValidateRoot():

--

[M]void javax.swing.JComponent.lambda$revalidate$0():

--

[M]void javax.swing.JComponent.paint(java.awt.Graphics):

--

[M]void javax.swing.JComponent.paintBorder(java.awt.Graphics):

--

[M]void javax.swing.JComponent.paintChildren(java.awt.Graphics):

--

[M]void javax.swing.JComponent.paintComponent(java.awt.Graphics):

--

[M]void javax.swing.JComponent.paintForceDoubleBuffered(java.awt.Graphics):

--

[M]void javax.swing.JComponent.paintImmediately(int,int,int,int):

--

[M]void javax.swing.JComponent.paintImmediately(java.awt.Rectangle):

--

[M]void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics,int,int,int,int,int,int):

--

[M]java.lang.String javax.swing.JComponent.paramString():

--

[M]void javax.swing.JComponent.print(java.awt.Graphics):

--

[M]void javax.swing.JComponent.printAll(java.awt.Graphics):

--

[M]void javax.swing.JComponent.printBorder(java.awt.Graphics):

--

[M]void javax.swing.JComponent.printChildren(java.awt.Graphics):

--

[M]void javax.swing.JComponent.printComponent(java.awt.Graphics):

--

[M]void javax.swing.JComponent.processComponentKeyEvent(java.awt.event.KeyEvent):

--

[M]boolean javax.swing.JComponent.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,int,boolean):

--

[M]boolean javax.swing.JComponent.processKeyBindings(java.awt.event.KeyEvent,boolean):

--

[M]boolean javax.swing.JComponent.processKeyBindingsForAllComponents(java.awt.event.KeyEvent,java.awt.Container,boolean):

--

[M]void javax.swing.JComponent.processKeyEvent(java.awt.event.KeyEvent):

--

[M]void javax.swing.JComponent.processMouseEvent(java.awt.event.MouseEvent):

--

[M]void javax.swing.JComponent.processMouseMotionEvent(java.awt.event.MouseEvent):

--

[M]void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object):

--

[M]void javax.swing.JComponent.readObject(java.io.ObjectInputStream):

--

[M]boolean javax.swing.JComponent.rectangleIsObscured(int,int,int,int):

--

[M]void javax.swing.JComponent.recycleRectangle(java.awt.Rectangle):

--

[M]void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int):

--

[M]void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int):

--

[M]void javax.swing.JComponent.registerNextFocusableComponent():

--

[M]void javax.swing.JComponent.registerNextFocusableComponent(java.awt.Component):

--

[M]void javax.swing.JComponent.registerWithKeyboardManager(boolean):

--

[M]void javax.swing.JComponent.registerWithKeyboardManager(javax.swing.KeyStroke):

--

[M]void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener):

--

[M]void javax.swing.JComponent.removeNotify():

--

[M]void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener):

--

[M]void javax.swing.JComponent.repaint(java.awt.Rectangle):

--

[M]void javax.swing.JComponent.repaint(long,int,int,int,int):

--

[M]boolean javax.swing.JComponent.requestDefaultFocus():

--

[M]void javax.swing.JComponent.requestFocus():

--

[M]boolean javax.swing.JComponent.requestFocus(boolean):

--

[M]boolean javax.swing.JComponent.requestFocusInWindow():

--

[M]boolean javax.swing.JComponent.requestFocusInWindow(boolean):

--

[M]void javax.swing.JComponent.resetKeyboardActions():

--

[M]void javax.swing.JComponent.reshape(int,int,int,int):

--

[M]void javax.swing.JComponent.revalidate():

--

[M]java.awt.Graphics javax.swing.JComponent.safelyGetGraphics(java.awt.Component):

--

[M]java.awt.Graphics javax.swing.JComponent.safelyGetGraphics(java.awt.Component,java.awt.Component):

--

[M]void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle):

--

[M]void javax.swing.JComponent.setActionMap(javax.swing.ActionMap):

--

[M]void javax.swing.JComponent.setAlignmentX(float):

--

[M]void javax.swing.JComponent.setAlignmentY(float):

--

[M]void javax.swing.JComponent.setAutoscrolls(boolean):

--

[M]void javax.swing.JComponent.setBackground(java.awt.Color):

--

[M]void javax.swing.JComponent.setBorder(javax.swing.border.Border):

--

[M]void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu):

--

[M]void javax.swing.JComponent.setCreatedDoubleBuffer(boolean):

--

[M]void javax.swing.JComponent.setDebugGraphicsOptions(int):

--

[M]void javax.swing.JComponent.setDefaultLocale(java.util.Locale):

--

[M]void javax.swing.JComponent.setDoubleBuffered(boolean):

--

[M]java.lang.Object javax.swing.JComponent.setDropLocation(javax.swing.TransferHandler$DropLocation,java.lang.Object,boolean):

--

[M]void javax.swing.JComponent.setEnabled(boolean):

--

[M]void javax.swing.JComponent.setFlag(int,boolean):

--

[M]void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set):

--

[M]void javax.swing.JComponent.setFont(java.awt.Font):

--

[M]void javax.swing.JComponent.setForeground(java.awt.Color):

--

[M]void javax.swing.JComponent.setInheritsPopupMenu(boolean):

--

[M]void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap):

--

[M]void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier):

--

[M]void javax.swing.JComponent.setMaximumSize(java.awt.Dimension):

--

[M]void javax.swing.JComponent.setMinimumSize(java.awt.Dimension):

--

[M]void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component):

--

[M]void javax.swing.JComponent.setOpaque(boolean):

--

[M]void javax.swing.JComponent.setPaintingChild(java.awt.Component):

--

[M]void javax.swing.JComponent.setPreferredSize(java.awt.Dimension):

--

[M]void javax.swing.JComponent.setRequestFocusEnabled(boolean):

--

[M]void javax.swing.JComponent.setToolTipText(java.lang.String):

--

[M]void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler):

--

[M]void javax.swing.JComponent.setUI(javax.swing.plaf.ComponentUI):

--

[M]void javax.swing.JComponent.setUIProperty(java.lang.String,java.lang.Object):

--

[M]void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean):

--

[M]void javax.swing.JComponent.setVisible(boolean):

--

[M]void javax.swing.JComponent.setWriteObjCounter(javax.swing.JComponent,byte):

--

[M]int javax.swing.JComponent.shouldDebugGraphics():

--

[M]void javax.swing.JComponent.superProcessMouseMotionEvent(java.awt.event.MouseEvent):

--

[M]void javax.swing.JComponent.uninstallUIAndProperties():

--

[M]void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke):

--

[M]void javax.swing.JComponent.unregisterWithKeyboardManager():

--

[M]void javax.swing.JComponent.unregisterWithKeyboardManager(javax.swing.KeyStroke):

--

[M]void javax.swing.JComponent.update(java.awt.Graphics):

--

[M]void javax.swing.JComponent.updateUI():

--

[M]void javax.swing.JComponent.writeObject(java.io.ObjectOutputStream):

--

[M]void javax.swing.JFrame.<init>():

--

[M]void javax.swing.JFrame.<init>(java.awt.GraphicsConfiguration):

--

[M]void javax.swing.JFrame.<init>(java.lang.String):
[M]void javax.swing.JFrame.<init>(java.lang.String)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void javax.swing.JFrame.<init>(java.lang.String,java.awt.GraphicsConfiguration):

--

[M]void javax.swing.JFrame.addImpl(java.awt.Component,java.lang.Object,int):

--

[M]javax.swing.JRootPane javax.swing.JFrame.createRootPane():

--

[M]void javax.swing.JFrame.frameInit():

--

[M]javax.accessibility.AccessibleContext javax.swing.JFrame.getAccessibleContext():

--

[M]java.awt.Container javax.swing.JFrame.getContentPane():
[M]java.awt.Container javax.swing.JFrame.getContentPane()
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]int javax.swing.JFrame.getDefaultCloseOperation():

--

[M]java.awt.Component javax.swing.JFrame.getGlassPane():

--

[M]java.awt.Graphics javax.swing.JFrame.getGraphics():

--

[M]javax.swing.JMenuBar javax.swing.JFrame.getJMenuBar():

--

[M]javax.swing.JLayeredPane javax.swing.JFrame.getLayeredPane():

--

[M]javax.swing.JRootPane javax.swing.JFrame.getRootPane():

--

[M]javax.swing.TransferHandler javax.swing.JFrame.getTransferHandler():

--

[M]boolean javax.swing.JFrame.isDefaultLookAndFeelDecorated():

--

[M]boolean javax.swing.JFrame.isRootPaneCheckingEnabled():

--

[M]java.lang.String javax.swing.JFrame.paramString():

--

[M]void javax.swing.JFrame.processWindowEvent(java.awt.event.WindowEvent):

--

[M]void javax.swing.JFrame.remove(java.awt.Component):

--

[M]void javax.swing.JFrame.repaint(long,int,int,int,int):

--

[M]void javax.swing.JFrame.setContentPane(java.awt.Container):

--

[M]void javax.swing.JFrame.setDefaultCloseOperation(int):
[M]void javax.swing.JFrame.setDefaultCloseOperation(int)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void javax.swing.JFrame.setDefaultLookAndFeelDecorated(boolean):

--

[M]void javax.swing.JFrame.setGlassPane(java.awt.Component):

--

[M]void javax.swing.JFrame.setIconImage(java.awt.Image):

--

[M]void javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar):

--

[M]void javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane):

--

[M]void javax.swing.JFrame.setLayout(java.awt.LayoutManager):

--

[M]void javax.swing.JFrame.setRootPane(javax.swing.JRootPane):

--

[M]void javax.swing.JFrame.setRootPaneCheckingEnabled(boolean):

--

[M]void javax.swing.JFrame.setTransferHandler(javax.swing.TransferHandler):

--

[M]void javax.swing.JFrame.update(java.awt.Graphics):

--

[M]void javax.swing.JScrollPane.<init>():

--

[M]void javax.swing.JScrollPane.<init>(int,int):

--

[M]void javax.swing.JScrollPane.<init>(java.awt.Component):

--

[M]void javax.swing.JScrollPane.<init>(java.awt.Component,int,int):

--

[M]javax.swing.JScrollBar javax.swing.JScrollPane.createHorizontalScrollBar():

--

[M]javax.swing.JScrollBar javax.swing.JScrollPane.createVerticalScrollBar():

--

[M]javax.swing.JViewport javax.swing.JScrollPane.createViewport():

--

[M]javax.accessibility.AccessibleContext javax.swing.JScrollPane.getAccessibleContext():

--

[M]javax.swing.JViewport javax.swing.JScrollPane.getColumnHeader():

--

[M]java.awt.Component javax.swing.JScrollPane.getCorner(java.lang.String):

--

[M]javax.swing.JScrollBar javax.swing.JScrollPane.getHorizontalScrollBar():

--

[M]int javax.swing.JScrollPane.getHorizontalScrollBarPolicy():

--

[M]javax.swing.JViewport javax.swing.JScrollPane.getRowHeader():

--

[M]javax.swing.plaf.ScrollPaneUI javax.swing.JScrollPane.getUI():

--

[M]java.lang.String javax.swing.JScrollPane.getUIClassID():

--

[M]javax.swing.JScrollBar javax.swing.JScrollPane.getVerticalScrollBar():

--

[M]int javax.swing.JScrollPane.getVerticalScrollBarPolicy():

--

[M]javax.swing.JViewport javax.swing.JScrollPane.getViewport():

--

[M]javax.swing.border.Border javax.swing.JScrollPane.getViewportBorder():

--

[M]java.awt.Rectangle javax.swing.JScrollPane.getViewportBorderBounds():

--

[M]boolean javax.swing.JScrollPane.isValidateRoot():

--

[M]boolean javax.swing.JScrollPane.isWheelScrollingEnabled():

--

[M]java.lang.String javax.swing.JScrollPane.paramString():

--

[M]void javax.swing.JScrollPane.setColumnHeader(javax.swing.JViewport):

--

[M]void javax.swing.JScrollPane.setColumnHeaderView(java.awt.Component):

--

[M]void javax.swing.JScrollPane.setComponentOrientation(java.awt.ComponentOrientation):

--

[M]void javax.swing.JScrollPane.setCorner(java.lang.String,java.awt.Component):

--

[M]void javax.swing.JScrollPane.setHorizontalScrollBar(javax.swing.JScrollBar):

--

[M]void javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int):

--

[M]void javax.swing.JScrollPane.setLayout(java.awt.LayoutManager):

--

[M]void javax.swing.JScrollPane.setRowHeader(javax.swing.JViewport):

--

[M]void javax.swing.JScrollPane.setRowHeaderView(java.awt.Component):

--

[M]void javax.swing.JScrollPane.setUI(javax.swing.plaf.ScrollPaneUI):

--

[M]void javax.swing.JScrollPane.setVerticalScrollBar(javax.swing.JScrollBar):

--

[M]void javax.swing.JScrollPane.setVerticalScrollBarPolicy(int):

--

[M]void javax.swing.JScrollPane.setViewport(javax.swing.JViewport):

--

[M]void javax.swing.JScrollPane.setViewportBorder(javax.swing.border.Border):

--

[M]void javax.swing.JScrollPane.setViewportView(java.awt.Component):

--

[M]void javax.swing.JScrollPane.setWheelScrollingEnabled(boolean):

--

[M]void javax.swing.JScrollPane.updateUI():

--

[M]void javax.swing.JScrollPane.writeObject(java.io.ObjectOutputStream):

--

[M]java.awt.Container javax.swing.RootPaneContainer.getContentPane():

--

[M]java.awt.Component javax.swing.RootPaneContainer.getGlassPane():

--

[M]javax.swing.JLayeredPane javax.swing.RootPaneContainer.getLayeredPane():

--

[M]javax.swing.JRootPane javax.swing.RootPaneContainer.getRootPane():

--

[M]void javax.swing.RootPaneContainer.setContentPane(java.awt.Container):

--

[M]void javax.swing.RootPaneContainer.setGlassPane(java.awt.Component):

--

[M]void javax.swing.RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane):

--

[M]javax.swing.TransferHandler javax.swing.TransferHandler$HasGetTransferHandler.getTransferHandler():

--

[M]void org.apache.commons.cli.CommandLine.addArg(java.lang.String):

--

[M]void org.apache.commons.cli.CommandLine.addOption(org.apache.commons.cli.Option):

--

[M]java.util.List org.apache.commons.cli.CommandLine.getArgList():

--

[M]java.lang.String[] org.apache.commons.cli.CommandLine.getArgs():
[M]java.lang.String[] org.apache.commons.cli.CommandLine.getArgs()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.Object org.apache.commons.cli.CommandLine.getOptionObject(char):

--

[M]java.lang.Object org.apache.commons.cli.CommandLine.getOptionObject(java.lang.String):

--

[M]java.util.Properties org.apache.commons.cli.CommandLine.getOptionProperties(java.lang.String):

--

[M]java.lang.String org.apache.commons.cli.CommandLine.getOptionValue(char):

--

[M]java.lang.String org.apache.commons.cli.CommandLine.getOptionValue(char,java.lang.String):

--

[M]java.lang.String org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String):
[M]java.lang.String org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String)
 [M]java.lang.String org.javaan.CommandContext.getFilterCriteria()
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.lang.String org.javaan.CommandContext.getMethodFilterCriteria()
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String,java.lang.String):

--

[M]java.lang.String[] org.apache.commons.cli.CommandLine.getOptionValues(char):

--

[M]java.lang.String[] org.apache.commons.cli.CommandLine.getOptionValues(java.lang.String):

--

[M]org.apache.commons.cli.Option[] org.apache.commons.cli.CommandLine.getOptions():

--

[M]java.lang.Object org.apache.commons.cli.CommandLine.getParsedOptionValue(java.lang.String):

--

[M]boolean org.apache.commons.cli.CommandLine.hasOption(char):

--

[M]boolean org.apache.commons.cli.CommandLine.hasOption(java.lang.String):
[M]boolean org.apache.commons.cli.CommandLine.hasOption(java.lang.String)
 [M]boolean org.javaan.CommandContext.isPrintLeaves()
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.CommandContext.isResolveMethodImplementations()
  [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext.getAdditionalTypeInformation()
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.CommandContext.isResolveDependenciesInClassHierarchy()
 [M]boolean org.javaan.CommandContext.hasFilterCriteria()
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]boolean org.javaan.CommandContext.isDisplay2dGraph()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.Iterator org.apache.commons.cli.CommandLine.iterator():

--

[M]org.apache.commons.cli.Option org.apache.commons.cli.CommandLine.resolveOption(java.lang.String):

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options,java.lang.String[]):

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.CommandLineParser.parse(org.apache.commons.cli.Options,java.lang.String[],boolean):

--

[M]void org.apache.commons.cli.DefaultParser.<init>():
[M]void org.apache.commons.cli.DefaultParser.<init>()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.apache.commons.cli.DefaultParser.checkRequiredArgs():

--

[M]void org.apache.commons.cli.DefaultParser.checkRequiredOptions():

--

[M]java.lang.String org.apache.commons.cli.DefaultParser.getLongPrefix(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleConcatenatedOptions(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleLongOption(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleLongOptionWithEqual(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleLongOptionWithoutEqual(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleOption(org.apache.commons.cli.Option):

--

[M]void org.apache.commons.cli.DefaultParser.handleProperties(java.util.Properties):

--

[M]void org.apache.commons.cli.DefaultParser.handleShortAndLongOption(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleToken(java.lang.String):

--

[M]void org.apache.commons.cli.DefaultParser.handleUnknownToken(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isArgument(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isJavaProperty(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isLongOption(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isNegativeNumber(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isOption(java.lang.String):

--

[M]boolean org.apache.commons.cli.DefaultParser.isShortOption(java.lang.String):

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options,java.lang.String[]):
[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options,java.lang.String[])
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options,java.lang.String[],boolean):

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties):

--

[M]org.apache.commons.cli.CommandLine org.apache.commons.cli.DefaultParser.parse(org.apache.commons.cli.Options,java.lang.String[],java.util.Properties,boolean):

--

[M]void org.apache.commons.cli.DefaultParser.updateRequiredOptions(org.apache.commons.cli.Option):

--

[M]void org.apache.commons.cli.HelpFormatter.<init>():
[M]void org.apache.commons.cli.HelpFormatter.<init>()
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]void org.apache.commons.cli.HelpFormatter.appendOption(java.lang.StringBuffer,org.apache.commons.cli.Option,boolean):

--

[M]void org.apache.commons.cli.HelpFormatter.appendOptionGroup(java.lang.StringBuffer,org.apache.commons.cli.OptionGroup):

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.createPadding(int):

--

[M]int org.apache.commons.cli.HelpFormatter.findWrapPos(java.lang.String,int,int):

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getArgName():

--

[M]int org.apache.commons.cli.HelpFormatter.getDescPadding():

--

[M]int org.apache.commons.cli.HelpFormatter.getLeftPadding():

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getLongOptPrefix():

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getLongOptSeparator():

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getNewLine():

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getOptPrefix():

--

[M]java.util.Comparator org.apache.commons.cli.HelpFormatter.getOptionComparator():

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.getSyntaxPrefix():

--

[M]int org.apache.commons.cli.HelpFormatter.getWidth():

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String):
[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String)
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,java.lang.String,org.apache.commons.cli.Options,java.lang.String,boolean):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,org.apache.commons.cli.Options):

--

[M]void org.apache.commons.cli.HelpFormatter.printHelp(java.lang.String,org.apache.commons.cli.Options,boolean):

--

[M]void org.apache.commons.cli.HelpFormatter.printOptions(java.io.PrintWriter,int,org.apache.commons.cli.Options,int,int):

--

[M]void org.apache.commons.cli.HelpFormatter.printUsage(java.io.PrintWriter,int,java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.printUsage(java.io.PrintWriter,int,java.lang.String,org.apache.commons.cli.Options):

--

[M]void org.apache.commons.cli.HelpFormatter.printWrapped(java.io.PrintWriter,int,int,java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.printWrapped(java.io.PrintWriter,int,java.lang.String):

--

[M]java.lang.StringBuffer org.apache.commons.cli.HelpFormatter.renderOptions(java.lang.StringBuffer,int,org.apache.commons.cli.Options,int,int):

--

[M]java.lang.StringBuffer org.apache.commons.cli.HelpFormatter.renderWrappedText(java.lang.StringBuffer,int,int,java.lang.String):

--

[M]java.lang.Appendable org.apache.commons.cli.HelpFormatter.renderWrappedTextBlock(java.lang.StringBuffer,int,int,java.lang.String):

--

[M]java.lang.String org.apache.commons.cli.HelpFormatter.rtrim(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setArgName(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setDescPadding(int):

--

[M]void org.apache.commons.cli.HelpFormatter.setLeftPadding(int):

--

[M]void org.apache.commons.cli.HelpFormatter.setLongOptPrefix(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setLongOptSeparator(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setNewLine(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setOptPrefix(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setOptionComparator(java.util.Comparator):

--

[M]void org.apache.commons.cli.HelpFormatter.setSyntaxPrefix(java.lang.String):

--

[M]void org.apache.commons.cli.HelpFormatter.setWidth(int):
[M]void org.apache.commons.cli.HelpFormatter.setWidth(int)
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]void org.apache.commons.cli.Option.<init>(java.lang.String,boolean,java.lang.String):

--

[M]void org.apache.commons.cli.Option.<init>(java.lang.String,java.lang.String):

--

[M]void org.apache.commons.cli.Option.<init>(java.lang.String,java.lang.String,boolean,java.lang.String):

--

[M]boolean org.apache.commons.cli.Option.acceptsArg():

--

[M]void org.apache.commons.cli.Option.add(java.lang.String):

--

[M]boolean org.apache.commons.cli.Option.addValue(java.lang.String):

--

[M]void org.apache.commons.cli.Option.addValueForProcessing(java.lang.String):

--

[M]org.apache.commons.cli.Option$Builder org.apache.commons.cli.Option.builder():

--

[M]org.apache.commons.cli.Option$Builder org.apache.commons.cli.Option.builder(java.lang.String):

--

[M]void org.apache.commons.cli.Option.clearValues():

--

[M]java.lang.Object org.apache.commons.cli.Option.clone():

--

[M]boolean org.apache.commons.cli.Option.equals(java.lang.Object):

--

[M]java.lang.String org.apache.commons.cli.Option.getArgName():

--

[M]int org.apache.commons.cli.Option.getArgs():

--

[M]java.lang.String org.apache.commons.cli.Option.getDescription():

--

[M]int org.apache.commons.cli.Option.getId():

--

[M]java.lang.String org.apache.commons.cli.Option.getKey():

--

[M]java.lang.String org.apache.commons.cli.Option.getLongOpt():
[M]java.lang.String org.apache.commons.cli.Option.getLongOpt()
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()

--

[M]java.lang.String org.apache.commons.cli.Option.getOpt():
[M]java.lang.String org.apache.commons.cli.Option.getOpt()
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()
 [M]boolean org.javaan.commands.BaseSetOptionsCommand.optionExsists(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
   [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)

--

[M]java.lang.Object org.apache.commons.cli.Option.getType():

--

[M]java.lang.String org.apache.commons.cli.Option.getValue():

--

[M]java.lang.String org.apache.commons.cli.Option.getValue(int):

--

[M]java.lang.String org.apache.commons.cli.Option.getValue(java.lang.String):

--

[M]char org.apache.commons.cli.Option.getValueSeparator():

--

[M]java.lang.String[] org.apache.commons.cli.Option.getValues():

--

[M]java.util.List org.apache.commons.cli.Option.getValuesList():

--

[M]boolean org.apache.commons.cli.Option.hasArg():

--

[M]boolean org.apache.commons.cli.Option.hasArgName():

--

[M]boolean org.apache.commons.cli.Option.hasArgs():

--

[M]boolean org.apache.commons.cli.Option.hasLongOpt():

--

[M]boolean org.apache.commons.cli.Option.hasNoValues():

--

[M]boolean org.apache.commons.cli.Option.hasOptionalArg():

--

[M]boolean org.apache.commons.cli.Option.hasValueSeparator():

--

[M]int org.apache.commons.cli.Option.hashCode():

--

[M]boolean org.apache.commons.cli.Option.isRequired():

--

[M]void org.apache.commons.cli.Option.processValue(java.lang.String):

--

[M]boolean org.apache.commons.cli.Option.requiresArg():

--

[M]void org.apache.commons.cli.Option.setArgName(java.lang.String):

--

[M]void org.apache.commons.cli.Option.setArgs(int):

--

[M]void org.apache.commons.cli.Option.setDescription(java.lang.String):

--

[M]void org.apache.commons.cli.Option.setLongOpt(java.lang.String):

--

[M]void org.apache.commons.cli.Option.setOptionalArg(boolean):

--

[M]void org.apache.commons.cli.Option.setRequired(boolean):

--

[M]void org.apache.commons.cli.Option.setType(java.lang.Class):

--

[M]void org.apache.commons.cli.Option.setType(java.lang.Object):

--

[M]void org.apache.commons.cli.Option.setValueSeparator(char):

--

[M]java.lang.String org.apache.commons.cli.Option.toString():

--

[M]void org.apache.commons.cli.OptionGroup.<init>():
[M]void org.apache.commons.cli.OptionGroup.<init>()
 [M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]org.apache.commons.cli.OptionGroup org.apache.commons.cli.OptionGroup.addOption(org.apache.commons.cli.Option):
[M]org.apache.commons.cli.OptionGroup org.apache.commons.cli.OptionGroup.addOption(org.apache.commons.cli.Option)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]java.util.Collection org.apache.commons.cli.OptionGroup.getNames():

--

[M]java.util.Collection org.apache.commons.cli.OptionGroup.getOptions():

--

[M]java.lang.String org.apache.commons.cli.OptionGroup.getSelected():

--

[M]boolean org.apache.commons.cli.OptionGroup.isRequired():

--

[M]void org.apache.commons.cli.OptionGroup.setRequired(boolean):

--

[M]void org.apache.commons.cli.OptionGroup.setSelected(org.apache.commons.cli.Option):

--

[M]java.lang.String org.apache.commons.cli.OptionGroup.toString():

--

[M]void org.apache.commons.cli.Options.<init>():
[M]void org.apache.commons.cli.Options.<init>()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(java.lang.String,boolean,java.lang.String):

--

[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(java.lang.String,java.lang.String):

--

[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(java.lang.String,java.lang.String,boolean,java.lang.String):
[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(java.lang.String,java.lang.String,boolean,java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option):
[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListPackages.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ShowDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ShowPackageDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.BaseCallGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOptionGroup(org.apache.commons.cli.OptionGroup):
[M]org.apache.commons.cli.Options org.apache.commons.cli.Options.addOptionGroup(org.apache.commons.cli.OptionGroup)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]java.util.List org.apache.commons.cli.Options.getMatchingOptions(java.lang.String):

--

[M]org.apache.commons.cli.Option org.apache.commons.cli.Options.getOption(java.lang.String):

--

[M]org.apache.commons.cli.OptionGroup org.apache.commons.cli.Options.getOptionGroup(org.apache.commons.cli.Option):

--

[M]java.util.Collection org.apache.commons.cli.Options.getOptionGroups():

--

[M]java.util.Collection org.apache.commons.cli.Options.getOptions():

--

[M]java.util.List org.apache.commons.cli.Options.getRequiredOptions():

--

[M]boolean org.apache.commons.cli.Options.hasLongOption(java.lang.String):

--

[M]boolean org.apache.commons.cli.Options.hasOption(java.lang.String):

--

[M]boolean org.apache.commons.cli.Options.hasShortOption(java.lang.String):

--

[M]java.util.List org.apache.commons.cli.Options.helpOptions():

--

[M]java.lang.String org.apache.commons.cli.Options.toString():

--

[M]void org.apache.commons.cli.ParseException.<init>(java.lang.String):

--

[M]void org.apache.commons.lang3.text.WordUtils.<init>():

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String,char[]):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String,char[]):

--

[M]boolean org.apache.commons.lang3.text.WordUtils.containsAllWords(java.lang.CharSequence,java.lang.CharSequence[]):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.initials(java.lang.String):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.initials(java.lang.String,char[]):

--

[M]boolean org.apache.commons.lang3.text.WordUtils.isDelimiter(char,char[]):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.swapCase(java.lang.String):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String,char[]):

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String,int):
[M]java.lang.String org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String,int)
 [M]void org.javaan.JavaanCli.printParagraph(java.lang.String)
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String,int,java.lang.String,boolean):
[M]java.lang.String org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String,int,java.lang.String,boolean)
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String):

--

[M]org.apache.commons.cli.Options org.javaan.Command.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.Command.buildCommandLineOptions(org.apache.commons.cli.Options)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]org.javaan.ReturnCodes org.javaan.Command.execute(org.javaan.CommandContext):
[M]org.javaan.ReturnCodes org.javaan.Command.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.javaan.Command.getDescription():
[M]java.lang.String org.javaan.Command.getDescription()
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]java.lang.String org.javaan.Command.getHelpCommandLine():
[M]java.lang.String org.javaan.Command.getHelpCommandLine()
 [M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]java.lang.String org.javaan.Command.getName():
[M]java.lang.String org.javaan.Command.getName()
 [M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()
   [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]void org.javaan.CommandContext.<init>(org.apache.commons.cli.CommandLine,java.lang.String[],org.javaan.Settings):
[M]void org.javaan.CommandContext.<init>(org.apache.commons.cli.CommandLine,java.lang.String[],org.javaan.Settings)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext.getAdditionalTypeInformation():
[M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext.getAdditionalTypeInformation()
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String[] org.javaan.CommandContext.getArguments():
[M]java.lang.String[] org.javaan.CommandContext.getArguments()
 [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.lang.String org.javaan.CommandContext.getFilterCriteria():
[M]java.lang.String org.javaan.CommandContext.getFilterCriteria()
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.CommandContext.getMethodFilterCriteria():
[M]java.lang.String org.javaan.CommandContext.getMethodFilterCriteria()
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.ReturnCodes org.javaan.CommandContext.getReturnCode():
[M]org.javaan.ReturnCodes org.javaan.CommandContext.getReturnCode()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]org.javaan.Settings org.javaan.CommandContext.getSettings():
[M]org.javaan.Settings org.javaan.CommandContext.getSettings()
 [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)

--

[M]boolean org.javaan.CommandContext.hasFilterCriteria():
[M]boolean org.javaan.CommandContext.hasFilterCriteria()
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.CommandContext.isDisplay2dGraph():
[M]boolean org.javaan.CommandContext.isDisplay2dGraph()
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.CommandContext.isPrintLeaves():
[M]boolean org.javaan.CommandContext.isPrintLeaves()
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.CommandContext.isResolveDependenciesInClassHierarchy():
[M]boolean org.javaan.CommandContext.isResolveDependenciesInClassHierarchy()
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.CommandContext.isResolveMethodImplementations():
[M]boolean org.javaan.CommandContext.isResolveMethodImplementations()
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.CommandContext.setReturnCode(org.javaan.ReturnCodes):
[M]void org.javaan.CommandContext.setReturnCode(org.javaan.ReturnCodes)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.CommandContext$AdditionalTypeInformation.<clinit>():
[M]void org.javaan.CommandContext$AdditionalTypeInformation.<clinit>()

--

[M]void org.javaan.CommandContext$AdditionalTypeInformation.<init>(java.lang.String,int):
[M]void org.javaan.CommandContext$AdditionalTypeInformation.<init>(java.lang.String,int)
 [M]void org.javaan.CommandContext$AdditionalTypeInformation.<clinit>()

--

[M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext$AdditionalTypeInformation.valueOf(java.lang.String):
[M]org.javaan.CommandContext$AdditionalTypeInformation org.javaan.CommandContext$AdditionalTypeInformation.valueOf(java.lang.String)

--

[M]org.javaan.CommandContext$AdditionalTypeInformation[] org.javaan.CommandContext$AdditionalTypeInformation.values():
[M]org.javaan.CommandContext$AdditionalTypeInformation[] org.javaan.CommandContext$AdditionalTypeInformation.values()
 [M]void org.javaan.commands.ListInterfaces$1.<clinit>()
 [M]void org.javaan.commands.ListClasses$1.<clinit>()

--

[M]void org.javaan.CommandMap.<init>():
[M]void org.javaan.CommandMap.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.CommandMap.addCommand(org.javaan.Command):
[M]void org.javaan.CommandMap.addCommand(org.javaan.Command)
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String):
[M]org.javaan.Command org.javaan.CommandMap.getCommand(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.List org.javaan.CommandMap.getCommands():
[M]java.util.List org.javaan.CommandMap.getCommands()
 [M]int org.javaan.JavaanCli.maxCommandNameLength()
  [M]java.lang.String org.javaan.JavaanCli.createIndent()
   [M]void org.javaan.JavaanCli.printUsage(boolean)
    [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
     [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings):
[M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
 [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.Graph2dDisplay$1.<init>(org.javaan.Graph2dDisplay,com.mxgraph.view.mxGraph):
[M]void org.javaan.Graph2dDisplay$1.<init>(org.javaan.Graph2dDisplay,com.mxgraph.view.mxGraph)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.Graph2dDisplay$1.createHandlers():
[M]void org.javaan.Graph2dDisplay$1.createHandlers()

--

[M]void org.javaan.Graph2dDisplay$2.<init>(org.javaan.Graph2dDisplay,org.javaan.Settings,javax.swing.JFrame):
[M]void org.javaan.Graph2dDisplay$2.<init>(org.javaan.Graph2dDisplay,org.javaan.Settings,javax.swing.JFrame)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent):
[M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]void org.javaan.JavaanCli.<clinit>():
[M]void org.javaan.JavaanCli.<clinit>()

--

[M]void org.javaan.JavaanCli.<init>(java.lang.String[],org.javaan.CommandMap):
[M]void org.javaan.JavaanCli.<init>(java.lang.String[],org.javaan.CommandMap)
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.javaan.JavaanCli.createIndent():
[M]java.lang.String org.javaan.JavaanCli.createIndent()
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute():
[M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String):
[M]java.lang.String org.javaan.JavaanCli.formatCommandName(java.lang.String,java.lang.String)
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.JavaanCli.main(java.lang.String[]):
[M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]int org.javaan.JavaanCli.maxCommandNameLength():
[M]int org.javaan.JavaanCli.maxCommandNameLength()
 [M]java.lang.String org.javaan.JavaanCli.createIndent()
  [M]void org.javaan.JavaanCli.printUsage(boolean)
   [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
    [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options):
[M]void org.javaan.JavaanCli.printCommandUsage(org.javaan.Command,org.apache.commons.cli.Options)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.JavaanCli.printUsage(boolean)

--

[M]void org.javaan.JavaanCli.printParagraph(java.lang.String):
[M]void org.javaan.JavaanCli.printParagraph(java.lang.String)
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.JavaanCli.printSeparator():
[M]void org.javaan.JavaanCli.printSeparator()
 [M]void org.javaan.JavaanCli.printUsage(boolean)
  [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.JavaanCli.printUsage(boolean):
[M]void org.javaan.JavaanCli.printUsage(boolean)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level):
[M]void org.javaan.JavaanCli.setLoggerLevel(java.util.logging.Level)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.ReturnCodes.<clinit>():
[M]void org.javaan.ReturnCodes.<clinit>()

--

[M]void org.javaan.ReturnCodes.<init>(java.lang.String,int,int):
[M]void org.javaan.ReturnCodes.<init>(java.lang.String,int,int)
 [M]void org.javaan.ReturnCodes.<clinit>()

--

[M]int org.javaan.ReturnCodes.getValue():
[M]int org.javaan.ReturnCodes.getValue()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.ReturnCodes org.javaan.ReturnCodes.valueOf(java.lang.String):
[M]org.javaan.ReturnCodes org.javaan.ReturnCodes.valueOf(java.lang.String)

--

[M]org.javaan.ReturnCodes[] org.javaan.ReturnCodes.values():
[M]org.javaan.ReturnCodes[] org.javaan.ReturnCodes.values()

--

[M]void org.javaan.Settings.<init>():
[M]void org.javaan.Settings.<init>()
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]void org.javaan.Settings.<init>(java.lang.String):
[M]void org.javaan.Settings.<init>(java.lang.String)

--

[M]void org.javaan.Settings.disableOption(java.lang.String):
[M]void org.javaan.Settings.disableOption(java.lang.String)
 [M]void org.javaan.commands.ResetOptions.processOption(org.javaan.Settings,java.lang.String)

--

[M]void org.javaan.Settings.enableOption(java.lang.String):
[M]void org.javaan.Settings.enableOption(java.lang.String)
 [M]void org.javaan.commands.SetOptions.processOption(org.javaan.Settings,java.lang.String)

--

[M]boolean org.javaan.Settings.isDisplay2dGraph():
[M]boolean org.javaan.Settings.isDisplay2dGraph()
 [M]boolean org.javaan.CommandContext.isDisplay2dGraph()
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.Settings.isOptionEnabled(java.lang.String):
[M]boolean org.javaan.Settings.isOptionEnabled(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]boolean org.javaan.Settings.isResolveDependenciesInClassHierarchy():
[M]boolean org.javaan.Settings.isResolveDependenciesInClassHierarchy()
 [M]boolean org.javaan.CommandContext.isResolveDependenciesInClassHierarchy()
  [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.Settings.isResolveMethodImplementations():
[M]boolean org.javaan.Settings.isResolveMethodImplementations()
 [M]boolean org.javaan.CommandContext.isResolveMethodImplementations()
  [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame):
[M]void org.javaan.Settings.putGraph2dFrameLocationAndSize(javax.swing.JFrame)
 [M]void org.javaan.Graph2dDisplay$2.windowClosing(java.awt.event.WindowEvent)

--

[M]void org.javaan.Settings.setGraph2dFrameLocationAndSize(javax.swing.JFrame):
[M]void org.javaan.Settings.setGraph2dFrameLocationAndSize(javax.swing.JFrame)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.bytecode.CallGraphBuilder.<init>(org.javaan.model.ClassContext,boolean,boolean):
[M]void org.javaan.bytecode.CallGraphBuilder.<init>(org.javaan.model.ClassContext,boolean,boolean)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.bytecode.CallGraphBuilder.access$000(org.javaan.bytecode.CallGraphBuilder,org.javaan.model.Method,org.apache.bcel.generic.InvokeInstruction,org.apache.bcel.generic.ConstantPoolGen):

--

[M]void org.javaan.bytecode.CallGraphBuilder.addMethodCall(org.javaan.model.Method,org.apache.bcel.generic.InvokeInstruction,org.apache.bcel.generic.ConstantPoolGen):

--

[M]org.javaan.model.CallGraph org.javaan.bytecode.CallGraphBuilder.build():
[M]org.javaan.model.CallGraph org.javaan.bytecode.CallGraphBuilder.build()
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.Method org.javaan.bytecode.CallGraphBuilder.getMethod(org.apache.bcel.generic.InvokeInstruction,org.apache.bcel.generic.ConstantPoolGen):

--

[M]java.util.Set org.javaan.bytecode.CallGraphBuilder.getMissingTypes():
[M]java.util.Set org.javaan.bytecode.CallGraphBuilder.getMissingTypes()
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.bytecode.CallGraphBuilder.processClasses():

--

[M]void org.javaan.bytecode.ClassContextBuilder.<init>(java.util.List):
[M]void org.javaan.bytecode.ClassContextBuilder.<init>(java.util.List)
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.bytecode.ClassContextBuilder.addClass(org.javaan.model.Clazz,org.apache.bcel.classfile.JavaClass):

--

[M]void org.javaan.bytecode.ClassContextBuilder.addInterface(org.javaan.model.Interface,org.apache.bcel.classfile.JavaClass):

--

[M]void org.javaan.bytecode.ClassContextBuilder.addMethods(org.javaan.model.Type,org.apache.bcel.classfile.JavaClass):

--

[M]void org.javaan.bytecode.ClassContextBuilder.addType(org.javaan.model.Type):

--

[M]org.javaan.model.ClassContext org.javaan.bytecode.ClassContextBuilder.build():
[M]org.javaan.model.ClassContext org.javaan.bytecode.ClassContextBuilder.build()
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.bytecode.ClassContextBuilder.getMissingTypes():
[M]java.util.Set org.javaan.bytecode.ClassContextBuilder.getMissingTypes()
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.bytecode.JarFileLoader.<init>():
[M]void org.javaan.bytecode.JarFileLoader.<init>()
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.util.List org.javaan.bytecode.JarFileLoader.loadJavaClasses(java.lang.String[]):
[M]java.util.List org.javaan.bytecode.JarFileLoader.loadJavaClasses(java.lang.String[])
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.javaan.bytecode.JarFileLoader.processEntry(java.lang.String,java.lang.String,java.util.jar.JarFile,java.util.List,java.util.jar.JarEntry):

--

[M]void org.javaan.bytecode.JarFileLoader.processJar(java.lang.String,java.io.InputStream,java.util.List):

--

[M]void org.javaan.bytecode.JarFileLoader.processJar(java.lang.String,java.lang.String,java.util.jar.JarFile,java.util.List):

--

[M]void org.javaan.commands.BaseCallGraphCommand.<init>():
[M]void org.javaan.commands.BaseCallGraphCommand.<init>()
 [M]void org.javaan.commands.ShowCallerGraph.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.ShowCalleeGraph.<init>()

--

[M]org.apache.commons.cli.Options org.javaan.commands.BaseCallGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.BaseCallGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]java.util.Set org.javaan.commands.BaseCallGraphCommand.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method):
[M]java.util.Set org.javaan.commands.BaseCallGraphCommand.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseCallGraphCommand.getFormatter():
[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseCallGraphCommand.getFormatter()
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String):
[M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter):
[M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter):
[M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseCallGraphCommand.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor):
[M]void org.javaan.commands.BaseCallGraphCommand.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>():
[M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>()
 [M]void org.javaan.commands.ShowUsingGraph.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.ShowUsedGraph.<init>()

--

[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle():
[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String):
[M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseClassDependencyGraphCommand.getTypeFormatter():
[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseClassDependencyGraphCommand.getTypeFormatter()
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]void org.javaan.commands.BaseCommand.<clinit>():
[M]void org.javaan.commands.BaseCommand.<clinit>()

--

[M]void org.javaan.commands.BaseCommand.<init>():
[M]void org.javaan.commands.BaseCommand.<init>()
 [M]void org.javaan.commands.ListDuplicates.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.BaseSetOptionsCommand.<init>()
  [M]void org.javaan.commands.ResetOptions.<init>()
  [M]void org.javaan.commands.SetOptions.<init>()
 [M]void org.javaan.commands.BaseTypeLoadingCommand.<init>()
  [M]void org.javaan.commands.ListPackages.<init>()
  [M]void org.javaan.commands.ListMissingTypes.<init>()
  [M]void org.javaan.commands.ListClasses.<init>()
  [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.<init>()
  [M]void org.javaan.commands.ListInterfaces.<init>()
  [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.<init>()
  [M]void org.javaan.commands.BaseCallGraphCommand.<init>()
   [M]void org.javaan.commands.ShowCallerGraph.<init>()
   [M]void org.javaan.commands.ShowCalleeGraph.<init>()
  [M]void org.javaan.commands.BaseDependencyGraphCommand.<init>()
   [M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>()
    [M]void org.javaan.commands.ShowUsingGraph.<init>()
    [M]void org.javaan.commands.ShowUsedGraph.<init>()
   [M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>()
    [M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
    [M]void org.javaan.commands.ShowPackageUsedGraph.<init>()

--

[M]java.lang.String org.javaan.commands.BaseCommand.getHelpCommandLine():
[M]java.lang.String org.javaan.commands.BaseCommand.getHelpCommandLine()

--

[M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[]):
[M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
 [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand.<init>():
[M]void org.javaan.commands.BaseDependencyGraphCommand.<init>()
 [M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>()
  [M]void org.javaan.commands.ShowUsingGraph.<init>()
   [M]void org.javaan.JavaanCli.main(java.lang.String[])
  [M]void org.javaan.commands.ShowUsedGraph.<init>()
 [M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>()
  [M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
  [M]void org.javaan.commands.ShowPackageUsedGraph.<init>()

--

[M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.BaseDependencyGraphCommand.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseDependencyGraphCommand.getConsoleDependencyFormatter():
[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseDependencyGraphCommand.getConsoleDependencyFormatter()
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.GraphView org.javaan.commands.BaseDependencyGraphCommand.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set):
[M]org.javaan.model.GraphView org.javaan.commands.BaseDependencyGraphCommand.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseDependencyGraphCommand.getDependencyGraphCellStyle():
[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseDependencyGraphCommand.getDependencyGraphCellStyle()
 [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.util.Collection org.javaan.commands.BaseDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String):
[M]java.util.Collection org.javaan.commands.BaseDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseDependencyGraphCommand.getTypeFormatter():
[M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseDependencyGraphCommand.getTypeFormatter()
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter):
[M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter):
[M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand$1.<init>(org.javaan.commands.BaseDependencyGraphCommand,org.javaan.model.GraphView,org.javaan.CommandContext):
[M]void org.javaan.commands.BaseDependencyGraphCommand$1.<init>(org.javaan.commands.BaseDependencyGraphCommand,org.javaan.model.GraphView,org.javaan.CommandContext)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.BaseDependencyGraphCommand$1.run():
[M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>():
[M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>()
 [M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.ShowPackageUsedGraph.<init>()

--

[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle():
[M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String):
[M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]org.javaan.print.ObjectFormatter org.javaan.commands.BasePackageDependencyGraphCommand.getTypeFormatter():
[M]org.javaan.print.ObjectFormatter org.javaan.commands.BasePackageDependencyGraphCommand.getTypeFormatter()
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]void org.javaan.commands.BaseSetOptionsCommand.<init>():
[M]void org.javaan.commands.BaseSetOptionsCommand.<init>()
 [M]void org.javaan.commands.ResetOptions.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.SetOptions.<init>()

--

[M]org.apache.commons.cli.Options org.javaan.commands.BaseSetOptionsCommand.buildCommandLineOptions(org.apache.commons.cli.Options):

--

[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext):
[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription():
[M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()

--

[M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescriptionFormat():
[M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescriptionFormat()
 [M]java.lang.String org.javaan.commands.BaseSetOptionsCommand.getDescription()

--

[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext):
[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.listPersistentOptions(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]boolean org.javaan.commands.BaseSetOptionsCommand.optionExsists(java.lang.String):
[M]boolean org.javaan.commands.BaseSetOptionsCommand.optionExsists(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.BaseSetOptionsCommand.processOption(org.javaan.Settings,java.lang.String):
[M]void org.javaan.commands.BaseSetOptionsCommand.processOption(org.javaan.Settings,java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[]):
[M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.BaseTypeLoadingCommand.<init>():
[M]void org.javaan.commands.BaseTypeLoadingCommand.<init>()
 [M]void org.javaan.commands.ListPackages.<init>()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]void org.javaan.commands.ListMissingTypes.<init>()
 [M]void org.javaan.commands.ListClasses.<init>()
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.<init>()
 [M]void org.javaan.commands.ListInterfaces.<init>()
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.<init>()
 [M]void org.javaan.commands.BaseCallGraphCommand.<init>()
  [M]void org.javaan.commands.ShowCallerGraph.<init>()
  [M]void org.javaan.commands.ShowCalleeGraph.<init>()
 [M]void org.javaan.commands.BaseDependencyGraphCommand.<init>()
  [M]void org.javaan.commands.BaseClassDependencyGraphCommand.<init>()
   [M]void org.javaan.commands.ShowUsingGraph.<init>()
   [M]void org.javaan.commands.ShowUsedGraph.<init>()
  [M]void org.javaan.commands.BasePackageDependencyGraphCommand.<init>()
   [M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
   [M]void org.javaan.commands.ShowPackageUsedGraph.<init>()

--

[M]void org.javaan.commands.BaseTypeLoadingCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.BaseTypeLoadingCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext):
[M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.FilterUtil.<init>():
[M]void org.javaan.commands.FilterUtil.<init>()

--

[M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher):
[M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]boolean org.javaan.commands.FilterUtil$Matcher.accept(java.lang.Object):
[M]boolean org.javaan.commands.FilterUtil$Matcher.accept(java.lang.Object)
 [M]java.util.List org.javaan.commands.FilterUtil.filter(java.util.Collection,org.javaan.commands.FilterUtil$Matcher)
  [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
   [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
  [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]void org.javaan.commands.ListClasses.<init>():
[M]void org.javaan.commands.ListClasses.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.ListClasses.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ListClasses.getDescription():

--

[M]java.lang.String org.javaan.commands.ListClasses.getName():

--

[M]void org.javaan.commands.ListClasses.printClasses(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClasses(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListClasses$1.<clinit>():
[M]void org.javaan.commands.ListClasses$1.<clinit>()

--

[M]void org.javaan.commands.ListDuplicates.<init>():
[M]void org.javaan.commands.ListDuplicates.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ListDuplicates.buildCommandLineOptions(org.apache.commons.cli.Options):

--

[M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext):
[M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]java.lang.String org.javaan.commands.ListDuplicates.getDescription():

--

[M]java.lang.String org.javaan.commands.ListDuplicates.getName():

--

[M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List):
[M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
 [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.ListInterfaces.<init>():
[M]void org.javaan.commands.ListInterfaces.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.ListInterfaces.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ListInterfaces.getDescription():

--

[M]java.lang.String org.javaan.commands.ListInterfaces.getName():

--

[M]void org.javaan.commands.ListInterfaces.printInterfaces(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection):
[M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.commands.ListInterfaces$1.<clinit>():
[M]void org.javaan.commands.ListInterfaces$1.<clinit>()

--

[M]void org.javaan.commands.ListMissingTypes.<init>():
[M]void org.javaan.commands.ListMissingTypes.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ListMissingTypes.buildCommandLineOptions(org.apache.commons.cli.Options):

--

[M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ListMissingTypes.getDescription():

--

[M]java.lang.String org.javaan.commands.ListMissingTypes.getName():

--

[M]void org.javaan.commands.ListPackages.<init>():
[M]void org.javaan.commands.ListPackages.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ListPackages.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.ListPackages.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ListPackages.getDescription():

--

[M]java.lang.String org.javaan.commands.ListPackages.getName():

--

[M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String):
[M]void org.javaan.commands.MethodMatcher.<init>(java.lang.String)
 [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object):
[M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method):
[M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
 [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method):
[M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
 [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method):
[M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method)
 [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]void org.javaan.commands.NameMatcher.<init>(java.lang.String):
[M]void org.javaan.commands.NameMatcher.<init>(java.lang.String)
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object):
[M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object)

--

[M]boolean org.javaan.commands.NameMatcher.accept(org.javaan.model.NamedObject):
[M]boolean org.javaan.commands.NameMatcher.accept(org.javaan.model.NamedObject)
 [M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object)

--

[M]void org.javaan.commands.ResetOptions.<init>():
[M]void org.javaan.commands.ResetOptions.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.javaan.commands.ResetOptions.getDescriptionFormat():

--

[M]java.lang.String org.javaan.commands.ResetOptions.getHelpCommandLine():

--

[M]java.lang.String org.javaan.commands.ResetOptions.getName():

--

[M]void org.javaan.commands.ResetOptions.processOption(org.javaan.Settings,java.lang.String):
[M]void org.javaan.commands.ResetOptions.processOption(org.javaan.Settings,java.lang.String)

--

[M]void org.javaan.commands.SetOptions.<init>():
[M]void org.javaan.commands.SetOptions.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.lang.String org.javaan.commands.SetOptions.getDescriptionFormat():

--

[M]java.lang.String org.javaan.commands.SetOptions.getHelpCommandLine():

--

[M]java.lang.String org.javaan.commands.SetOptions.getName():

--

[M]void org.javaan.commands.SetOptions.processOption(org.javaan.Settings,java.lang.String):
[M]void org.javaan.commands.SetOptions.processOption(org.javaan.Settings,java.lang.String)

--

[M]void org.javaan.commands.ShowCalleeGraph.<init>():
[M]void org.javaan.commands.ShowCalleeGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.Set org.javaan.commands.ShowCalleeGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method):
[M]java.util.Set org.javaan.commands.ShowCalleeGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method)

--

[M]java.lang.String org.javaan.commands.ShowCalleeGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowCalleeGraph.getName():

--

[M]void org.javaan.commands.ShowCalleeGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor):
[M]void org.javaan.commands.ShowCalleeGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)

--

[M]void org.javaan.commands.ShowCallerGraph.<init>():
[M]void org.javaan.commands.ShowCallerGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]java.util.Set org.javaan.commands.ShowCallerGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method):
[M]java.util.Set org.javaan.commands.ShowCallerGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method)

--

[M]java.lang.String org.javaan.commands.ShowCallerGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowCallerGraph.getName():

--

[M]void org.javaan.commands.ShowCallerGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor):
[M]void org.javaan.commands.ShowCallerGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)

--

[M]void org.javaan.commands.ShowDepdendencyCyclesGraph.<init>():
[M]void org.javaan.commands.ShowDepdendencyCyclesGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ShowDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.ShowDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ShowDepdendencyCyclesGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowDepdendencyCyclesGraph.getName():

--

[M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.<init>():
[M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.apache.commons.cli.Options org.javaan.commands.ShowPackageDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options):
[M]org.apache.commons.cli.Options org.javaan.commands.ShowPackageDepdendencyCyclesGraph.buildCommandLineOptions(org.apache.commons.cli.Options)

--

[M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List):
[M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.commands.ShowPackageDepdendencyCyclesGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowPackageDepdendencyCyclesGraph.getName():

--

[M]void org.javaan.commands.ShowPackageUsedGraph.<init>():
[M]void org.javaan.commands.ShowPackageUsedGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set):
[M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]java.lang.String org.javaan.commands.ShowPackageUsedGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowPackageUsedGraph.getName():

--

[M]void org.javaan.commands.ShowPackageUsingGraph.<init>():
[M]void org.javaan.commands.ShowPackageUsingGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set):
[M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]java.lang.String org.javaan.commands.ShowPackageUsingGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowPackageUsingGraph.getName():

--

[M]void org.javaan.commands.ShowUsedGraph.<init>():
[M]void org.javaan.commands.ShowUsedGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.model.GraphView org.javaan.commands.ShowUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set):
[M]org.javaan.model.GraphView org.javaan.commands.ShowUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]java.lang.String org.javaan.commands.ShowUsedGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowUsedGraph.getName():

--

[M]void org.javaan.commands.ShowUsingGraph.<init>():
[M]void org.javaan.commands.ShowUsingGraph.<init>()
 [M]void org.javaan.JavaanCli.main(java.lang.String[])

--

[M]org.javaan.model.GraphView org.javaan.commands.ShowUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set):
[M]org.javaan.model.GraphView org.javaan.commands.ShowUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]java.lang.String org.javaan.commands.ShowUsingGraph.getDescription():

--

[M]java.lang.String org.javaan.commands.ShowUsingGraph.getName():

--

[M]void org.javaan.commands.SortUtil.<init>():
[M]void org.javaan.commands.SortUtil.<init>()

--

[M]java.util.List org.javaan.commands.SortUtil.sort(java.util.Collection):
[M]java.util.List org.javaan.commands.SortUtil.sort(java.util.Collection)
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListMissingTypes.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]void org.javaan.commands.SortUtil.sort(java.util.List):
[M]void org.javaan.commands.SortUtil.sort(java.util.List)
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]void org.javaan.commands.SortUtil$1.<init>():
[M]void org.javaan.commands.SortUtil$1.<init>()
 [M]void org.javaan.commands.SortUtil.sort(java.util.List)
  [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
   [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object):
[M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object)

--

[M]int org.javaan.commands.SortUtil$1.compare(java.util.List,java.util.List):
[M]int org.javaan.commands.SortUtil$1.compare(java.util.List,java.util.List)
 [M]int org.javaan.commands.SortUtil$1.compare(java.lang.Object,java.lang.Object)

--

[M]void org.javaan.commands.StandardOptions.<clinit>():

--

[M]boolean org.javaan.graph.GraphVisitor.finished():

--

[M]void org.javaan.graph.GraphVisitor.vertexFinished(java.lang.Object,int):

--

[M]void org.javaan.graph.GraphVisitor.visitEdge(java.lang.Object,int):

--

[M]void org.javaan.graph.GraphVisitor.visitGraph(org.jgrapht.Graph,int):

--

[M]void org.javaan.graph.GraphVisitor.visitVertex(java.lang.Object,int):

--

[M]void org.javaan.graph.GraphVisitorAdapter.<init>():

--

[M]boolean org.javaan.graph.GraphVisitorAdapter.finished():

--

[M]void org.javaan.graph.GraphVisitorAdapter.vertexFinished(java.lang.Object,int):

--

[M]void org.javaan.graph.GraphVisitorAdapter.visitEdge(java.lang.Object,int):

--

[M]void org.javaan.graph.GraphVisitorAdapter.visitGraph(org.jgrapht.Graph,int):

--

[M]void org.javaan.graph.GraphVisitorAdapter.visitVertex(java.lang.Object,int):

--

[M]java.lang.String org.javaan.jgraphx.CellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.CellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.String org.javaan.jgraphx.CellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.CellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.String org.javaan.jgraphx.CellStyle.getVertexLabel(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.CellStyle.getVertexLabel(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.String org.javaan.jgraphx.CellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.CellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.jgraphx.DependencyGraphCellStyle.<init>(org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter):
[M]void org.javaan.jgraphx.DependencyGraphCellStyle.<init>(org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,org.javaan.model.Dependency):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,org.javaan.model.Dependency)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexLabel(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexLabel(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object):
[M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]void org.javaan.jgraphx.MxGraphBuilder.<init>(org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle):
[M]void org.javaan.jgraphx.MxGraphBuilder.<init>(org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle)
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.jgraphx.MxGraphBuilder.addEdges():
[M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.jgraphx.MxGraphBuilder.addVertices():
[M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
 [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
  [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
   [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build():
[M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
 [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
  [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.model.CallGraph.<init>(org.javaan.model.ClassContext,boolean,boolean):

--

[M]void org.javaan.model.CallGraph.addCall(org.javaan.model.Method,org.javaan.model.Method):

--

[M]void org.javaan.model.CallGraph.addCallInternal(org.javaan.model.Method,org.javaan.model.Method):

--

[M]void org.javaan.model.CallGraph.addUsageOfPackage(org.javaan.model.Method,org.javaan.model.Method):

--

[M]void org.javaan.model.CallGraph.addUsageOfType(org.javaan.model.Method,org.javaan.model.Method):

--

[M]org.jgrapht.alg.cycle.DirectedSimpleCycles org.javaan.model.CallGraph.createCycleDetector(org.jgrapht.DirectedGraph):

--

[M]java.util.Set org.javaan.model.CallGraph.getCallees(org.javaan.model.Method):

--

[M]org.javaan.model.GraphView org.javaan.model.CallGraph.getCallerOfMethodGraph():

--

[M]java.util.Set org.javaan.model.CallGraph.getCallers(org.javaan.model.Method):

--

[M]java.util.Set org.javaan.model.CallGraph.getDependenciesOf(org.javaan.model.Type):

--

[M]java.util.List org.javaan.model.CallGraph.getDependencyCycles():

--

[M]java.util.List org.javaan.model.CallGraph.getDependencyCycles(org.jgrapht.DirectedGraph):

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafCallees(org.javaan.model.Method):
[M]java.util.Set org.javaan.model.CallGraph.getLeafCallees(org.javaan.model.Method)
 [M]java.util.Set org.javaan.commands.ShowCalleeGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method)

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafCallers(org.javaan.model.Method):
[M]java.util.Set org.javaan.model.CallGraph.getLeafCallers(org.javaan.model.Method)
 [M]java.util.Set org.javaan.commands.ShowCallerGraph.collectLeafObjects(org.javaan.model.CallGraph,org.javaan.model.Method)

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafUsedPackages(org.javaan.model.Package):

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafUsedTypes(org.javaan.model.Type):

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafUsingPackages(org.javaan.model.Package):

--

[M]java.util.Set org.javaan.model.CallGraph.getLeafUsingTypes(org.javaan.model.Type):

--

[M]java.util.List org.javaan.model.CallGraph.getPackageDependencyCycles():

--

[M]java.util.List org.javaan.model.CallGraph.getTopologicalSortedPackages():

--

[M]org.javaan.model.GraphView org.javaan.model.CallGraph.getUsageOfPackageGraph():
[M]org.javaan.model.GraphView org.javaan.model.CallGraph.getUsageOfPackageGraph()
 [M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]org.javaan.model.GraphView org.javaan.model.CallGraph.getUsageOfTypeGraph():
[M]org.javaan.model.GraphView org.javaan.model.CallGraph.getUsageOfTypeGraph()
 [M]org.javaan.model.GraphView org.javaan.commands.ShowUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]int org.javaan.model.CallGraph.size():

--

[M]void org.javaan.model.CallGraph.traverseCallees(org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor):
[M]void org.javaan.model.CallGraph.traverseCallees(org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)
 [M]void org.javaan.commands.ShowCalleeGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)

--

[M]void org.javaan.model.CallGraph.traverseCallers(org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor):
[M]void org.javaan.model.CallGraph.traverseCallers(org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)
 [M]void org.javaan.commands.ShowCallerGraph.traverse(org.javaan.model.CallGraph,org.javaan.model.Method,org.javaan.graph.VertexEdgeGraphVisitor)

--

[M]void org.javaan.model.CallGraph.traverseDepdendencyCycles(org.javaan.graph.GraphVisitor,org.jgrapht.DirectedGraph):

--

[M]void org.javaan.model.CallGraph.traverseDependencyCycles(org.javaan.graph.GraphVisitor):
[M]void org.javaan.model.CallGraph.traverseDependencyCycles(org.javaan.graph.GraphVisitor)
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.model.CallGraph.traversePackageDependencyCycles(org.javaan.graph.GraphVisitor):
[M]void org.javaan.model.CallGraph.traversePackageDependencyCycles(org.javaan.graph.GraphVisitor)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.model.CallGraph.traverseUsedPackages(org.javaan.model.Package,org.javaan.graph.GraphVisitor):

--

[M]void org.javaan.model.CallGraph.traverseUsedTypes(org.javaan.model.Type,org.javaan.graph.GraphVisitor):

--

[M]void org.javaan.model.CallGraph.traverseUsingPackages(org.javaan.model.Package,org.javaan.graph.GraphVisitor):

--

[M]void org.javaan.model.CallGraph.traverseUsingTypes(org.javaan.model.Type,org.javaan.graph.GraphVisitor):

--

[M]void org.javaan.model.ClassContext.<init>():

--

[M]void org.javaan.model.ClassContext.addClass(org.javaan.model.Clazz):

--

[M]void org.javaan.model.ClassContext.addInterface(org.javaan.model.Interface):

--

[M]void org.javaan.model.ClassContext.addInterfaceOfClass(org.javaan.model.Clazz,org.javaan.model.Interface):

--

[M]void org.javaan.model.ClassContext.addMethod(org.javaan.model.Method):

--

[M]void org.javaan.model.ClassContext.addSuperClass(org.javaan.model.Clazz,org.javaan.model.Clazz):

--

[M]void org.javaan.model.ClassContext.addSuperInterface(org.javaan.model.Interface,org.javaan.model.Interface):

--

[M]void org.javaan.model.ClassContext.addType(org.javaan.model.Type):

--

[M]boolean org.javaan.model.ClassContext.containsClass(org.javaan.model.Clazz):

--

[M]boolean org.javaan.model.ClassContext.containsInterface(org.javaan.model.Interface):

--

[M]org.javaan.model.Method org.javaan.model.ClassContext.findMethod(java.util.Set,java.lang.String):

--

[M]org.javaan.model.NamedObject org.javaan.model.ClassContext.get(java.lang.String):

--

[M]java.util.Set org.javaan.model.ClassContext.getClasses():
[M]java.util.Set org.javaan.model.ClassContext.getClasses()
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getClassesOfPackage(org.javaan.model.Package):

--

[M]java.util.Set org.javaan.model.ClassContext.getDirectIntefacesOfClass(org.javaan.model.Clazz):

--

[M]java.util.Set org.javaan.model.ClassContext.getDirectSpecializationsOfClass(org.javaan.model.Clazz):

--

[M]java.util.Set org.javaan.model.ClassContext.getImplementations(org.javaan.model.Interface):
[M]java.util.Set org.javaan.model.ClassContext.getImplementations(org.javaan.model.Interface)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndImplementations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getInterfaces():
[M]java.util.Set org.javaan.model.ClassContext.getInterfaces()
 [M]java.util.Collection org.javaan.commands.BaseClassDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
 [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getInterfacesOfClass(org.javaan.model.Clazz):
[M]java.util.Set org.javaan.model.ClassContext.getInterfacesOfClass(org.javaan.model.Clazz)
 [M]void org.javaan.commands.ListClasses.printClassesAndInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getInterfacesOfPackage(org.javaan.model.Package):

--

[M]org.javaan.model.Method org.javaan.model.ClassContext.getMethod(org.javaan.model.Clazz,java.lang.String):

--

[M]org.javaan.model.Method org.javaan.model.ClassContext.getMethod(org.javaan.model.Interface,java.lang.String):

--

[M]java.util.Set org.javaan.model.ClassContext.getMethods():
[M]java.util.Set org.javaan.model.ClassContext.getMethods()
 [M]java.util.Collection org.javaan.commands.BaseCallGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getMethods(org.javaan.model.Clazz):
[M]java.util.Set org.javaan.model.ClassContext.getMethods(org.javaan.model.Clazz)
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getMethods(org.javaan.model.Interface):
[M]java.util.Set org.javaan.model.ClassContext.getMethods(org.javaan.model.Interface)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.Package org.javaan.model.ClassContext.getPackageOfType(org.javaan.model.Type):

--

[M]java.util.Set org.javaan.model.ClassContext.getPackages():
[M]java.util.Set org.javaan.model.ClassContext.getPackages()
 [M]void org.javaan.commands.ListPackages.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]java.util.Collection org.javaan.commands.BasePackageDependencyGraphCommand.getInput(org.javaan.model.ClassContext,org.javaan.model.CallGraph,java.lang.String)

--

[M]java.util.Set org.javaan.model.ClassContext.getSpecializationOfInterface(org.javaan.model.Interface):
[M]java.util.Set org.javaan.model.ClassContext.getSpecializationOfInterface(org.javaan.model.Interface)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSpecializations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getSpecializationsOfClass(org.javaan.model.Clazz):
[M]java.util.Set org.javaan.model.ClassContext.getSpecializationsOfClass(org.javaan.model.Clazz)
 [M]void org.javaan.commands.ListClasses.printClassesAndSpecializations(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.Clazz org.javaan.model.ClassContext.getSuperClass(org.javaan.model.Clazz):

--

[M]org.javaan.model.TreeView org.javaan.model.ClassContext.getSuperClassGraph():

--

[M]java.util.List org.javaan.model.ClassContext.getSuperClassHierachy(org.javaan.model.Clazz):
[M]java.util.List org.javaan.model.ClassContext.getSuperClassHierachy(org.javaan.model.Clazz)
 [M]void org.javaan.commands.ListClasses.printClassesAndSuperClasses(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.GraphView org.javaan.model.ClassContext.getSuperInterfaceGraph():

--

[M]java.util.Set org.javaan.model.ClassContext.getSuperInterfaces(org.javaan.model.Interface):
[M]java.util.Set org.javaan.model.ClassContext.getSuperInterfaces(org.javaan.model.Interface)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndSuperInterfaces(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getTypesOfPackage(org.javaan.model.Package):

--

[M]org.javaan.model.Method org.javaan.model.ClassContext.getVirtualMethod(org.javaan.model.Clazz,java.lang.String):

--

[M]org.javaan.model.Method org.javaan.model.ClassContext.getVirtualMethod(org.javaan.model.Interface,java.lang.String):

--

[M]java.util.Set org.javaan.model.ClassContext.getVirtualMethods(org.javaan.model.Clazz):
[M]java.util.Set org.javaan.model.ClassContext.getVirtualMethods(org.javaan.model.Clazz)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.ClassContext.getVirtualMethods(org.javaan.model.Interface):
[M]java.util.Set org.javaan.model.ClassContext.getVirtualMethods(org.javaan.model.Interface)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.model.DuplicatesFinder.<init>(java.util.List):
[M]void org.javaan.model.DuplicatesFinder.<init>(java.util.List)
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.util.Set org.javaan.model.DuplicatesFinder.createUniqueSet():
[M]java.util.Set org.javaan.model.DuplicatesFinder.createUniqueSet()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.util.List org.javaan.model.DuplicatesFinder.find():
[M]java.util.List org.javaan.model.DuplicatesFinder.find()
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]boolean org.javaan.model.DuplicatesFinder.hasDuplicates():
[M]boolean org.javaan.model.DuplicatesFinder.hasDuplicates()
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]java.util.Set org.javaan.model.GraphView.collectLeaves(java.lang.Object,boolean):
[M]java.util.Set org.javaan.model.GraphView.collectLeaves(java.lang.Object,boolean)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]org.javaan.model.GraphView org.javaan.model.GraphView.createSubgraph(java.util.Set,boolean):
[M]org.javaan.model.GraphView org.javaan.model.GraphView.createSubgraph(java.util.Set,boolean)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowUsingGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)
 [M]org.javaan.model.GraphView org.javaan.commands.ShowPackageUsedGraph.getDependencyGraph(org.javaan.model.CallGraph,java.util.Set)

--

[M]java.util.Set org.javaan.model.GraphView.edgeSet():
[M]java.util.Set org.javaan.model.GraphView.edgeSet()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object org.javaan.model.GraphView.getEdge(java.lang.Object,java.lang.Object):

--

[M]java.lang.Object org.javaan.model.GraphView.getEdgeSource(java.lang.Object):
[M]java.lang.Object org.javaan.model.GraphView.getEdgeSource(java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]java.lang.Object org.javaan.model.GraphView.getEdgeTarget(java.lang.Object):
[M]java.lang.Object org.javaan.model.GraphView.getEdgeTarget(java.lang.Object)
 [M]void org.javaan.jgraphx.MxGraphBuilder.addEdges()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]double org.javaan.model.GraphView.getEdgeWeight(java.lang.Object):
[M]double org.javaan.model.GraphView.getEdgeWeight(java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeStyle(org.javaan.model.GraphView,java.lang.Object)

--

[M]java.util.Set org.javaan.model.GraphView.incomingEdgesOf(java.lang.Object):

--

[M]java.util.Set org.javaan.model.GraphView.outgoingEdgesOf(java.lang.Object):

--

[M]java.util.Set org.javaan.model.GraphView.predecessorsOf(java.lang.Object):

--

[M]java.util.Set org.javaan.model.GraphView.sourceVerticesOf(java.lang.Object):

--

[M]java.util.Set org.javaan.model.GraphView.successorsOf(java.lang.Object):

--

[M]java.util.Set org.javaan.model.GraphView.targetVerticesOf(java.lang.Object):

--

[M]void org.javaan.model.GraphView.traverseBreadthFirst(java.lang.Object,org.javaan.graph.GraphVisitor,boolean):

--

[M]void org.javaan.model.GraphView.traverseDepthFirst(java.lang.Object,org.javaan.graph.GraphVisitor,boolean):
[M]void org.javaan.model.GraphView.traverseDepthFirst(java.lang.Object,org.javaan.graph.GraphVisitor,boolean)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.util.Set org.javaan.model.GraphView.vertexSet():
[M]java.util.Set org.javaan.model.GraphView.vertexSet()
 [M]void org.javaan.jgraphx.MxGraphBuilder.addVertices()
  [M]com.mxgraph.view.mxGraph org.javaan.jgraphx.MxGraphBuilder.build()
   [M]void org.javaan.Graph2dDisplay.<init>(java.lang.String,org.javaan.model.GraphView,org.javaan.jgraphx.CellStyle,org.javaan.Settings)
    [M]void org.javaan.commands.BaseDependencyGraphCommand$1.run()

--

[M]void org.javaan.model.Method.<init>(org.javaan.model.Type,java.lang.String):

--

[M]java.lang.String org.javaan.model.Method.buildUniqueMethodName(org.javaan.model.Type,java.lang.String):

--

[M]org.javaan.model.Method org.javaan.model.Method.create(org.javaan.model.Type,java.lang.reflect.Constructor):

--

[M]org.javaan.model.Method org.javaan.model.Method.create(org.javaan.model.Type,java.lang.reflect.Method):

--

[M]org.javaan.model.Method org.javaan.model.Method.create(org.javaan.model.Type,org.apache.bcel.classfile.Method):

--

[M]org.apache.bcel.generic.MethodGen org.javaan.model.Method.createMethodGen(org.javaan.model.Clazz,org.apache.bcel.generic.ConstantPoolGen):

--

[M]java.util.List org.javaan.model.Method.getAnnotationTypes():
[M]java.util.List org.javaan.model.Method.getAnnotationTypes()
 [M]boolean org.javaan.commands.MethodMatcher.acceptAnnotationClass(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]java.lang.String org.javaan.model.Method.getMethodName():

--

[M]java.util.List org.javaan.model.Method.getParamterTypes():

--

[M]java.lang.String org.javaan.model.Method.getReturnType():

--

[M]java.lang.String org.javaan.model.Method.getSignature():

--

[M]org.javaan.model.Type org.javaan.model.Method.getType():
[M]org.javaan.model.Type org.javaan.model.Method.getType()
 [M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]boolean org.javaan.model.Method.isAbstract():

--

[M]java.lang.String org.javaan.model.NamedObject.getName():
[M]java.lang.String org.javaan.model.NamedObject.getName()
 [M]boolean org.javaan.commands.NameMatcher.accept(org.javaan.model.NamedObject)
  [M]boolean org.javaan.commands.NameMatcher.accept(java.lang.Object)

--

[M]int org.javaan.model.NamedObjectBase.compareTo(java.lang.Object):

--

[M]int org.javaan.model.NamedObjectBase.compareTo(org.javaan.model.NamedObject):

--

[M]boolean org.javaan.model.NamedObjectBase.equals(java.lang.Object):

--

[M]java.lang.String org.javaan.model.NamedObjectBase.getName():
[M]java.lang.String org.javaan.model.NamedObjectBase.getName()
 [M]boolean org.javaan.commands.MethodMatcher.acceptMethodName(org.javaan.model.Method)
  [M]boolean org.javaan.commands.MethodMatcher.accept(org.javaan.model.Method)
   [M]boolean org.javaan.commands.MethodMatcher.accept(java.lang.Object)

--

[M]int org.javaan.model.NamedObjectBase.hashCode():

--

[M]java.lang.String org.javaan.model.NamedObjectBase.toString():

--

[M]org.javaan.model.NamedObject org.javaan.model.NamedObjectRepository.get(java.lang.String):

--

[M]org.javaan.model.Type org.javaan.model.Type.create(org.apache.bcel.classfile.JavaClass,java.lang.String):

--

[M]java.lang.String org.javaan.model.Type.getFilePath():

--

[M]org.apache.bcel.classfile.JavaClass org.javaan.model.Type.getJavaClass():

--

[M]org.javaan.model.Type$JavaType org.javaan.model.Type.getJavaType():

--

[M]java.lang.String org.javaan.model.Type.getShortName():

--

[M]java.lang.String org.javaan.model.Type.getShortName(java.lang.String):

--

[M]org.javaan.model.Clazz org.javaan.model.Type.toClazz():

--

[M]org.javaan.model.Interface org.javaan.model.Type.toInterface():

--

[M]void org.javaan.print.ConsoleDependencyFormatter.<init>():
[M]void org.javaan.print.ConsoleDependencyFormatter.<init>()
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseDependencyGraphCommand.getConsoleDependencyFormatter()
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.print.ConsoleDependencyFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.ConsoleDependencyFormatter.format(org.javaan.model.Dependency):

--

[M]void org.javaan.print.GraphPrinter.<init>(java.io.Writer,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter):

--

[M]void org.javaan.print.GraphPrinter.<init>(java.io.Writer,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter,java.lang.String):

--

[M]void org.javaan.print.GraphPrinter.visitEdge(java.lang.Object,int):

--

[M]void org.javaan.print.GraphPrinter.visitGraph(org.jgrapht.Graph,int):

--

[M]void org.javaan.print.GraphPrinter.visitVertex(java.lang.Object,int):

--

[M]void org.javaan.print.MethodFormatter.<init>():
[M]void org.javaan.print.MethodFormatter.<init>()
 [M]void org.javaan.commands.ListClasses.printClassesAndMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListClasses.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListClasses.printClassesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndVirtualMethods(java.io.PrintStream,java.util.Collection)
  [M]void org.javaan.commands.ListInterfaces.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.ListInterfaces.printInterfacesAndMethods(java.io.PrintStream,java.util.Collection)
 [M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseCallGraphCommand.getFormatter()
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]java.lang.String org.javaan.print.MethodFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.MethodFormatter.format(org.javaan.model.Method):

--

[M]void org.javaan.print.MethodListDependencyFormatter.<init>(int):
[M]void org.javaan.print.MethodListDependencyFormatter.<init>(int)
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.lang.String org.javaan.print.MethodListDependencyFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.MethodListDependencyFormatter.format(org.javaan.model.Dependency):

--

[M]void org.javaan.print.NumberOfMethodsDependencyFormatter.<init>():
[M]void org.javaan.print.NumberOfMethodsDependencyFormatter.<init>()
 [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.lang.String org.javaan.print.NumberOfMethodsDependencyFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.NumberOfMethodsDependencyFormatter.format(org.javaan.model.Dependency):

--

[M]java.lang.String org.javaan.print.ObjectFormatter.format(java.lang.Object):
[M]java.lang.String org.javaan.print.ObjectFormatter.format(java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,org.javaan.model.Dependency)
  [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getEdgeLabel(org.javaan.model.GraphView,java.lang.Object)
 [M]java.lang.String org.javaan.jgraphx.DependencyGraphCellStyle.getVertexLabel(org.javaan.model.GraphView,java.lang.Object)
 [M]void org.javaan.commands.BaseCallGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseCallGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseCallGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printLeafObjects(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter)
  [M]void org.javaan.commands.BaseDependencyGraphCommand.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]void org.javaan.commands.BaseDependencyGraphCommand.printGraph(org.javaan.model.CallGraph,java.io.PrintStream,java.util.Collection,org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter)

--

[M]void org.javaan.print.PackageFormatter.<init>():
[M]void org.javaan.print.PackageFormatter.<init>()
 [M]void org.javaan.commands.ShowPackageDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)
 [M]org.javaan.print.ObjectFormatter org.javaan.commands.BasePackageDependencyGraphCommand.getTypeFormatter()
  [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BasePackageDependencyGraphCommand.getDependencyGraphCellStyle()

--

[M]java.lang.String org.javaan.print.PackageFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.PackageFormatter.format(org.javaan.model.Package):

--

[M]void org.javaan.print.PrintUtil.<init>():

--

[M]java.lang.String org.javaan.print.PrintUtil.createArgumentList(java.util.List):

--

[M]void org.javaan.print.PrintUtil.format(java.io.Writer,java.lang.String,java.lang.Object[]):

--

[M]void org.javaan.print.PrintUtil.indent(java.io.Writer,org.javaan.print.ObjectFormatter,java.lang.Object,int):

--

[M]void org.javaan.print.PrintUtil.print(java.io.Writer,java.lang.String):

--

[M]void org.javaan.print.PrintUtil.printSeparator(java.io.Writer):

--

[M]void org.javaan.print.PrintUtil.println(java.io.Writer):

--

[M]void org.javaan.print.PrintUtil.println(java.io.Writer,java.lang.String):

--

[M]void org.javaan.print.PrintUtil.println(java.io.Writer,java.util.Collection,java.lang.String,java.lang.String,java.lang.String):

--

[M]void org.javaan.print.PrintUtil.println(java.io.Writer,org.javaan.print.ObjectFormatter,java.util.Collection,java.lang.String,java.lang.String,java.lang.String):

--

[M]void org.javaan.print.TypeFormatter.<init>():
[M]void org.javaan.print.TypeFormatter.<init>()
 [M]org.javaan.print.ObjectFormatter org.javaan.commands.BaseClassDependencyGraphCommand.getTypeFormatter()
  [M]org.javaan.jgraphx.CellStyle org.javaan.commands.BaseClassDependencyGraphCommand.getDependencyGraphCellStyle()
 [M]void org.javaan.commands.ShowDepdendencyCyclesGraph.execute(java.io.PrintStream,org.javaan.CommandContext,java.util.List)

--

[M]void org.javaan.print.TypeFormatter.<init>(org.javaan.print.ObjectFormatter,org.javaan.print.ObjectFormatter):

--

[M]java.lang.String org.javaan.print.TypeFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.TypeFormatter.format(org.javaan.model.Type):

--

[M]void org.javaan.print.TypeInformationFormatter.<init>():
[M]void org.javaan.print.TypeInformationFormatter.<init>()
 [M]void org.javaan.commands.ListDuplicates.printDuplicates(java.io.PrintStream,java.util.List)
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)

--

[M]java.lang.String org.javaan.print.TypeInformationFormatter.format(java.lang.Object):

--

[M]java.lang.String org.javaan.print.TypeInformationFormatter.format(org.javaan.model.Type):

--

[M]void org.javaan.print.VertexEdgeGraphPrinter.<init>(java.io.Writer,org.javaan.print.ObjectFormatter):

--

[M]void org.javaan.print.VertexEdgeGraphPrinter.visitVertex(java.lang.Object,int):

--

[M]void org.slf4j.Logger.debug(java.lang.String):

--

[M]void org.slf4j.Logger.debug(java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.debug(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.debug(java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.debug(java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String):

--

[M]void org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.error(java.lang.String):
[M]void org.slf4j.Logger.error(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.processOptions(org.javaan.CommandContext,java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseSetOptionsCommand.execute(org.javaan.CommandContext)

--

[M]void org.slf4j.Logger.error(java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.error(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.error(java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.error(java.lang.String,java.lang.Throwable):
[M]void org.slf4j.Logger.error(java.lang.String,java.lang.Throwable)
 [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
 [M]org.javaan.ReturnCodes org.javaan.JavaanCli.execute()
  [M]void org.javaan.JavaanCli.main(java.lang.String[])
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String):

--

[M]void org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.error(org.slf4j.Marker,java.lang.String,java.lang.Throwable):

--

[M]java.lang.String org.slf4j.Logger.getName():

--

[M]void org.slf4j.Logger.info(java.lang.String):
[M]void org.slf4j.Logger.info(java.lang.String)
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.slf4j.Logger.info(java.lang.String,java.lang.Object):
[M]void org.slf4j.Logger.info(java.lang.String,java.lang.Object)
 [M]java.util.List org.javaan.commands.BaseCommand.loadTypes(java.lang.String[])
  [M]org.javaan.ReturnCodes org.javaan.commands.ListDuplicates.execute(org.javaan.CommandContext)
  [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.slf4j.Logger.info(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.info(java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.info(java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String):

--

[M]void org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.info(org.slf4j.Marker,java.lang.String,java.lang.Throwable):

--

[M]boolean org.slf4j.Logger.isDebugEnabled():

--

[M]boolean org.slf4j.Logger.isDebugEnabled(org.slf4j.Marker):

--

[M]boolean org.slf4j.Logger.isErrorEnabled():

--

[M]boolean org.slf4j.Logger.isErrorEnabled(org.slf4j.Marker):

--

[M]boolean org.slf4j.Logger.isInfoEnabled():

--

[M]boolean org.slf4j.Logger.isInfoEnabled(org.slf4j.Marker):

--

[M]boolean org.slf4j.Logger.isTraceEnabled():

--

[M]boolean org.slf4j.Logger.isTraceEnabled(org.slf4j.Marker):

--

[M]boolean org.slf4j.Logger.isWarnEnabled():

--

[M]boolean org.slf4j.Logger.isWarnEnabled(org.slf4j.Marker):

--

[M]void org.slf4j.Logger.trace(java.lang.String):

--

[M]void org.slf4j.Logger.trace(java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.trace(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.trace(java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.trace(java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String):

--

[M]void org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.warn(java.lang.String):
[M]void org.slf4j.Logger.warn(java.lang.String)
 [M]org.javaan.ReturnCodes org.javaan.commands.BaseTypeLoadingCommand.execute(org.javaan.CommandContext)

--

[M]void org.slf4j.Logger.warn(java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.warn(java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.warn(java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.warn(java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String):

--

[M]void org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object):

--

[M]void org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object):

--

[M]void org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]):

--

[M]void org.slf4j.Logger.warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable):

--

[M]void org.slf4j.LoggerFactory.bind():

--

[M]void org.slf4j.LoggerFactory.emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int):

--

[M]void org.slf4j.LoggerFactory.emitReplayWarning(int):

--

[M]void org.slf4j.LoggerFactory.emitSubstitutionWarning():

--

[M]void org.slf4j.LoggerFactory.failedBinding(java.lang.Throwable):

--

[M]java.util.Set org.slf4j.LoggerFactory.findPossibleStaticLoggerBinderPathSet():

--

[M]void org.slf4j.LoggerFactory.fixSubstituteLoggers():

--

[M]org.slf4j.ILoggerFactory org.slf4j.LoggerFactory.getILoggerFactory():

--

[M]org.slf4j.Logger org.slf4j.LoggerFactory.getLogger(java.lang.Class):
[M]org.slf4j.Logger org.slf4j.LoggerFactory.getLogger(java.lang.Class)
 [M]void org.javaan.JavaanCli.<clinit>()

--

[M]org.slf4j.Logger org.slf4j.LoggerFactory.getLogger(java.lang.String):
[M]org.slf4j.Logger org.slf4j.LoggerFactory.getLogger(java.lang.String)
 [M]void org.javaan.commands.BaseCommand.<clinit>()

--

[M]boolean org.slf4j.LoggerFactory.isAmbiguousStaticLoggerBinderPathSet(java.util.Set):

--

[M]boolean org.slf4j.LoggerFactory.isAndroid():

--

[M]boolean org.slf4j.LoggerFactory.messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String):

--

[M]boolean org.slf4j.LoggerFactory.nonMatchingClasses(java.lang.Class,java.lang.Class):

--

[M]void org.slf4j.LoggerFactory.performInitialization():

--

[M]void org.slf4j.LoggerFactory.replayEvents():

--

[M]void org.slf4j.LoggerFactory.replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent):

--

[M]void org.slf4j.LoggerFactory.reportActualBinding(java.util.Set):

--

[M]void org.slf4j.LoggerFactory.reportMultipleBindingAmbiguity(java.util.Set):

--

[M]void org.slf4j.LoggerFactory.reset():

--

[M]void org.slf4j.LoggerFactory.versionSanityCheck():

--

